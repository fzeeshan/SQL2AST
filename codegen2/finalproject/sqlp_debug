Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statements
Rule 1     delim -> DELIM
Rule 2     delim -> ;
Rule 3     not_opt -> <empty>
Rule 4     not_opt -> NOT
Rule 5     not_opt -> LOGICAL_NOT
Rule 6     escape_opt -> <empty>
Rule 7     escape_opt -> ESCAPE simple_expr
Rule 8     expr -> expr OR expr
Rule 9     expr -> expr AND expr
Rule 10    expr -> expr XOR expr
Rule 11    expr -> NOT expr
Rule 12    true_false_or_unknown -> TRUE
Rule 13    true_false_or_unknown -> FALSE
Rule 14    true_false_or_unknown -> UNKNOWN
Rule 15    expr -> boolean_primary IS not_opt true_false_or_unknown
Rule 16    expr -> boolean_primary
Rule 17    boolean_primary -> boolean_primary IS not_opt NULL
Rule 18    boolean_primary -> boolean_primary NULL_SAFE predicate
Rule 19    boolean_primary -> boolean_primary comparison_operator predicate
Rule 20    all_or_any -> ALL
Rule 21    all_or_any -> ANY
Rule 22    all_or_any -> SOME
Rule 23    boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery )
Rule 24    boolean_primary -> predicate
Rule 25    comparison_operator -> EQ
Rule 26    comparison_operator -> GE
Rule 27    comparison_operator -> GT
Rule 28    comparison_operator -> LE
Rule 29    comparison_operator -> LT
Rule 30    comparison_operator -> NE
Rule 31    expr_list -> expr
Rule 32    expr_list -> expr , expr_list
Rule 33    predicate -> bit_expr not_opt IN ( subquery )
Rule 34    predicate -> bit_expr not_opt IN ( expr_list )
Rule 35    predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate
Rule 36    predicate -> bit_expr SOUNDS LIKE bit_expr
Rule 37    predicate -> bit_expr not_opt LIKE simple_expr escape_opt
Rule 38    predicate -> bit_expr not_opt REGEXP bit_expr
Rule 39    predicate -> bit_expr
Rule 40    bit_expr -> bit_expr BITWISE_OR bit_expr
Rule 41    bit_expr -> bit_expr BITWISE_AND bit_expr
Rule 42    bit_expr -> bit_expr SHL bit_expr
Rule 43    bit_expr -> bit_expr SHR bit_expr
Rule 44    bit_expr -> bit_expr PLUS bit_expr
Rule 45    bit_expr -> bit_expr MINUS bit_expr
Rule 46    bit_expr -> bit_expr TIMES bit_expr
Rule 47    bit_expr -> bit_expr DIV bit_expr
Rule 48    bit_expr -> bit_expr MOD bit_expr
Rule 49    bit_expr -> bit_expr BITWISE_XOR bit_expr
Rule 50    bit_expr -> simple_expr
Rule 51    literal -> STRING
Rule 52    literal -> NUMBER
Rule 53    literal -> FLOAT_LIT
Rule 54    simple_expr -> literal
Rule 55    simple_expr -> IDENT
Rule 56    simple_expr -> @ IDENT
Rule 57    simple_expr -> function_call
Rule 58    subquery -> select
Rule 59    simple_expr -> ( subquery )
Rule 60    simple_expr -> EXISTS ( subquery )
Rule 61    simple_expr -> ( expr_list )
Rule 62    simple_expr -> ROW ( expr_list )
Rule 63    convert_function -> CONVERT ( expr USING IDENT )
Rule 64    cast_type -> character_statement
Rule 65    cast_type -> DATE
Rule 66    cast_type -> DATETIME
Rule 67    cast_type -> DECIMAL bidimensional_limit_opt
Rule 68    signed_or_unsigned -> SIGNED
Rule 69    signed_or_unsigned -> UNSIGNED
Rule 70    ignore_integer -> <empty>
Rule 71    ignore_integer -> INTEGER
Rule 72    cast_type -> signed_or_unsigned ignore_integer
Rule 73    cast_type -> TIME
Rule 74    cast_function -> CAST ( expr AS cast_type )
Rule 75    opt_distinct -> <empty>
Rule 76    opt_distinct -> DISTINCT
Rule 77    average_function -> AVG ( opt_distinct expr )
Rule 78    bit_function -> BIT_AND ( expr )
Rule 79    bit_function -> BIT_OR ( expr )
Rule 80    bit_function -> BIT_XOR ( expr )
Rule 81    opt_all -> ALL
Rule 82    opt_all -> <empty>
Rule 83    count_function -> COUNT ( opt_all * )
Rule 84    count_function -> COUNT ( expr )
Rule 85    count_function -> COUNT ( DISTINCT expr_list )
Rule 86    max_function -> MAX ( opt_distinct expr )
Rule 87    min_function -> MIN ( opt_distinct expr )
Rule 88    sum_function -> SUM ( opt_distinct expr )
Rule 89    other_function -> IDENT ( )
Rule 90    other_function -> IDENT ( expr_list )
Rule 91    function_call -> convert_function
Rule 92    function_call -> cast_function
Rule 93    function_call -> average_function
Rule 94    function_call -> bit_function
Rule 95    function_call -> count_function
Rule 96    function_call -> max_function
Rule 97    function_call -> min_function
Rule 98    function_call -> sum_function
Rule 99    function_call -> other_function
Rule 100   ignore_comma -> ,
Rule 101   ignore_comma -> <empty>
Rule 102   ignore_eq -> EQ
Rule 103   ignore_eq -> <empty>
Rule 104   ignore_index_or_key -> KEY
Rule 105   ignore_index_or_key -> INDEX
Rule 106   ignore_index_or_key -> <empty>
Rule 107   ignore_key -> KEY
Rule 108   ignore_key -> <empty>
Rule 109   ignore_default -> DEFAULT
Rule 110   ignore_default -> <empty>
Rule 111   ignore_column -> COLUMN
Rule 112   ignore_column -> <empty>
Rule 113   ignore_to_or_as -> TO
Rule 114   ignore_to_or_as -> AS
Rule 115   ignore_to_or_as -> <empty>
Rule 116   check_index_or_key -> INDEX
Rule 117   check_index_or_key -> KEY
Rule 118   constraint_opt -> <empty>
Rule 119   constraint_opt -> CONSTRAINT IDENT
Rule 120   column_name -> IDENT
Rule 121   column_names -> column_name
Rule 122   column_names -> column_name , column_names
Rule 123   primary_key_statement -> constraint_opt PRIMARY KEY ( column_names )
Rule 124   index_statement -> INDEX IDENT ( column_names )
Rule 125   index_statement -> KEY IDENT ( column_names )
Rule 126   index_name_opt -> <empty>
Rule 127   index_name_opt -> IDENT
Rule 128   unique_statement -> constraint_opt UNIQUE ignore_index_or_key index_name_opt ( column_names )
Rule 129   col_name -> IDENT
Rule 130   integer_type -> TINYINT
Rule 131   integer_type -> SMALLINT
Rule 132   integer_type -> MEDIUMINT
Rule 133   integer_type -> INT
Rule 134   integer_type -> INTEGER
Rule 135   integer_type -> BIGINT
Rule 136   double_precision_type -> FLOAT
Rule 137   double_precision_type -> DECIMAL
Rule 138   double_precision_type -> NUMERIC
Rule 139   limit_opt -> <empty>
Rule 140   limit_opt -> limit
Rule 141   limit -> ( NUMBER )
Rule 142   bidimensional_limit_opt -> <empty>
Rule 143   bidimensional_limit_opt -> bidimensional_limit
Rule 144   bidimensional_limit -> ( NUMBER , NUMBER )
Rule 145   charset_statement -> CHARACTER SET IDENT
Rule 146   collate_statement -> COLLATE IDENT
Rule 147   null -> NULL
Rule 148   null -> NOT NULL
Rule 149   key -> UNIQUE ignore_key
Rule 150   key -> KEY
Rule 151   key -> PRIMARY KEY
Rule 152   auto_increment -> AUTO_INCREMENT
Rule 153   default -> DEFAULT value
Rule 154   value -> NULL
Rule 155   value -> STRING
Rule 156   value -> NUMBER
Rule 157   value -> FLOAT_LIT
Rule 158   value -> IDENT
Rule 159   unsigned_opt -> <empty>
Rule 160   unsigned_opt -> UNSIGNED
Rule 161   integer_statement -> integer_type limit_opt unsigned_opt
Rule 162   double_precision_statement -> double_precision_type bidimensional_limit_opt unsigned_opt
Rule 163   check_char_or_character -> CHAR
Rule 164   check_char_or_character -> CHARACTER
Rule 165   character_statement -> check_char_or_character limit_opt
Rule 166   string_statement -> VARCHAR limit
Rule 167   text_type -> TINYTEXT
Rule 168   text_type -> TEXT
Rule 169   text_type -> MEDIUMTEXT
Rule 170   text_type -> LONGTEXT
Rule 171   text_statement -> text_type
Rule 172   simple_statement -> DATE
Rule 173   simple_statement -> TIME
Rule 174   simple_statement -> TIMESTAMP
Rule 175   simple_statement -> DATETIME
Rule 176   binary_statement -> TINYBLOB
Rule 177   binary_statement -> BLOB
Rule 178   binary_statement -> MEDIUMBLOB
Rule 179   binary_statement -> LONGBLOB
Rule 180   data_type -> integer_statement
Rule 181   data_type -> double_precision_statement
Rule 182   data_type -> character_statement
Rule 183   data_type -> string_statement
Rule 184   data_type -> text_statement
Rule 185   data_type -> simple_statement
Rule 186   data_type -> binary_statement
Rule 187   column_option -> null
Rule 188   column_option -> default
Rule 189   column_option -> auto_increment
Rule 190   column_option -> key
Rule 191   column_option -> charset_statement
Rule 192   column_option -> collate_statement
Rule 193   column_options -> <empty>
Rule 194   column_options -> column_option column_options
Rule 195   column_statement -> data_type column_options
Rule 196   create_statement -> col_name column_statement
Rule 197   create_statement -> primary_key_statement
Rule 198   create_statement -> index_statement
Rule 199   create_statement -> unique_statement
Rule 200   create_statements -> create_statement
Rule 201   create_statements -> create_statement , create_statements
Rule 202   table_option -> ENGINE ignore_eq IDENT
Rule 203   table_option -> AUTO_INCREMENT ignore_eq NUMBER
Rule 204   table_option -> ignore_default CHARACTER SET ignore_eq IDENT
Rule 205   table_option -> ignore_default CHARSET ignore_eq IDENT
Rule 206   table_option -> ignore_default COLLATE ignore_eq IDENT
Rule 207   table_options_opt -> <empty>
Rule 208   table_options_opt -> table_options
Rule 209   table_options -> table_option
Rule 210   table_options -> table_option ignore_comma table_options
Rule 211   if_not_exists -> <empty>
Rule 212   if_not_exists -> IF NOT EXISTS
Rule 213   create_table -> CREATE TABLE if_not_exists IDENT ( create_statements ) table_options_opt
Rule 214   temporary -> <empty>
Rule 215   temporary -> TEMPORARY
Rule 216   if_exists -> <empty>
Rule 217   if_exists -> IF EXISTS
Rule 218   opt_restrict_cascade -> <empty>
Rule 219   opt_restrict_cascade -> RESTRICT
Rule 220   opt_restrict_cascade -> CASCADE
Rule 221   drop_table -> DROP temporary TABLE if_exists ident_list opt_restrict_cascade
Rule 222   position_opt -> <empty>
Rule 223   position_opt -> position
Rule 224   position -> FIRST
Rule 225   position -> AFTER IDENT
Rule 226   add_column -> ADD ignore_column column_name column_statement position_opt
Rule 227   add_index -> ADD check_index_or_key index_name_opt ( column_names )
Rule 228   add_index -> ADD constraint_opt UNIQUE ignore_index_or_key index_name_opt ( column_names )
Rule 229   add_primary_key -> ADD constraint_opt PRIMARY KEY ( column_names )
Rule 230   change_column -> CHANGE ignore_column column_name column_name column_statement position_opt
Rule 231   change_column -> MODIFY ignore_column column_name column_statement position_opt
Rule 232   change_default -> ALTER ignore_column IDENT SET DEFAULT literal
Rule 233   change_default -> ALTER ignore_column IDENT DROP DEFAULT
Rule 234   remove_column -> DROP ignore_column IDENT
Rule 235   remove_primary_key -> DROP PRIMARY KEY
Rule 236   remove_index -> DROP check_index_or_key IDENT
Rule 237   alter_rename_table -> RENAME ignore_to_or_as IDENT
Rule 238   alter_specification -> add_column
Rule 239   alter_specification -> add_index
Rule 240   alter_specification -> add_primary_key
Rule 241   alter_specification -> change_column
Rule 242   alter_specification -> change_default
Rule 243   alter_specification -> remove_column
Rule 244   alter_specification -> remove_primary_key
Rule 245   alter_specification -> remove_index
Rule 246   alter_specification -> alter_rename_table
Rule 247   alter_specifications -> alter_specification
Rule 248   alter_specifications -> alter_specification , alter_specifications
Rule 249   alter_table -> ALTER TABLE IDENT alter_specifications
Rule 250   opt_insert_update -> <empty>
Rule 251   table_ident -> IDENT
Rule 252   table_name -> table_ident
Rule 253   insert_table -> table_name
Rule 254   expr_or_default -> expr
Rule 255   expr_or_default -> DEFAULT
Rule 256   equal -> EQ
Rule 257   equal -> SET_VAR
Rule 258   simple_ident_nospvar -> IDENT
Rule 259   insert_update_elem -> simple_ident_nospvar equal expr_or_default
Rule 260   insert_update_list -> insert_update_elem
Rule 261   insert_update_list -> insert_update_elem , insert_update_list
Rule 262   opt_insert_update -> ON DUPLICATE KEY UPDATE insert_update_list
Rule 263   insert_ident -> simple_ident_nospvar
Rule 264   insert_ident -> table_wild
Rule 265   fields -> insert_ident
Rule 266   fields -> insert_ident , fields
Rule 267   opt_values -> <empty>
Rule 268   opt_values -> values
Rule 269   values -> expr_or_default
Rule 270   values -> expr_or_default , values
Rule 271   no_braces -> ( opt_values )
Rule 272   values_list -> no_braces
Rule 273   values_list -> no_braces , values_list
Rule 274   insert_values -> VALUES values_list
Rule 275   insert_values -> VALUE values_list
Rule 276   opt_select_from -> opt_limit_clause
Rule 277   select_lock_type -> <empty>
Rule 278   select_lock_type -> FOR UPDATE
Rule 279   select_lock_type -> LOCK IN SHARE MODE
Rule 280   opt_select_from -> select_from select_lock_type
Rule 281   create_select -> SELECT select_options select_item_list opt_select_from
Rule 282   union_option -> <empty>
Rule 283   union_option -> DISTINCT
Rule 284   union_option -> ALL
Rule 285   select_part2 -> select_options select_item_list select_into select_lock_type
Rule 286   union_opt -> <empty>
Rule 287   union_opt -> union_list
Rule 288   opt_limit_clause_init -> <empty>
Rule 289   opt_limit_clause_init -> limit_clause
Rule 290   order_or_limit -> order_clause opt_limit_clause_init
Rule 291   order_or_limit -> limit_clause
Rule 292   union_order_or_limit -> order_or_limit
Rule 293   union_opt -> union_order_or_limit
Rule 294   select_paren -> SELECT select_init2
Rule 295   select_paren -> ( select_paren )
Rule 296   union_select_init -> SELECT select_init2
Rule 297   union_select_init -> ( select_paren ) union_opt
Rule 298   union_list -> UNION union_option union_select_init
Rule 299   union_clause -> <empty>
Rule 300   union_clause -> union_list
Rule 301   select_init2 -> select_part2 union_clause
Rule 302   insert_values -> create_select union_clause
Rule 303   insert_values -> ( create_select ) union_opt
Rule 304   insert_field_spec -> insert_values
Rule 305   insert_field_spec -> ( ) insert_values
Rule 306   insert_field_spec -> ( fields ) insert_values
Rule 307   ident_eq_value -> simple_ident_nospvar equal expr_or_default
Rule 308   ident_eq_list -> ident_eq_value
Rule 309   ident_eq_list -> ident_eq_value , ident_eq_list
Rule 310   insert_field_spec -> SET ident_eq_list
Rule 311   insert2 -> INTO insert_table
Rule 312   insert2 -> insert_table
Rule 313   opt_ignore -> <empty>
Rule 314   opt_ignore -> IGNORE
Rule 315   insert_lock_option -> <empty>
Rule 316   insert_lock_option -> LOW_PRIORITY
Rule 317   insert_lock_option -> DELAYED
Rule 318   insert_lock_option -> HIGH_PRIORITY
Rule 319   insert -> INSERT insert_lock_option opt_ignore insert2 insert_field_spec opt_insert_update
Rule 320   opt_low_priority -> <empty>
Rule 321   opt_low_priority -> LOW_PRIORITY
Rule 322   replace_lock_option -> opt_low_priority
Rule 323   replace_lock_option -> DELAYED
Rule 324   replace -> REPLACE replace_lock_option insert2 insert_field_spec
Rule 325   key_value -> IDENT EQ expr_or_default
Rule 326   key_values -> key_value
Rule 327   key_values -> key_value , key_values
Rule 328   where -> <empty>
Rule 329   where -> WHERE expr
Rule 330   ident_list -> IDENT
Rule 331   ident_list -> IDENT , ident_list
Rule 332   rows_limit -> <empty>
Rule 333   rows_limit -> LIMIT NUMBER
Rule 334   update -> UPDATE ident_list SET key_values where rows_limit
Rule 335   delete_options -> <empty>
Rule 336   delete_options -> delete_option delete_options
Rule 337   delete_option -> LOW_PRIORITY
Rule 338   delete_option -> QUICK
Rule 339   delete_option -> IGNORE
Rule 340   delete -> DELETE delete_options FROM IDENT where rows_limit
Rule 341   delete -> DELETE delete_options ident_list FROM where
Rule 342   ident_to_ident -> IDENT TO IDENT
Rule 343   rename_tables -> ident_to_ident
Rule 344   rename_tables -> ident_to_ident , rename_tables
Rule 345   rename_table -> RENAME TABLE rename_tables
Rule 346   sp_proc_stmt_statement -> statement
Rule 347   sp_proc_stmt_return -> RETURN expr
Rule 348   sp_proc_stmts1 -> sp_proc_stmt delim
Rule 349   sp_proc_stmts1 -> sp_proc_stmt delim sp_proc_stmts1
Rule 350   sp_if -> expr THEN sp_proc_stmts1 sp_elseifs
Rule 351   sp_elseifs -> <empty>
Rule 352   sp_elseifs -> ELSEIF sp_if
Rule 353   sp_elseifs -> ELSE sp_proc_stmts1
Rule 354   sp_proc_stmt_if -> IF sp_if END IF
Rule 355   else_clause_opt -> <empty>
Rule 356   else_clause_opt -> ELSE sp_proc_stmts1
Rule 357   simple_when_clause -> WHEN expr THEN sp_proc_stmts1
Rule 358   simple_when_clause_list -> simple_when_clause
Rule 359   simple_when_clause_list -> simple_when_clause simple_when_clause_list
Rule 360   simple_case_stmt -> CASE expr simple_when_clause_list else_clause_opt END CASE
Rule 361   searched_when_clause -> WHEN expr THEN sp_proc_stmts1
Rule 362   searched_when_clause_list -> searched_when_clause
Rule 363   searched_when_clause_list -> searched_when_clause searched_when_clause_list
Rule 364   searched_case_stmt -> CASE searched_when_clause_list else_clause_opt END CASE
Rule 365   case_stmt_specification -> simple_case_stmt
Rule 366   case_stmt_specification -> searched_case_stmt
Rule 367   sp_decls -> <empty>
Rule 368   sp_decls -> sp_decl delim sp_decls
Rule 369   sp_opt_default -> <empty>
Rule 370   sp_opt_default -> DEFAULT expr
Rule 371   opt_collate -> <empty>
Rule 372   sp_collation_name_or_default -> IDENT
Rule 373   sp_collation_name_or_default -> DEFAULT
Rule 374   opt_collate -> COLLATE sp_collation_name_or_default
Rule 375   sp_type -> integer_type limit_opt unsigned_opt
Rule 376   sp_type_with_opt_collate -> sp_type opt_collate
Rule 377   sp_decl -> DECLARE sp_ident_list sp_type_with_opt_collate sp_opt_default
Rule 378   sp_proc_stmts -> <empty>
Rule 379   sp_proc_stmts -> sp_proc_stmt delim sp_proc_stmts
Rule 380   sp_block_content -> BEGIN sp_decls sp_proc_stmts END
Rule 381   sp_opt_label -> <empty>
Rule 382   sp_opt_label -> IDENT
Rule 383   sp_labeled_block -> IDENT : sp_block_content sp_opt_label
Rule 384   sp_unlabeled_block -> sp_block_content
Rule 385   sp_unlabeled_control -> LOOP sp_proc_stmts1 END LOOP
Rule 386   sp_unlabeled_control -> WHILE expr DO sp_proc_stmts1 END WHILE
Rule 387   sp_unlabeled_control -> REPEAT sp_proc_stmts1 UNTIL expr END REPEAT
Rule 388   sp_labeled_control -> IDENT : sp_unlabeled_control sp_opt_label
Rule 389   sp_proc_stmt_unlabeled -> sp_unlabeled_control
Rule 390   sp_proc_stmt_leave -> LEAVE IDENT
Rule 391   sp_proc_stmt_iterate -> ITERATE IDENT
Rule 392   sp_proc_stmt_open -> OPEN IDENT
Rule 393   ignore_fetch_noise -> NEXT FROM
Rule 394   ignore_fetch_noise -> FROM
Rule 395   ignore_fetch_noise -> <empty>
Rule 396   sp_ident_list -> IDENT
Rule 397   sp_ident_list -> IDENT , sp_ident_list
Rule 398   sp_proc_stmt_fetch -> FETCH ignore_fetch_noise IDENT INTO sp_ident_list
Rule 399   sp_proc_stmt_close -> CLOSE IDENT
Rule 400   sp_proc_stmt -> sp_proc_stmt_statement
Rule 401   sp_proc_stmt -> sp_proc_stmt_return
Rule 402   sp_proc_stmt -> sp_proc_stmt_if
Rule 403   sp_proc_stmt -> case_stmt_specification
Rule 404   sp_proc_stmt -> sp_labeled_block
Rule 405   sp_proc_stmt -> sp_unlabeled_block
Rule 406   sp_proc_stmt -> sp_labeled_control
Rule 407   sp_proc_stmt -> sp_proc_stmt_unlabeled
Rule 408   sp_proc_stmt -> sp_proc_stmt_leave
Rule 409   sp_proc_stmt -> sp_proc_stmt_iterate
Rule 410   sp_proc_stmt -> sp_proc_stmt_open
Rule 411   sp_proc_stmt -> sp_proc_stmt_fetch
Rule 412   sp_proc_stmt -> sp_proc_stmt_close
Rule 413   trigger_event -> INSERT
Rule 414   trigger_event -> UPDATE
Rule 415   trigger_event -> DELETE
Rule 416   trigger_time -> BEFORE
Rule 417   trigger_time -> AFTER
Rule 418   create_trigger -> CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt
Rule 419   select_options -> <empty>
Rule 420   select_options -> select_option_list
Rule 421   select_option -> DISTINCT
Rule 422   select_option -> ALL
Rule 423   select_option_list -> select_option
Rule 424   select_option_list -> select_option select_option_list
Rule 425   select_alias -> <empty>
Rule 426   select_alias -> AS IDENT
Rule 427   select_alias -> IDENT
Rule 428   table_wild -> IDENT *
Rule 429   select_item2 -> table_wild
Rule 430   select_item2 -> expr
Rule 431   select_item -> select_item2 select_alias
Rule 432   select_item_list -> select_item
Rule 433   select_item_list -> select_item , select_item_list
Rule 434   select_item_list -> *
Rule 435   opt_order_clause -> <empty>
Rule 436   opt_order_clause -> order_clause
Rule 437   order_clause -> ORDER BY order_list
Rule 438   order_ident -> expr
Rule 439   order_dir -> <empty>
Rule 440   order_dir -> ASC
Rule 441   order_dir -> DESC
Rule 442   order_item -> order_ident order_dir
Rule 443   order_list -> order_item
Rule 444   order_list -> order_item , order_list
Rule 445   opt_limit_clause -> <empty>
Rule 446   opt_limit_clause -> limit_clause
Rule 447   limit_clause -> LIMIT limit_options
Rule 448   limit_options -> limit_option
Rule 449   limit_options -> limit_option , limit_option
Rule 450   limit_options -> limit_option OFFSET limit_option
Rule 451   limit_option -> IDENT
Rule 452   limit_option -> NUMBER
Rule 453   select_into -> opt_order_clause opt_limit_clause
Rule 454   select_var_list -> select_var_ident
Rule 455   select_var_list -> select_var_ident , select_var_list
Rule 456   select_var_ident -> @ IDENT
Rule 457   select_var_ident -> IDENT
Rule 458   into_destination -> select_var_list
Rule 459   into -> INTO into_destination
Rule 460   select_into -> into
Rule 461   table_alias -> <empty>
Rule 462   table_alias -> AS
Rule 463   table_alias -> EQ
Rule 464   opt_table_alias -> <empty>
Rule 465   opt_table_alias -> table_alias IDENT
Rule 466   index_hint_clause -> <empty>
Rule 467   index_hint_clause -> FOR JOIN
Rule 468   index_hint_clause -> FOR ORDER BY
Rule 469   index_hint_clause -> FOR GROUP BY
Rule 470   index_hint_type -> FORCE
Rule 471   index_hint_type -> IGNORE
Rule 472   index_hint_type -> USE
Rule 473   opt_key_usage_list -> <empty>
Rule 474   opt_key_usage_list -> key_usage_list
Rule 475   key_usage_element -> IDENT
Rule 476   key_usage_element -> PRIMARY
Rule 477   key_usage_list -> key_usage_element
Rule 478   key_usage_list -> key_usage_element , key_usage_list
Rule 479   index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list )
Rule 480   index_hints_list -> index_hint_definition
Rule 481   index_hints_list -> index_hint_definition index_hints_list
Rule 482   opt_index_hints_list -> <empty>
Rule 483   opt_index_hints_list -> index_hints_list
Rule 484   opt_key_definition -> opt_index_hints_list
Rule 485   table_factor -> IDENT opt_table_alias opt_key_definition
Rule 486   join_clause -> JOIN
Rule 487   join_clause -> INNER JOIN
Rule 488   join_clause -> CROSS JOIN
Rule 489   join_clause -> LEFT JOIN
Rule 490   join_clause -> LEFT OUTER JOIN
Rule 491   join_clause -> RIGHT JOIN
Rule 492   join_clause -> RIGHT OUTER JOIN
Rule 493   join_clause -> NATURAL JOIN
Rule 494   opt_join_condition -> <empty>
Rule 495   opt_join_condition -> join_condition
Rule 496   join_condition -> ON expr
Rule 497   join_condition -> USING ( ident_list )
Rule 498   join_table -> table_ref join_clause table_factor opt_join_condition
Rule 499   table_ref -> table_factor
Rule 500   table_ref -> join_table
Rule 501   esc_table_ref -> table_ref
Rule 502   derived_table_list -> esc_table_ref
Rule 503   derived_table_list -> esc_table_ref , derived_table_list
Rule 504   join_table_list -> derived_table_list
Rule 505   where_clause -> <empty>
Rule 506   where_clause -> WHERE expr
Rule 507   group_clause -> <empty>
Rule 508   olap_opt -> <empty>
Rule 509   olap_opt -> WITH CUBE
Rule 510   olap_opt -> WITH ROLLUP
Rule 511   group_item -> order_item
Rule 512   group_list -> group_item
Rule 513   group_list -> group_item , group_list
Rule 514   group_clause -> GROUP BY group_list olap_opt
Rule 515   having_clause -> <empty>
Rule 516   having_clause -> HAVING expr
Rule 517   select_from -> FROM join_table_list where_clause group_clause having_clause opt_order_clause opt_limit_clause
Rule 518   select_from -> FROM DUAL where_clause opt_limit_clause
Rule 519   select_into -> select_from
Rule 520   select_into -> into select_from
Rule 521   select_into -> select_from into
Rule 522   top_level_select_init -> SELECT select_init2
Rule 523   select -> top_level_select_init
Rule 524   variable_assignment -> IDENT EQ expr
Rule 525   variable_assignment -> GLOBAL IDENT EQ expr
Rule 526   variable_assignment -> SESSION IDENT EQ expr
Rule 527   variable_assignments -> variable_assignment
Rule 528   variable_assignments -> variable_assignment , variable_assignments
Rule 529   set -> SET variable_assignments
Rule 530   create_view -> CREATE VIEW IDENT AS select
Rule 531   drop_trigger -> DROP TRIGGER if_exists IDENT
Rule 532   optimize_table -> OPTIMIZE TABLE ident_list
Rule 533   unique_opt -> <empty>
Rule 534   unique_opt -> UNIQUE
Rule 535   create_index -> CREATE unique_opt INDEX IDENT ON IDENT ( ident_list )
Rule 536   drop_view -> DROP VIEW if_exists ident_list opt_restrict_cascade
Rule 537   opt_work -> WORK
Rule 538   opt_work -> <empty>
Rule 539   opt_with_consistent_snapshot -> <empty>
Rule 540   opt_with_consistent_snapshot -> WITH CONSISTENT SNAPSHOT
Rule 541   start_transaction -> START TRANSACTION opt_with_consistent_snapshot
Rule 542   start_transaction -> BEGIN opt_work
Rule 543   opt_chain -> <empty>
Rule 544   opt_chain -> AND NO CHAIN
Rule 545   opt_chain -> AND CHAIN
Rule 546   opt_release -> <empty>
Rule 547   opt_release -> NO RELEASE
Rule 548   opt_release -> RELEASE
Rule 549   commit -> COMMIT opt_work opt_chain opt_release
Rule 550   rollback -> ROLLBACK opt_work opt_chain opt_release
Rule 551   statement -> alter_table
Rule 552   statement -> create_table
Rule 553   statement -> create_trigger
Rule 554   statement -> create_view
Rule 555   statement -> create_index
Rule 556   statement -> delete
Rule 557   statement -> drop_table
Rule 558   statement -> drop_trigger
Rule 559   statement -> drop_view
Rule 560   statement -> insert
Rule 561   statement -> replace
Rule 562   statement -> optimize_table
Rule 563   statement -> rename_table
Rule 564   statement -> select
Rule 565   statement -> set
Rule 566   statement -> update
Rule 567   statement -> start_transaction
Rule 568   statement -> commit
Rule 569   statement -> rollback
Rule 570   statements -> <empty>
Rule 571   statements -> statement delim statements
Rule 572   comments -> COMMENTS
Rule 573   statements -> comments statements
Rule 574   delimiter -> DELIMITER
Rule 575   statements -> delimiter statements

Terminals, with rules where they appear

(                    : 23 33 34 59 60 61 62 63 74 77 78 79 80 83 84 85 86 87 88 89 90 123 124 125 128 141 144 213 227 228 229 271 295 297 303 305 306 479 497 535
)                    : 23 33 34 59 60 61 62 63 74 77 78 79 80 83 84 85 86 87 88 89 90 123 124 125 128 141 144 213 227 228 229 271 295 297 303 305 306 479 497 535
*                    : 83 428 434
,                    : 32 100 122 144 201 248 261 266 270 273 309 327 331 344 397 433 444 449 455 478 503 513 528
:                    : 383 388
;                    : 2
@                    : 56 456
ADD                  : 226 227 228 229
AFTER                : 225 417
ALL                  : 20 81 284 422
ALTER                : 232 233 249
AND                  : 9 35 544 545
ANY                  : 21
AS                   : 74 114 426 462 530
ASC                  : 440
AUTO_INCREMENT       : 152 203
AVG                  : 77
BEFORE               : 416
BEGIN                : 380 542
BETWEEN              : 35
BIGINT               : 135
BITWISE_AND          : 41
BITWISE_OR           : 40
BITWISE_XOR          : 49
BIT_AND              : 78
BIT_OR               : 79
BIT_XOR              : 80
BLOB                 : 177
BY                   : 437 468 469 514
CASCADE              : 220
CASE                 : 360 360 364 364
CAST                 : 74
CHAIN                : 544 545
CHANGE               : 230
CHAR                 : 163
CHARACTER            : 145 164 204
CHARSET              : 205
CLOSE                : 399
COLLATE              : 146 206 374
COLUMN               : 111
COMMENTS             : 572
COMMIT               : 549
CONSISTENT           : 540
CONSTRAINT           : 119
CONVERT              : 63
COUNT                : 83 84 85
CREATE               : 213 418 530 535
CROSS                : 488
CUBE                 : 509
DATE                 : 65 172
DATETIME             : 66 175
DECIMAL              : 67 137
DECLARE              : 377
DEFAULT              : 109 153 232 233 255 370 373
DELAYED              : 317 323
DELETE               : 340 341 415
DELIM                : 1
DELIMITER            : 574
DESC                 : 441
DISTINCT             : 76 85 283 421
DIV                  : 47
DO                   : 386
DROP                 : 221 233 234 235 236 531 536
DUAL                 : 518
DUPLICATE            : 262
EACH                 : 418
ELSE                 : 353 356
ELSEIF               : 352
END                  : 354 360 364 380 385 386 387
ENGINE               : 202
EQ                   : 25 102 256 325 463 524 525 526
ESCAPE               : 7
EXISTS               : 60 212 217
FALSE                : 13
FETCH                : 398
FIRST                : 224
FLOAT                : 136
FLOAT_LIT            : 53 157
FOR                  : 278 418 467 468 469
FORCE                : 470
FROM                 : 340 341 393 394 517 518
GE                   : 26
GLOBAL               : 525
GROUP                : 469 514
GT                   : 27
HAVING               : 516
HIGH_PRIORITY        : 318
IDENT                : 55 56 63 89 90 119 120 124 125 127 129 145 146 158 202 204 205 206 213 225 232 233 234 236 237 249 251 258 325 330 331 340 342 342 372 382 383 388 390 391 392 396 397 398 399 418 418 426 427 428 451 456 457 465 475 485 524 525 526 530 531 535 535
IF                   : 212 217 354 354
IGNORE               : 314 339 471
IN                   : 33 34 279
INDEX                : 105 116 124 535
INNER                : 487
INSERT               : 319 413
INT                  : 133
INTEGER              : 71 134
INTO                 : 311 398 459
IS                   : 15 17
ITERATE              : 391
JOIN                 : 467 486 487 488 489 490 491 492 493
KEY                  : 104 107 117 123 125 150 151 229 235 262
LE                   : 28
LEAVE                : 390
LEFT                 : 489 490
LIKE                 : 36 37
LIMIT                : 333 447
LOCK                 : 279
LOGICAL_NOT          : 5
LONGBLOB             : 179
LONGTEXT             : 170
LOOP                 : 385 385
LOW_PRIORITY         : 316 321 337
LT                   : 29
MAX                  : 86
MEDIUMBLOB           : 178
MEDIUMINT            : 132
MEDIUMTEXT           : 169
MIN                  : 87
MINUS                : 45
MOD                  : 48
MODE                 : 279
MODIFY               : 231
NATURAL              : 493
NE                   : 30
NEXT                 : 393
NO                   : 544 547
NOT                  : 4 11 148 212
NULL                 : 17 147 148 154
NULL_SAFE            : 18
NUMBER               : 52 141 144 144 156 203 333 452
NUMERIC              : 138
OFFSET               : 450
ON                   : 262 418 496 535
OPEN                 : 392
OPTIMIZE             : 532
OR                   : 8
ORDER                : 437 468
OUTER                : 490 492
PLUS                 : 44
PRIMARY              : 123 151 229 235 476
QUICK                : 338
REGEXP               : 38
RELEASE              : 547 548
RENAME               : 237 345
REPEAT               : 387 387
REPLACE              : 324
RESTRICT             : 219
RETURN               : 347
RIGHT                : 491 492
ROLLBACK             : 550
ROLLUP               : 510
ROW                  : 62 418
SELECT               : 281 294 296 522
SESSION              : 526
SET                  : 145 204 232 310 334 529
SET_VAR              : 257
SHARE                : 279
SHL                  : 42
SHR                  : 43
SIGNED               : 68
SMALLINT             : 131
SNAPSHOT             : 540
SOME                 : 22
SOUNDS               : 36
START                : 541
STRING               : 51 155
SUM                  : 88
TABLE                : 213 221 249 345 532
TEMPORARY            : 215
TEXT                 : 168
THEN                 : 350 357 361
TIME                 : 73 173
TIMES                : 46
TIMESTAMP            : 174
TINYBLOB             : 176
TINYINT              : 130
TINYTEXT             : 167
TO                   : 113 342
TRANSACTION          : 541
TRIGGER              : 418 531
TRUE                 : 12
UNION                : 298
UNIQUE               : 128 149 228 534
UNKNOWN              : 14
UNSIGNED             : 69 160
UNTIL                : 387
UPDATE               : 262 278 334 414
USE                  : 472
USING                : 63 497
VALUE                : 275
VALUES               : 274
VARCHAR              : 166
VIEW                 : 530 536
WHEN                 : 357 361
WHERE                : 329 506
WHILE                : 386 386
WITH                 : 509 510 540
WORK                 : 537
XOR                  : 10
error                : 

Nonterminals, with rules where they appear

add_column           : 238
add_index            : 239
add_primary_key      : 240
all_or_any           : 23
alter_rename_table   : 246
alter_specification  : 247 248
alter_specifications : 248 249
alter_table          : 551
auto_increment       : 189
average_function     : 93
bidimensional_limit  : 143
bidimensional_limit_opt : 67 162
binary_statement     : 186
bit_expr             : 33 34 35 35 36 36 37 38 38 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49
bit_function         : 94
boolean_primary      : 15 16 17 18 19 23
case_stmt_specification : 403
cast_function        : 92
cast_type            : 74
change_column        : 241
change_default       : 242
character_statement  : 64 182
charset_statement    : 191
check_char_or_character : 165
check_index_or_key   : 227 236 479
col_name             : 196
collate_statement    : 192
column_name          : 121 122 226 230 230 231
column_names         : 122 123 124 125 128 227 228 229
column_option        : 194
column_options       : 194 195
column_statement     : 196 226 230 231
comments             : 573
commit               : 568
comparison_operator  : 19 23
constraint_opt       : 123 128 228 229
convert_function     : 91
count_function       : 95
create_index         : 555
create_select        : 302 303
create_statement     : 200 201
create_statements    : 201 213
create_table         : 552
create_trigger       : 553
create_view          : 554
data_type            : 195
default              : 188
delete               : 556
delete_option        : 336
delete_options       : 336 340 341
delim                : 348 349 368 379 571
delimiter            : 575
derived_table_list   : 503 504
double_precision_statement : 181
double_precision_type : 162
drop_table           : 557
drop_trigger         : 558
drop_view            : 559
else_clause_opt      : 360 364
equal                : 259 307
esc_table_ref        : 502 503
escape_opt           : 37
expr                 : 8 8 9 9 10 10 11 31 32 63 74 77 78 79 80 84 86 87 88 254 329 347 350 357 360 361 370 386 387 430 438 496 506 516 524 525 526
expr_list            : 32 34 61 62 85 90
expr_or_default      : 259 269 270 307 325
fields               : 266 306
function_call        : 57
group_clause         : 517
group_item           : 512 513
group_list           : 513 514
having_clause        : 517
ident_eq_list        : 309 310
ident_eq_value       : 308 309
ident_list           : 221 331 334 341 497 532 535 536
ident_to_ident       : 343 344
if_exists            : 221 531 536
if_not_exists        : 213
ignore_column        : 226 230 231 232 233 234
ignore_comma         : 210
ignore_default       : 204 205 206
ignore_eq            : 202 203 204 205 206
ignore_fetch_noise   : 398
ignore_index_or_key  : 128 228
ignore_integer       : 72
ignore_key           : 149
ignore_to_or_as      : 237
index_hint_clause    : 479
index_hint_definition : 480 481
index_hint_type      : 479
index_hints_list     : 481 483
index_name_opt       : 128 227 228
index_statement      : 198
insert               : 560
insert2              : 319 324
insert_field_spec    : 319 324
insert_ident         : 265 266
insert_lock_option   : 319
insert_table         : 311 312
insert_update_elem   : 260 261
insert_update_list   : 261 262
insert_values        : 304 305 306
integer_statement    : 180
integer_type         : 161 375
into                 : 460 520 521
into_destination     : 459
join_clause          : 498
join_condition       : 495
join_table           : 500
join_table_list      : 517
key                  : 190
key_usage_element    : 477 478
key_usage_list       : 474 478
key_value            : 326 327
key_values           : 327 334
limit                : 140 166
limit_clause         : 289 291 446
limit_opt            : 161 165 375
limit_option         : 448 449 449 450 450
limit_options        : 447
literal              : 54 232
max_function         : 96
min_function         : 97
no_braces            : 272 273
not_opt              : 15 17 33 34 35 37 38
null                 : 187
olap_opt             : 514
opt_all              : 83
opt_chain            : 549 550
opt_collate          : 376
opt_distinct         : 77 86 87 88
opt_ignore           : 319
opt_index_hints_list : 484
opt_insert_update    : 319
opt_join_condition   : 498
opt_key_definition   : 485
opt_key_usage_list   : 479
opt_limit_clause     : 276 453 517 518
opt_limit_clause_init : 290
opt_low_priority     : 322
opt_order_clause     : 453 517
opt_release          : 549 550
opt_restrict_cascade : 221 536
opt_select_from      : 281
opt_table_alias      : 485
opt_values           : 271
opt_with_consistent_snapshot : 541
opt_work             : 542 549 550
optimize_table       : 562
order_clause         : 290 436
order_dir            : 442
order_ident          : 442
order_item           : 443 444 511
order_list           : 437 444
order_or_limit       : 292
other_function       : 99
position             : 223
position_opt         : 226 230 231
predicate            : 18 19 24 35
primary_key_statement : 197
remove_column        : 243
remove_index         : 245
remove_primary_key   : 244
rename_table         : 563
rename_tables        : 344 345
replace              : 561
replace_lock_option  : 324
rollback             : 569
rows_limit           : 334 340
searched_case_stmt   : 366
searched_when_clause : 362 363
searched_when_clause_list : 363 364
select               : 58 530 564
select_alias         : 431
select_from          : 280 519 520 521
select_init2         : 294 296 522
select_into          : 285
select_item          : 432 433
select_item2         : 431
select_item_list     : 281 285 433
select_lock_type     : 280 285
select_option        : 423 424
select_option_list   : 420 424
select_options       : 281 285
select_paren         : 295 297
select_part2         : 301
select_var_ident     : 454 455
select_var_list      : 455 458
set                  : 565
signed_or_unsigned   : 72
simple_case_stmt     : 365
simple_expr          : 7 37 50
simple_ident_nospvar : 259 263 307
simple_statement     : 185
simple_when_clause   : 358 359
simple_when_clause_list : 359 360
sp_block_content     : 383 384
sp_collation_name_or_default : 374
sp_decl              : 368
sp_decls             : 368 380
sp_elseifs           : 350
sp_ident_list        : 377 397 398
sp_if                : 352 354
sp_labeled_block     : 404
sp_labeled_control   : 406
sp_opt_default       : 377
sp_opt_label         : 383 388
sp_proc_stmt         : 348 349 379 418
sp_proc_stmt_close   : 412
sp_proc_stmt_fetch   : 411
sp_proc_stmt_if      : 402
sp_proc_stmt_iterate : 409
sp_proc_stmt_leave   : 408
sp_proc_stmt_open    : 410
sp_proc_stmt_return  : 401
sp_proc_stmt_statement : 400
sp_proc_stmt_unlabeled : 407
sp_proc_stmts        : 379 380
sp_proc_stmts1       : 349 350 353 356 357 361 385 386 387
sp_type              : 376
sp_type_with_opt_collate : 377
sp_unlabeled_block   : 405
sp_unlabeled_control : 388 389
start_transaction    : 567
statement            : 346 571
statements           : 571 573 575 0
string_statement     : 183
subquery             : 23 33 59 60
sum_function         : 98
table_alias          : 465
table_factor         : 498 499
table_ident          : 252
table_name           : 253
table_option         : 209 210
table_options        : 208 210
table_options_opt    : 213
table_ref            : 498 501
table_wild           : 264 429
temporary            : 221
text_statement       : 184
text_type            : 171
top_level_select_init : 523
trigger_event        : 418
trigger_time         : 418
true_false_or_unknown : 15
union_clause         : 301 302
union_list           : 287 300
union_opt            : 297 303
union_option         : 298
union_order_or_limit : 293
union_select_init    : 298
unique_opt           : 535
unique_statement     : 199
unsigned_opt         : 161 162 375
update               : 566
value                : 153
values               : 268 270
values_list          : 273 274 275
variable_assignment  : 527 528
variable_assignments : 528 529
where                : 334 340 341
where_clause         : 517 518

Parsing method: LALR

state 0

    (0) S' -> . statements
    (570) statements -> .
    (571) statements -> . statement delim statements
    (573) statements -> . comments statements
    (575) statements -> . delimiter statements
    (551) statement -> . alter_table
    (552) statement -> . create_table
    (553) statement -> . create_trigger
    (554) statement -> . create_view
    (555) statement -> . create_index
    (556) statement -> . delete
    (557) statement -> . drop_table
    (558) statement -> . drop_trigger
    (559) statement -> . drop_view
    (560) statement -> . insert
    (561) statement -> . replace
    (562) statement -> . optimize_table
    (563) statement -> . rename_table
    (564) statement -> . select
    (565) statement -> . set
    (566) statement -> . update
    (567) statement -> . start_transaction
    (568) statement -> . commit
    (569) statement -> . rollback
    (572) comments -> . COMMENTS
    (574) delimiter -> . DELIMITER
    (249) alter_table -> . ALTER TABLE IDENT alter_specifications
    (213) create_table -> . CREATE TABLE if_not_exists IDENT ( create_statements ) table_options_opt
    (418) create_trigger -> . CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt
    (530) create_view -> . CREATE VIEW IDENT AS select
    (535) create_index -> . CREATE unique_opt INDEX IDENT ON IDENT ( ident_list )
    (340) delete -> . DELETE delete_options FROM IDENT where rows_limit
    (341) delete -> . DELETE delete_options ident_list FROM where
    (221) drop_table -> . DROP temporary TABLE if_exists ident_list opt_restrict_cascade
    (531) drop_trigger -> . DROP TRIGGER if_exists IDENT
    (536) drop_view -> . DROP VIEW if_exists ident_list opt_restrict_cascade
    (319) insert -> . INSERT insert_lock_option opt_ignore insert2 insert_field_spec opt_insert_update
    (324) replace -> . REPLACE replace_lock_option insert2 insert_field_spec
    (532) optimize_table -> . OPTIMIZE TABLE ident_list
    (345) rename_table -> . RENAME TABLE rename_tables
    (523) select -> . top_level_select_init
    (529) set -> . SET variable_assignments
    (334) update -> . UPDATE ident_list SET key_values where rows_limit
    (541) start_transaction -> . START TRANSACTION opt_with_consistent_snapshot
    (542) start_transaction -> . BEGIN opt_work
    (549) commit -> . COMMIT opt_work opt_chain opt_release
    (550) rollback -> . ROLLBACK opt_work opt_chain opt_release
    (522) top_level_select_init -> . SELECT select_init2

    $end            reduce using rule 570 (statements -> .)
    COMMENTS        shift and go to state 37
    DELIMITER       shift and go to state 31
    ALTER           shift and go to state 8
    CREATE          shift and go to state 16
    DELETE          shift and go to state 5
    DROP            shift and go to state 17
    INSERT          shift and go to state 11
    REPLACE         shift and go to state 20
    OPTIMIZE        shift and go to state 4
    RENAME          shift and go to state 1
    SET             shift and go to state 13
    UPDATE          shift and go to state 29
    START           shift and go to state 30
    BEGIN           shift and go to state 12
    COMMIT          shift and go to state 32
    ROLLBACK        shift and go to state 36
    SELECT          shift and go to state 24

    set                            shift and go to state 2
    statements                     shift and go to state 3
    replace                        shift and go to state 6
    drop_table                     shift and go to state 7
    select                         shift and go to state 9
    rename_table                   shift and go to state 10
    drop_view                      shift and go to state 14
    drop_trigger                   shift and go to state 15
    delimiter                      shift and go to state 18
    comments                       shift and go to state 19
    create_table                   shift and go to state 21
    statement                      shift and go to state 22
    start_transaction              shift and go to state 23
    rollback                       shift and go to state 25
    insert                         shift and go to state 26
    top_level_select_init          shift and go to state 27
    update                         shift and go to state 28
    create_index                   shift and go to state 33
    create_trigger                 shift and go to state 34
    alter_table                    shift and go to state 35
    create_view                    shift and go to state 38
    optimize_table                 shift and go to state 39
    commit                         shift and go to state 40
    delete                         shift and go to state 41

state 1

    (345) rename_table -> RENAME . TABLE rename_tables

    TABLE           shift and go to state 42


state 2

    (565) statement -> set .

    DELIM           reduce using rule 565 (statement -> set .)
    ;               reduce using rule 565 (statement -> set .)


state 3

    (0) S' -> statements .



state 4

    (532) optimize_table -> OPTIMIZE . TABLE ident_list

    TABLE           shift and go to state 43


state 5

    (340) delete -> DELETE . delete_options FROM IDENT where rows_limit
    (341) delete -> DELETE . delete_options ident_list FROM where
    (335) delete_options -> .
    (336) delete_options -> . delete_option delete_options
    (337) delete_option -> . LOW_PRIORITY
    (338) delete_option -> . QUICK
    (339) delete_option -> . IGNORE

    FROM            reduce using rule 335 (delete_options -> .)
    IDENT           reduce using rule 335 (delete_options -> .)
    LOW_PRIORITY    shift and go to state 45
    QUICK           shift and go to state 48
    IGNORE          shift and go to state 47

    delete_options                 shift and go to state 44
    delete_option                  shift and go to state 46

state 6

    (561) statement -> replace .

    DELIM           reduce using rule 561 (statement -> replace .)
    ;               reduce using rule 561 (statement -> replace .)


state 7

    (557) statement -> drop_table .

    DELIM           reduce using rule 557 (statement -> drop_table .)
    ;               reduce using rule 557 (statement -> drop_table .)


state 8

    (249) alter_table -> ALTER . TABLE IDENT alter_specifications

    TABLE           shift and go to state 49


state 9

    (564) statement -> select .

    DELIM           reduce using rule 564 (statement -> select .)
    ;               reduce using rule 564 (statement -> select .)


state 10

    (563) statement -> rename_table .

    DELIM           reduce using rule 563 (statement -> rename_table .)
    ;               reduce using rule 563 (statement -> rename_table .)


state 11

    (319) insert -> INSERT . insert_lock_option opt_ignore insert2 insert_field_spec opt_insert_update
    (315) insert_lock_option -> .
    (316) insert_lock_option -> . LOW_PRIORITY
    (317) insert_lock_option -> . DELAYED
    (318) insert_lock_option -> . HIGH_PRIORITY

    IGNORE          reduce using rule 315 (insert_lock_option -> .)
    INTO            reduce using rule 315 (insert_lock_option -> .)
    IDENT           reduce using rule 315 (insert_lock_option -> .)
    LOW_PRIORITY    shift and go to state 53
    DELAYED         shift and go to state 50
    HIGH_PRIORITY   shift and go to state 52

    insert_lock_option             shift and go to state 51

state 12

    (542) start_transaction -> BEGIN . opt_work
    (537) opt_work -> . WORK
    (538) opt_work -> .

    WORK            shift and go to state 54
    DELIM           reduce using rule 538 (opt_work -> .)
    ;               reduce using rule 538 (opt_work -> .)

    opt_work                       shift and go to state 55

state 13

    (529) set -> SET . variable_assignments
    (527) variable_assignments -> . variable_assignment
    (528) variable_assignments -> . variable_assignment , variable_assignments
    (524) variable_assignment -> . IDENT EQ expr
    (525) variable_assignment -> . GLOBAL IDENT EQ expr
    (526) variable_assignment -> . SESSION IDENT EQ expr

    IDENT           shift and go to state 59
    GLOBAL          shift and go to state 60
    SESSION         shift and go to state 56

    variable_assignment            shift and go to state 57
    variable_assignments           shift and go to state 58

state 14

    (559) statement -> drop_view .

    DELIM           reduce using rule 559 (statement -> drop_view .)
    ;               reduce using rule 559 (statement -> drop_view .)


state 15

    (558) statement -> drop_trigger .

    DELIM           reduce using rule 558 (statement -> drop_trigger .)
    ;               reduce using rule 558 (statement -> drop_trigger .)


state 16

    (213) create_table -> CREATE . TABLE if_not_exists IDENT ( create_statements ) table_options_opt
    (418) create_trigger -> CREATE . TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt
    (530) create_view -> CREATE . VIEW IDENT AS select
    (535) create_index -> CREATE . unique_opt INDEX IDENT ON IDENT ( ident_list )
    (533) unique_opt -> .
    (534) unique_opt -> . UNIQUE

    TABLE           shift and go to state 61
    TRIGGER         shift and go to state 63
    VIEW            shift and go to state 65
    INDEX           reduce using rule 533 (unique_opt -> .)
    UNIQUE          shift and go to state 64

    unique_opt                     shift and go to state 62

state 17

    (221) drop_table -> DROP . temporary TABLE if_exists ident_list opt_restrict_cascade
    (531) drop_trigger -> DROP . TRIGGER if_exists IDENT
    (536) drop_view -> DROP . VIEW if_exists ident_list opt_restrict_cascade
    (214) temporary -> .
    (215) temporary -> . TEMPORARY

    TRIGGER         shift and go to state 67
    VIEW            shift and go to state 69
    TABLE           reduce using rule 214 (temporary -> .)
    TEMPORARY       shift and go to state 68

    temporary                      shift and go to state 66

state 18

    (575) statements -> delimiter . statements
    (570) statements -> .
    (571) statements -> . statement delim statements
    (573) statements -> . comments statements
    (575) statements -> . delimiter statements
    (551) statement -> . alter_table
    (552) statement -> . create_table
    (553) statement -> . create_trigger
    (554) statement -> . create_view
    (555) statement -> . create_index
    (556) statement -> . delete
    (557) statement -> . drop_table
    (558) statement -> . drop_trigger
    (559) statement -> . drop_view
    (560) statement -> . insert
    (561) statement -> . replace
    (562) statement -> . optimize_table
    (563) statement -> . rename_table
    (564) statement -> . select
    (565) statement -> . set
    (566) statement -> . update
    (567) statement -> . start_transaction
    (568) statement -> . commit
    (569) statement -> . rollback
    (572) comments -> . COMMENTS
    (574) delimiter -> . DELIMITER
    (249) alter_table -> . ALTER TABLE IDENT alter_specifications
    (213) create_table -> . CREATE TABLE if_not_exists IDENT ( create_statements ) table_options_opt
    (418) create_trigger -> . CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt
    (530) create_view -> . CREATE VIEW IDENT AS select
    (535) create_index -> . CREATE unique_opt INDEX IDENT ON IDENT ( ident_list )
    (340) delete -> . DELETE delete_options FROM IDENT where rows_limit
    (341) delete -> . DELETE delete_options ident_list FROM where
    (221) drop_table -> . DROP temporary TABLE if_exists ident_list opt_restrict_cascade
    (531) drop_trigger -> . DROP TRIGGER if_exists IDENT
    (536) drop_view -> . DROP VIEW if_exists ident_list opt_restrict_cascade
    (319) insert -> . INSERT insert_lock_option opt_ignore insert2 insert_field_spec opt_insert_update
    (324) replace -> . REPLACE replace_lock_option insert2 insert_field_spec
    (532) optimize_table -> . OPTIMIZE TABLE ident_list
    (345) rename_table -> . RENAME TABLE rename_tables
    (523) select -> . top_level_select_init
    (529) set -> . SET variable_assignments
    (334) update -> . UPDATE ident_list SET key_values where rows_limit
    (541) start_transaction -> . START TRANSACTION opt_with_consistent_snapshot
    (542) start_transaction -> . BEGIN opt_work
    (549) commit -> . COMMIT opt_work opt_chain opt_release
    (550) rollback -> . ROLLBACK opt_work opt_chain opt_release
    (522) top_level_select_init -> . SELECT select_init2

    $end            reduce using rule 570 (statements -> .)
    COMMENTS        shift and go to state 37
    DELIMITER       shift and go to state 31
    ALTER           shift and go to state 8
    CREATE          shift and go to state 16
    DELETE          shift and go to state 5
    DROP            shift and go to state 17
    INSERT          shift and go to state 11
    REPLACE         shift and go to state 20
    OPTIMIZE        shift and go to state 4
    RENAME          shift and go to state 1
    SET             shift and go to state 13
    UPDATE          shift and go to state 29
    START           shift and go to state 30
    BEGIN           shift and go to state 12
    COMMIT          shift and go to state 32
    ROLLBACK        shift and go to state 36
    SELECT          shift and go to state 24

    set                            shift and go to state 2
    statements                     shift and go to state 70
    replace                        shift and go to state 6
    drop_table                     shift and go to state 7
    select                         shift and go to state 9
    rename_table                   shift and go to state 10
    drop_view                      shift and go to state 14
    drop_trigger                   shift and go to state 15
    delimiter                      shift and go to state 18
    comments                       shift and go to state 19
    create_table                   shift and go to state 21
    statement                      shift and go to state 22
    start_transaction              shift and go to state 23
    rollback                       shift and go to state 25
    insert                         shift and go to state 26
    top_level_select_init          shift and go to state 27
    update                         shift and go to state 28
    create_index                   shift and go to state 33
    create_trigger                 shift and go to state 34
    alter_table                    shift and go to state 35
    create_view                    shift and go to state 38
    optimize_table                 shift and go to state 39
    commit                         shift and go to state 40
    delete                         shift and go to state 41

state 19

    (573) statements -> comments . statements
    (570) statements -> .
    (571) statements -> . statement delim statements
    (573) statements -> . comments statements
    (575) statements -> . delimiter statements
    (551) statement -> . alter_table
    (552) statement -> . create_table
    (553) statement -> . create_trigger
    (554) statement -> . create_view
    (555) statement -> . create_index
    (556) statement -> . delete
    (557) statement -> . drop_table
    (558) statement -> . drop_trigger
    (559) statement -> . drop_view
    (560) statement -> . insert
    (561) statement -> . replace
    (562) statement -> . optimize_table
    (563) statement -> . rename_table
    (564) statement -> . select
    (565) statement -> . set
    (566) statement -> . update
    (567) statement -> . start_transaction
    (568) statement -> . commit
    (569) statement -> . rollback
    (572) comments -> . COMMENTS
    (574) delimiter -> . DELIMITER
    (249) alter_table -> . ALTER TABLE IDENT alter_specifications
    (213) create_table -> . CREATE TABLE if_not_exists IDENT ( create_statements ) table_options_opt
    (418) create_trigger -> . CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt
    (530) create_view -> . CREATE VIEW IDENT AS select
    (535) create_index -> . CREATE unique_opt INDEX IDENT ON IDENT ( ident_list )
    (340) delete -> . DELETE delete_options FROM IDENT where rows_limit
    (341) delete -> . DELETE delete_options ident_list FROM where
    (221) drop_table -> . DROP temporary TABLE if_exists ident_list opt_restrict_cascade
    (531) drop_trigger -> . DROP TRIGGER if_exists IDENT
    (536) drop_view -> . DROP VIEW if_exists ident_list opt_restrict_cascade
    (319) insert -> . INSERT insert_lock_option opt_ignore insert2 insert_field_spec opt_insert_update
    (324) replace -> . REPLACE replace_lock_option insert2 insert_field_spec
    (532) optimize_table -> . OPTIMIZE TABLE ident_list
    (345) rename_table -> . RENAME TABLE rename_tables
    (523) select -> . top_level_select_init
    (529) set -> . SET variable_assignments
    (334) update -> . UPDATE ident_list SET key_values where rows_limit
    (541) start_transaction -> . START TRANSACTION opt_with_consistent_snapshot
    (542) start_transaction -> . BEGIN opt_work
    (549) commit -> . COMMIT opt_work opt_chain opt_release
    (550) rollback -> . ROLLBACK opt_work opt_chain opt_release
    (522) top_level_select_init -> . SELECT select_init2

    $end            reduce using rule 570 (statements -> .)
    COMMENTS        shift and go to state 37
    DELIMITER       shift and go to state 31
    ALTER           shift and go to state 8
    CREATE          shift and go to state 16
    DELETE          shift and go to state 5
    DROP            shift and go to state 17
    INSERT          shift and go to state 11
    REPLACE         shift and go to state 20
    OPTIMIZE        shift and go to state 4
    RENAME          shift and go to state 1
    SET             shift and go to state 13
    UPDATE          shift and go to state 29
    START           shift and go to state 30
    BEGIN           shift and go to state 12
    COMMIT          shift and go to state 32
    ROLLBACK        shift and go to state 36
    SELECT          shift and go to state 24

    set                            shift and go to state 2
    statements                     shift and go to state 71
    replace                        shift and go to state 6
    drop_table                     shift and go to state 7
    select                         shift and go to state 9
    rename_table                   shift and go to state 10
    drop_view                      shift and go to state 14
    drop_trigger                   shift and go to state 15
    delimiter                      shift and go to state 18
    comments                       shift and go to state 19
    create_table                   shift and go to state 21
    statement                      shift and go to state 22
    start_transaction              shift and go to state 23
    rollback                       shift and go to state 25
    insert                         shift and go to state 26
    top_level_select_init          shift and go to state 27
    update                         shift and go to state 28
    create_index                   shift and go to state 33
    create_trigger                 shift and go to state 34
    alter_table                    shift and go to state 35
    create_view                    shift and go to state 38
    optimize_table                 shift and go to state 39
    commit                         shift and go to state 40
    delete                         shift and go to state 41

state 20

    (324) replace -> REPLACE . replace_lock_option insert2 insert_field_spec
    (322) replace_lock_option -> . opt_low_priority
    (323) replace_lock_option -> . DELAYED
    (320) opt_low_priority -> .
    (321) opt_low_priority -> . LOW_PRIORITY

    DELAYED         shift and go to state 74
    INTO            reduce using rule 320 (opt_low_priority -> .)
    IDENT           reduce using rule 320 (opt_low_priority -> .)
    LOW_PRIORITY    shift and go to state 75

    opt_low_priority               shift and go to state 72
    replace_lock_option            shift and go to state 73

state 21

    (552) statement -> create_table .

    DELIM           reduce using rule 552 (statement -> create_table .)
    ;               reduce using rule 552 (statement -> create_table .)


state 22

    (571) statements -> statement . delim statements
    (1) delim -> . DELIM
    (2) delim -> . ;

    DELIM           shift and go to state 78
    ;               shift and go to state 76

    delim                          shift and go to state 77

state 23

    (567) statement -> start_transaction .

    DELIM           reduce using rule 567 (statement -> start_transaction .)
    ;               reduce using rule 567 (statement -> start_transaction .)


state 24

    (522) top_level_select_init -> SELECT . select_init2
    (301) select_init2 -> . select_part2 union_clause
    (285) select_part2 -> . select_options select_item_list select_into select_lock_type
    (419) select_options -> .
    (420) select_options -> . select_option_list
    (423) select_option_list -> . select_option
    (424) select_option_list -> . select_option select_option_list
    (421) select_option -> . DISTINCT
    (422) select_option -> . ALL

    *               reduce using rule 419 (select_options -> .)
    IDENT           reduce using rule 419 (select_options -> .)
    NOT             reduce using rule 419 (select_options -> .)
    @               reduce using rule 419 (select_options -> .)
    (               reduce using rule 419 (select_options -> .)
    EXISTS          reduce using rule 419 (select_options -> .)
    ROW             reduce using rule 419 (select_options -> .)
    STRING          reduce using rule 419 (select_options -> .)
    NUMBER          reduce using rule 419 (select_options -> .)
    FLOAT_LIT       reduce using rule 419 (select_options -> .)
    CONVERT         reduce using rule 419 (select_options -> .)
    CAST            reduce using rule 419 (select_options -> .)
    AVG             reduce using rule 419 (select_options -> .)
    BIT_AND         reduce using rule 419 (select_options -> .)
    BIT_OR          reduce using rule 419 (select_options -> .)
    BIT_XOR         reduce using rule 419 (select_options -> .)
    COUNT           reduce using rule 419 (select_options -> .)
    MAX             reduce using rule 419 (select_options -> .)
    MIN             reduce using rule 419 (select_options -> .)
    SUM             reduce using rule 419 (select_options -> .)
    DISTINCT        shift and go to state 81
    ALL             shift and go to state 79

    select_option                  shift and go to state 80
    select_init2                   shift and go to state 82
    select_option_list             shift and go to state 83
    select_options                 shift and go to state 84
    select_part2                   shift and go to state 85

state 25

    (569) statement -> rollback .

    DELIM           reduce using rule 569 (statement -> rollback .)
    ;               reduce using rule 569 (statement -> rollback .)


state 26

    (560) statement -> insert .

    DELIM           reduce using rule 560 (statement -> insert .)
    ;               reduce using rule 560 (statement -> insert .)


state 27

    (523) select -> top_level_select_init .

    DELIM           reduce using rule 523 (select -> top_level_select_init .)
    ;               reduce using rule 523 (select -> top_level_select_init .)
    )               reduce using rule 523 (select -> top_level_select_init .)


state 28

    (566) statement -> update .

    DELIM           reduce using rule 566 (statement -> update .)
    ;               reduce using rule 566 (statement -> update .)


state 29

    (334) update -> UPDATE . ident_list SET key_values where rows_limit
    (330) ident_list -> . IDENT
    (331) ident_list -> . IDENT , ident_list

    IDENT           shift and go to state 86

    ident_list                     shift and go to state 87

state 30

    (541) start_transaction -> START . TRANSACTION opt_with_consistent_snapshot

    TRANSACTION     shift and go to state 88


state 31

    (574) delimiter -> DELIMITER .

    COMMENTS        reduce using rule 574 (delimiter -> DELIMITER .)
    DELIMITER       reduce using rule 574 (delimiter -> DELIMITER .)
    ALTER           reduce using rule 574 (delimiter -> DELIMITER .)
    CREATE          reduce using rule 574 (delimiter -> DELIMITER .)
    DELETE          reduce using rule 574 (delimiter -> DELIMITER .)
    DROP            reduce using rule 574 (delimiter -> DELIMITER .)
    INSERT          reduce using rule 574 (delimiter -> DELIMITER .)
    REPLACE         reduce using rule 574 (delimiter -> DELIMITER .)
    OPTIMIZE        reduce using rule 574 (delimiter -> DELIMITER .)
    RENAME          reduce using rule 574 (delimiter -> DELIMITER .)
    SET             reduce using rule 574 (delimiter -> DELIMITER .)
    UPDATE          reduce using rule 574 (delimiter -> DELIMITER .)
    START           reduce using rule 574 (delimiter -> DELIMITER .)
    BEGIN           reduce using rule 574 (delimiter -> DELIMITER .)
    COMMIT          reduce using rule 574 (delimiter -> DELIMITER .)
    ROLLBACK        reduce using rule 574 (delimiter -> DELIMITER .)
    SELECT          reduce using rule 574 (delimiter -> DELIMITER .)
    $end            reduce using rule 574 (delimiter -> DELIMITER .)


state 32

    (549) commit -> COMMIT . opt_work opt_chain opt_release
    (537) opt_work -> . WORK
    (538) opt_work -> .

    WORK            shift and go to state 54
    AND             reduce using rule 538 (opt_work -> .)
    NO              reduce using rule 538 (opt_work -> .)
    RELEASE         reduce using rule 538 (opt_work -> .)
    DELIM           reduce using rule 538 (opt_work -> .)
    ;               reduce using rule 538 (opt_work -> .)

    opt_work                       shift and go to state 89

state 33

    (555) statement -> create_index .

    DELIM           reduce using rule 555 (statement -> create_index .)
    ;               reduce using rule 555 (statement -> create_index .)


state 34

    (553) statement -> create_trigger .

    DELIM           reduce using rule 553 (statement -> create_trigger .)
    ;               reduce using rule 553 (statement -> create_trigger .)


state 35

    (551) statement -> alter_table .

    DELIM           reduce using rule 551 (statement -> alter_table .)
    ;               reduce using rule 551 (statement -> alter_table .)


state 36

    (550) rollback -> ROLLBACK . opt_work opt_chain opt_release
    (537) opt_work -> . WORK
    (538) opt_work -> .

    WORK            shift and go to state 54
    AND             reduce using rule 538 (opt_work -> .)
    NO              reduce using rule 538 (opt_work -> .)
    RELEASE         reduce using rule 538 (opt_work -> .)
    DELIM           reduce using rule 538 (opt_work -> .)
    ;               reduce using rule 538 (opt_work -> .)

    opt_work                       shift and go to state 90

state 37

    (572) comments -> COMMENTS .

    COMMENTS        reduce using rule 572 (comments -> COMMENTS .)
    DELIMITER       reduce using rule 572 (comments -> COMMENTS .)
    ALTER           reduce using rule 572 (comments -> COMMENTS .)
    CREATE          reduce using rule 572 (comments -> COMMENTS .)
    DELETE          reduce using rule 572 (comments -> COMMENTS .)
    DROP            reduce using rule 572 (comments -> COMMENTS .)
    INSERT          reduce using rule 572 (comments -> COMMENTS .)
    REPLACE         reduce using rule 572 (comments -> COMMENTS .)
    OPTIMIZE        reduce using rule 572 (comments -> COMMENTS .)
    RENAME          reduce using rule 572 (comments -> COMMENTS .)
    SET             reduce using rule 572 (comments -> COMMENTS .)
    UPDATE          reduce using rule 572 (comments -> COMMENTS .)
    START           reduce using rule 572 (comments -> COMMENTS .)
    BEGIN           reduce using rule 572 (comments -> COMMENTS .)
    COMMIT          reduce using rule 572 (comments -> COMMENTS .)
    ROLLBACK        reduce using rule 572 (comments -> COMMENTS .)
    SELECT          reduce using rule 572 (comments -> COMMENTS .)
    $end            reduce using rule 572 (comments -> COMMENTS .)


state 38

    (554) statement -> create_view .

    DELIM           reduce using rule 554 (statement -> create_view .)
    ;               reduce using rule 554 (statement -> create_view .)


state 39

    (562) statement -> optimize_table .

    DELIM           reduce using rule 562 (statement -> optimize_table .)
    ;               reduce using rule 562 (statement -> optimize_table .)


state 40

    (568) statement -> commit .

    DELIM           reduce using rule 568 (statement -> commit .)
    ;               reduce using rule 568 (statement -> commit .)


state 41

    (556) statement -> delete .

    DELIM           reduce using rule 556 (statement -> delete .)
    ;               reduce using rule 556 (statement -> delete .)


state 42

    (345) rename_table -> RENAME TABLE . rename_tables
    (343) rename_tables -> . ident_to_ident
    (344) rename_tables -> . ident_to_ident , rename_tables
    (342) ident_to_ident -> . IDENT TO IDENT

    IDENT           shift and go to state 93

    ident_to_ident                 shift and go to state 91
    rename_tables                  shift and go to state 92

state 43

    (532) optimize_table -> OPTIMIZE TABLE . ident_list
    (330) ident_list -> . IDENT
    (331) ident_list -> . IDENT , ident_list

    IDENT           shift and go to state 86

    ident_list                     shift and go to state 94

state 44

    (340) delete -> DELETE delete_options . FROM IDENT where rows_limit
    (341) delete -> DELETE delete_options . ident_list FROM where
    (330) ident_list -> . IDENT
    (331) ident_list -> . IDENT , ident_list

    FROM            shift and go to state 95
    IDENT           shift and go to state 86

    ident_list                     shift and go to state 96

state 45

    (337) delete_option -> LOW_PRIORITY .

    LOW_PRIORITY    reduce using rule 337 (delete_option -> LOW_PRIORITY .)
    QUICK           reduce using rule 337 (delete_option -> LOW_PRIORITY .)
    IGNORE          reduce using rule 337 (delete_option -> LOW_PRIORITY .)
    FROM            reduce using rule 337 (delete_option -> LOW_PRIORITY .)
    IDENT           reduce using rule 337 (delete_option -> LOW_PRIORITY .)


state 46

    (336) delete_options -> delete_option . delete_options
    (335) delete_options -> .
    (336) delete_options -> . delete_option delete_options
    (337) delete_option -> . LOW_PRIORITY
    (338) delete_option -> . QUICK
    (339) delete_option -> . IGNORE

    FROM            reduce using rule 335 (delete_options -> .)
    IDENT           reduce using rule 335 (delete_options -> .)
    LOW_PRIORITY    shift and go to state 45
    QUICK           shift and go to state 48
    IGNORE          shift and go to state 47

    delete_options                 shift and go to state 97
    delete_option                  shift and go to state 46

state 47

    (339) delete_option -> IGNORE .

    LOW_PRIORITY    reduce using rule 339 (delete_option -> IGNORE .)
    QUICK           reduce using rule 339 (delete_option -> IGNORE .)
    IGNORE          reduce using rule 339 (delete_option -> IGNORE .)
    FROM            reduce using rule 339 (delete_option -> IGNORE .)
    IDENT           reduce using rule 339 (delete_option -> IGNORE .)


state 48

    (338) delete_option -> QUICK .

    LOW_PRIORITY    reduce using rule 338 (delete_option -> QUICK .)
    QUICK           reduce using rule 338 (delete_option -> QUICK .)
    IGNORE          reduce using rule 338 (delete_option -> QUICK .)
    FROM            reduce using rule 338 (delete_option -> QUICK .)
    IDENT           reduce using rule 338 (delete_option -> QUICK .)


state 49

    (249) alter_table -> ALTER TABLE . IDENT alter_specifications

    IDENT           shift and go to state 98


state 50

    (317) insert_lock_option -> DELAYED .

    IGNORE          reduce using rule 317 (insert_lock_option -> DELAYED .)
    INTO            reduce using rule 317 (insert_lock_option -> DELAYED .)
    IDENT           reduce using rule 317 (insert_lock_option -> DELAYED .)


state 51

    (319) insert -> INSERT insert_lock_option . opt_ignore insert2 insert_field_spec opt_insert_update
    (313) opt_ignore -> .
    (314) opt_ignore -> . IGNORE

    INTO            reduce using rule 313 (opt_ignore -> .)
    IDENT           reduce using rule 313 (opt_ignore -> .)
    IGNORE          shift and go to state 100

    opt_ignore                     shift and go to state 99

state 52

    (318) insert_lock_option -> HIGH_PRIORITY .

    IGNORE          reduce using rule 318 (insert_lock_option -> HIGH_PRIORITY .)
    INTO            reduce using rule 318 (insert_lock_option -> HIGH_PRIORITY .)
    IDENT           reduce using rule 318 (insert_lock_option -> HIGH_PRIORITY .)


state 53

    (316) insert_lock_option -> LOW_PRIORITY .

    IGNORE          reduce using rule 316 (insert_lock_option -> LOW_PRIORITY .)
    INTO            reduce using rule 316 (insert_lock_option -> LOW_PRIORITY .)
    IDENT           reduce using rule 316 (insert_lock_option -> LOW_PRIORITY .)


state 54

    (537) opt_work -> WORK .

    DELIM           reduce using rule 537 (opt_work -> WORK .)
    ;               reduce using rule 537 (opt_work -> WORK .)
    AND             reduce using rule 537 (opt_work -> WORK .)
    NO              reduce using rule 537 (opt_work -> WORK .)
    RELEASE         reduce using rule 537 (opt_work -> WORK .)


state 55

    (542) start_transaction -> BEGIN opt_work .

    DELIM           reduce using rule 542 (start_transaction -> BEGIN opt_work .)
    ;               reduce using rule 542 (start_transaction -> BEGIN opt_work .)


state 56

    (526) variable_assignment -> SESSION . IDENT EQ expr

    IDENT           shift and go to state 101


state 57

    (527) variable_assignments -> variable_assignment .
    (528) variable_assignments -> variable_assignment . , variable_assignments

    DELIM           reduce using rule 527 (variable_assignments -> variable_assignment .)
    ;               reduce using rule 527 (variable_assignments -> variable_assignment .)
    ,               shift and go to state 102


state 58

    (529) set -> SET variable_assignments .

    DELIM           reduce using rule 529 (set -> SET variable_assignments .)
    ;               reduce using rule 529 (set -> SET variable_assignments .)


state 59

    (524) variable_assignment -> IDENT . EQ expr

    EQ              shift and go to state 103


state 60

    (525) variable_assignment -> GLOBAL . IDENT EQ expr

    IDENT           shift and go to state 104


state 61

    (213) create_table -> CREATE TABLE . if_not_exists IDENT ( create_statements ) table_options_opt
    (211) if_not_exists -> .
    (212) if_not_exists -> . IF NOT EXISTS

    IDENT           reduce using rule 211 (if_not_exists -> .)
    IF              shift and go to state 106

    if_not_exists                  shift and go to state 105

state 62

    (535) create_index -> CREATE unique_opt . INDEX IDENT ON IDENT ( ident_list )

    INDEX           shift and go to state 107


state 63

    (418) create_trigger -> CREATE TRIGGER . IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt

    IDENT           shift and go to state 108


state 64

    (534) unique_opt -> UNIQUE .

    INDEX           reduce using rule 534 (unique_opt -> UNIQUE .)


state 65

    (530) create_view -> CREATE VIEW . IDENT AS select

    IDENT           shift and go to state 109


state 66

    (221) drop_table -> DROP temporary . TABLE if_exists ident_list opt_restrict_cascade

    TABLE           shift and go to state 110


state 67

    (531) drop_trigger -> DROP TRIGGER . if_exists IDENT
    (216) if_exists -> .
    (217) if_exists -> . IF EXISTS

    IDENT           reduce using rule 216 (if_exists -> .)
    IF              shift and go to state 112

    if_exists                      shift and go to state 111

state 68

    (215) temporary -> TEMPORARY .

    TABLE           reduce using rule 215 (temporary -> TEMPORARY .)


state 69

    (536) drop_view -> DROP VIEW . if_exists ident_list opt_restrict_cascade
    (216) if_exists -> .
    (217) if_exists -> . IF EXISTS

    IDENT           reduce using rule 216 (if_exists -> .)
    IF              shift and go to state 112

    if_exists                      shift and go to state 113

state 70

    (575) statements -> delimiter statements .

    $end            reduce using rule 575 (statements -> delimiter statements .)


state 71

    (573) statements -> comments statements .

    $end            reduce using rule 573 (statements -> comments statements .)


state 72

    (322) replace_lock_option -> opt_low_priority .

    INTO            reduce using rule 322 (replace_lock_option -> opt_low_priority .)
    IDENT           reduce using rule 322 (replace_lock_option -> opt_low_priority .)


state 73

    (324) replace -> REPLACE replace_lock_option . insert2 insert_field_spec
    (311) insert2 -> . INTO insert_table
    (312) insert2 -> . insert_table
    (253) insert_table -> . table_name
    (252) table_name -> . table_ident
    (251) table_ident -> . IDENT

    INTO            shift and go to state 117
    IDENT           shift and go to state 115

    insert2                        shift and go to state 114
    table_ident                    shift and go to state 116
    table_name                     shift and go to state 118
    insert_table                   shift and go to state 119

state 74

    (323) replace_lock_option -> DELAYED .

    INTO            reduce using rule 323 (replace_lock_option -> DELAYED .)
    IDENT           reduce using rule 323 (replace_lock_option -> DELAYED .)


state 75

    (321) opt_low_priority -> LOW_PRIORITY .

    INTO            reduce using rule 321 (opt_low_priority -> LOW_PRIORITY .)
    IDENT           reduce using rule 321 (opt_low_priority -> LOW_PRIORITY .)


state 76

    (2) delim -> ; .

    RETURN          reduce using rule 2 (delim -> ; .)
    IF              reduce using rule 2 (delim -> ; .)
    IDENT           reduce using rule 2 (delim -> ; .)
    LEAVE           reduce using rule 2 (delim -> ; .)
    ITERATE         reduce using rule 2 (delim -> ; .)
    OPEN            reduce using rule 2 (delim -> ; .)
    FETCH           reduce using rule 2 (delim -> ; .)
    CLOSE           reduce using rule 2 (delim -> ; .)
    CASE            reduce using rule 2 (delim -> ; .)
    BEGIN           reduce using rule 2 (delim -> ; .)
    LOOP            reduce using rule 2 (delim -> ; .)
    WHILE           reduce using rule 2 (delim -> ; .)
    REPEAT          reduce using rule 2 (delim -> ; .)
    ALTER           reduce using rule 2 (delim -> ; .)
    CREATE          reduce using rule 2 (delim -> ; .)
    DELETE          reduce using rule 2 (delim -> ; .)
    DROP            reduce using rule 2 (delim -> ; .)
    INSERT          reduce using rule 2 (delim -> ; .)
    REPLACE         reduce using rule 2 (delim -> ; .)
    OPTIMIZE        reduce using rule 2 (delim -> ; .)
    RENAME          reduce using rule 2 (delim -> ; .)
    SET             reduce using rule 2 (delim -> ; .)
    UPDATE          reduce using rule 2 (delim -> ; .)
    START           reduce using rule 2 (delim -> ; .)
    COMMIT          reduce using rule 2 (delim -> ; .)
    ROLLBACK        reduce using rule 2 (delim -> ; .)
    SELECT          reduce using rule 2 (delim -> ; .)
    END             reduce using rule 2 (delim -> ; .)
    COMMENTS        reduce using rule 2 (delim -> ; .)
    DELIMITER       reduce using rule 2 (delim -> ; .)
    $end            reduce using rule 2 (delim -> ; .)
    DECLARE         reduce using rule 2 (delim -> ; .)
    UNTIL           reduce using rule 2 (delim -> ; .)
    ELSEIF          reduce using rule 2 (delim -> ; .)
    ELSE            reduce using rule 2 (delim -> ; .)
    WHEN            reduce using rule 2 (delim -> ; .)


state 77

    (571) statements -> statement delim . statements
    (570) statements -> .
    (571) statements -> . statement delim statements
    (573) statements -> . comments statements
    (575) statements -> . delimiter statements
    (551) statement -> . alter_table
    (552) statement -> . create_table
    (553) statement -> . create_trigger
    (554) statement -> . create_view
    (555) statement -> . create_index
    (556) statement -> . delete
    (557) statement -> . drop_table
    (558) statement -> . drop_trigger
    (559) statement -> . drop_view
    (560) statement -> . insert
    (561) statement -> . replace
    (562) statement -> . optimize_table
    (563) statement -> . rename_table
    (564) statement -> . select
    (565) statement -> . set
    (566) statement -> . update
    (567) statement -> . start_transaction
    (568) statement -> . commit
    (569) statement -> . rollback
    (572) comments -> . COMMENTS
    (574) delimiter -> . DELIMITER
    (249) alter_table -> . ALTER TABLE IDENT alter_specifications
    (213) create_table -> . CREATE TABLE if_not_exists IDENT ( create_statements ) table_options_opt
    (418) create_trigger -> . CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt
    (530) create_view -> . CREATE VIEW IDENT AS select
    (535) create_index -> . CREATE unique_opt INDEX IDENT ON IDENT ( ident_list )
    (340) delete -> . DELETE delete_options FROM IDENT where rows_limit
    (341) delete -> . DELETE delete_options ident_list FROM where
    (221) drop_table -> . DROP temporary TABLE if_exists ident_list opt_restrict_cascade
    (531) drop_trigger -> . DROP TRIGGER if_exists IDENT
    (536) drop_view -> . DROP VIEW if_exists ident_list opt_restrict_cascade
    (319) insert -> . INSERT insert_lock_option opt_ignore insert2 insert_field_spec opt_insert_update
    (324) replace -> . REPLACE replace_lock_option insert2 insert_field_spec
    (532) optimize_table -> . OPTIMIZE TABLE ident_list
    (345) rename_table -> . RENAME TABLE rename_tables
    (523) select -> . top_level_select_init
    (529) set -> . SET variable_assignments
    (334) update -> . UPDATE ident_list SET key_values where rows_limit
    (541) start_transaction -> . START TRANSACTION opt_with_consistent_snapshot
    (542) start_transaction -> . BEGIN opt_work
    (549) commit -> . COMMIT opt_work opt_chain opt_release
    (550) rollback -> . ROLLBACK opt_work opt_chain opt_release
    (522) top_level_select_init -> . SELECT select_init2

    $end            reduce using rule 570 (statements -> .)
    COMMENTS        shift and go to state 37
    DELIMITER       shift and go to state 31
    ALTER           shift and go to state 8
    CREATE          shift and go to state 16
    DELETE          shift and go to state 5
    DROP            shift and go to state 17
    INSERT          shift and go to state 11
    REPLACE         shift and go to state 20
    OPTIMIZE        shift and go to state 4
    RENAME          shift and go to state 1
    SET             shift and go to state 13
    UPDATE          shift and go to state 29
    START           shift and go to state 30
    BEGIN           shift and go to state 12
    COMMIT          shift and go to state 32
    ROLLBACK        shift and go to state 36
    SELECT          shift and go to state 24

    set                            shift and go to state 2
    statements                     shift and go to state 120
    replace                        shift and go to state 6
    drop_table                     shift and go to state 7
    select                         shift and go to state 9
    rename_table                   shift and go to state 10
    drop_view                      shift and go to state 14
    drop_trigger                   shift and go to state 15
    delimiter                      shift and go to state 18
    comments                       shift and go to state 19
    create_table                   shift and go to state 21
    statement                      shift and go to state 22
    start_transaction              shift and go to state 23
    rollback                       shift and go to state 25
    insert                         shift and go to state 26
    top_level_select_init          shift and go to state 27
    update                         shift and go to state 28
    create_index                   shift and go to state 33
    create_trigger                 shift and go to state 34
    alter_table                    shift and go to state 35
    create_view                    shift and go to state 38
    optimize_table                 shift and go to state 39
    commit                         shift and go to state 40
    delete                         shift and go to state 41

state 78

    (1) delim -> DELIM .

    RETURN          reduce using rule 1 (delim -> DELIM .)
    IF              reduce using rule 1 (delim -> DELIM .)
    IDENT           reduce using rule 1 (delim -> DELIM .)
    LEAVE           reduce using rule 1 (delim -> DELIM .)
    ITERATE         reduce using rule 1 (delim -> DELIM .)
    OPEN            reduce using rule 1 (delim -> DELIM .)
    FETCH           reduce using rule 1 (delim -> DELIM .)
    CLOSE           reduce using rule 1 (delim -> DELIM .)
    CASE            reduce using rule 1 (delim -> DELIM .)
    BEGIN           reduce using rule 1 (delim -> DELIM .)
    LOOP            reduce using rule 1 (delim -> DELIM .)
    WHILE           reduce using rule 1 (delim -> DELIM .)
    REPEAT          reduce using rule 1 (delim -> DELIM .)
    ALTER           reduce using rule 1 (delim -> DELIM .)
    CREATE          reduce using rule 1 (delim -> DELIM .)
    DELETE          reduce using rule 1 (delim -> DELIM .)
    DROP            reduce using rule 1 (delim -> DELIM .)
    INSERT          reduce using rule 1 (delim -> DELIM .)
    REPLACE         reduce using rule 1 (delim -> DELIM .)
    OPTIMIZE        reduce using rule 1 (delim -> DELIM .)
    RENAME          reduce using rule 1 (delim -> DELIM .)
    SET             reduce using rule 1 (delim -> DELIM .)
    UPDATE          reduce using rule 1 (delim -> DELIM .)
    START           reduce using rule 1 (delim -> DELIM .)
    COMMIT          reduce using rule 1 (delim -> DELIM .)
    ROLLBACK        reduce using rule 1 (delim -> DELIM .)
    SELECT          reduce using rule 1 (delim -> DELIM .)
    END             reduce using rule 1 (delim -> DELIM .)
    COMMENTS        reduce using rule 1 (delim -> DELIM .)
    DELIMITER       reduce using rule 1 (delim -> DELIM .)
    $end            reduce using rule 1 (delim -> DELIM .)
    DECLARE         reduce using rule 1 (delim -> DELIM .)
    UNTIL           reduce using rule 1 (delim -> DELIM .)
    ELSEIF          reduce using rule 1 (delim -> DELIM .)
    ELSE            reduce using rule 1 (delim -> DELIM .)
    WHEN            reduce using rule 1 (delim -> DELIM .)


state 79

    (422) select_option -> ALL .

    DISTINCT        reduce using rule 422 (select_option -> ALL .)
    ALL             reduce using rule 422 (select_option -> ALL .)
    *               reduce using rule 422 (select_option -> ALL .)
    IDENT           reduce using rule 422 (select_option -> ALL .)
    NOT             reduce using rule 422 (select_option -> ALL .)
    @               reduce using rule 422 (select_option -> ALL .)
    (               reduce using rule 422 (select_option -> ALL .)
    EXISTS          reduce using rule 422 (select_option -> ALL .)
    ROW             reduce using rule 422 (select_option -> ALL .)
    STRING          reduce using rule 422 (select_option -> ALL .)
    NUMBER          reduce using rule 422 (select_option -> ALL .)
    FLOAT_LIT       reduce using rule 422 (select_option -> ALL .)
    CONVERT         reduce using rule 422 (select_option -> ALL .)
    CAST            reduce using rule 422 (select_option -> ALL .)
    AVG             reduce using rule 422 (select_option -> ALL .)
    BIT_AND         reduce using rule 422 (select_option -> ALL .)
    BIT_OR          reduce using rule 422 (select_option -> ALL .)
    BIT_XOR         reduce using rule 422 (select_option -> ALL .)
    COUNT           reduce using rule 422 (select_option -> ALL .)
    MAX             reduce using rule 422 (select_option -> ALL .)
    MIN             reduce using rule 422 (select_option -> ALL .)
    SUM             reduce using rule 422 (select_option -> ALL .)


state 80

    (423) select_option_list -> select_option .
    (424) select_option_list -> select_option . select_option_list
    (423) select_option_list -> . select_option
    (424) select_option_list -> . select_option select_option_list
    (421) select_option -> . DISTINCT
    (422) select_option -> . ALL

    *               reduce using rule 423 (select_option_list -> select_option .)
    IDENT           reduce using rule 423 (select_option_list -> select_option .)
    NOT             reduce using rule 423 (select_option_list -> select_option .)
    @               reduce using rule 423 (select_option_list -> select_option .)
    (               reduce using rule 423 (select_option_list -> select_option .)
    EXISTS          reduce using rule 423 (select_option_list -> select_option .)
    ROW             reduce using rule 423 (select_option_list -> select_option .)
    STRING          reduce using rule 423 (select_option_list -> select_option .)
    NUMBER          reduce using rule 423 (select_option_list -> select_option .)
    FLOAT_LIT       reduce using rule 423 (select_option_list -> select_option .)
    CONVERT         reduce using rule 423 (select_option_list -> select_option .)
    CAST            reduce using rule 423 (select_option_list -> select_option .)
    AVG             reduce using rule 423 (select_option_list -> select_option .)
    BIT_AND         reduce using rule 423 (select_option_list -> select_option .)
    BIT_OR          reduce using rule 423 (select_option_list -> select_option .)
    BIT_XOR         reduce using rule 423 (select_option_list -> select_option .)
    COUNT           reduce using rule 423 (select_option_list -> select_option .)
    MAX             reduce using rule 423 (select_option_list -> select_option .)
    MIN             reduce using rule 423 (select_option_list -> select_option .)
    SUM             reduce using rule 423 (select_option_list -> select_option .)
    DISTINCT        shift and go to state 81
    ALL             shift and go to state 79

    select_option                  shift and go to state 80
    select_option_list             shift and go to state 121

state 81

    (421) select_option -> DISTINCT .

    DISTINCT        reduce using rule 421 (select_option -> DISTINCT .)
    ALL             reduce using rule 421 (select_option -> DISTINCT .)
    *               reduce using rule 421 (select_option -> DISTINCT .)
    IDENT           reduce using rule 421 (select_option -> DISTINCT .)
    NOT             reduce using rule 421 (select_option -> DISTINCT .)
    @               reduce using rule 421 (select_option -> DISTINCT .)
    (               reduce using rule 421 (select_option -> DISTINCT .)
    EXISTS          reduce using rule 421 (select_option -> DISTINCT .)
    ROW             reduce using rule 421 (select_option -> DISTINCT .)
    STRING          reduce using rule 421 (select_option -> DISTINCT .)
    NUMBER          reduce using rule 421 (select_option -> DISTINCT .)
    FLOAT_LIT       reduce using rule 421 (select_option -> DISTINCT .)
    CONVERT         reduce using rule 421 (select_option -> DISTINCT .)
    CAST            reduce using rule 421 (select_option -> DISTINCT .)
    AVG             reduce using rule 421 (select_option -> DISTINCT .)
    BIT_AND         reduce using rule 421 (select_option -> DISTINCT .)
    BIT_OR          reduce using rule 421 (select_option -> DISTINCT .)
    BIT_XOR         reduce using rule 421 (select_option -> DISTINCT .)
    COUNT           reduce using rule 421 (select_option -> DISTINCT .)
    MAX             reduce using rule 421 (select_option -> DISTINCT .)
    MIN             reduce using rule 421 (select_option -> DISTINCT .)
    SUM             reduce using rule 421 (select_option -> DISTINCT .)


state 82

    (522) top_level_select_init -> SELECT select_init2 .

    )               reduce using rule 522 (top_level_select_init -> SELECT select_init2 .)
    DELIM           reduce using rule 522 (top_level_select_init -> SELECT select_init2 .)
    ;               reduce using rule 522 (top_level_select_init -> SELECT select_init2 .)


state 83

    (420) select_options -> select_option_list .

    *               reduce using rule 420 (select_options -> select_option_list .)
    IDENT           reduce using rule 420 (select_options -> select_option_list .)
    NOT             reduce using rule 420 (select_options -> select_option_list .)
    @               reduce using rule 420 (select_options -> select_option_list .)
    (               reduce using rule 420 (select_options -> select_option_list .)
    EXISTS          reduce using rule 420 (select_options -> select_option_list .)
    ROW             reduce using rule 420 (select_options -> select_option_list .)
    STRING          reduce using rule 420 (select_options -> select_option_list .)
    NUMBER          reduce using rule 420 (select_options -> select_option_list .)
    FLOAT_LIT       reduce using rule 420 (select_options -> select_option_list .)
    CONVERT         reduce using rule 420 (select_options -> select_option_list .)
    CAST            reduce using rule 420 (select_options -> select_option_list .)
    AVG             reduce using rule 420 (select_options -> select_option_list .)
    BIT_AND         reduce using rule 420 (select_options -> select_option_list .)
    BIT_OR          reduce using rule 420 (select_options -> select_option_list .)
    BIT_XOR         reduce using rule 420 (select_options -> select_option_list .)
    COUNT           reduce using rule 420 (select_options -> select_option_list .)
    MAX             reduce using rule 420 (select_options -> select_option_list .)
    MIN             reduce using rule 420 (select_options -> select_option_list .)
    SUM             reduce using rule 420 (select_options -> select_option_list .)


state 84

    (285) select_part2 -> select_options . select_item_list select_into select_lock_type
    (432) select_item_list -> . select_item
    (433) select_item_list -> . select_item , select_item_list
    (434) select_item_list -> . *
    (431) select_item -> . select_item2 select_alias
    (429) select_item2 -> . table_wild
    (430) select_item2 -> . expr
    (428) table_wild -> . IDENT *
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    *               shift and go to state 136
    IDENT           shift and go to state 145
    NOT             shift and go to state 159
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    select_item_list               shift and go to state 133
    convert_function               shift and go to state 140
    table_wild                     shift and go to state 135
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    select_item2                   shift and go to state 155
    expr                           shift and go to state 156
    simple_expr                    shift and go to state 131
    select_item                    shift and go to state 160

state 85

    (301) select_init2 -> select_part2 . union_clause
    (299) union_clause -> .
    (300) union_clause -> . union_list
    (298) union_list -> . UNION union_option union_select_init

    DELIM           reduce using rule 299 (union_clause -> .)
    ;               reduce using rule 299 (union_clause -> .)
    )               reduce using rule 299 (union_clause -> .)
    ON              reduce using rule 299 (union_clause -> .)
    UNION           shift and go to state 162

    union_clause                   shift and go to state 164
    union_list                     shift and go to state 163

state 86

    (330) ident_list -> IDENT .
    (331) ident_list -> IDENT . , ident_list

    DELIM           reduce using rule 330 (ident_list -> IDENT .)
    ;               reduce using rule 330 (ident_list -> IDENT .)
    SET             reduce using rule 330 (ident_list -> IDENT .)
    FROM            reduce using rule 330 (ident_list -> IDENT .)
    RESTRICT        reduce using rule 330 (ident_list -> IDENT .)
    CASCADE         reduce using rule 330 (ident_list -> IDENT .)
    )               reduce using rule 330 (ident_list -> IDENT .)
    ,               shift and go to state 165


state 87

    (334) update -> UPDATE ident_list . SET key_values where rows_limit

    SET             shift and go to state 166


state 88

    (541) start_transaction -> START TRANSACTION . opt_with_consistent_snapshot
    (539) opt_with_consistent_snapshot -> .
    (540) opt_with_consistent_snapshot -> . WITH CONSISTENT SNAPSHOT

    DELIM           reduce using rule 539 (opt_with_consistent_snapshot -> .)
    ;               reduce using rule 539 (opt_with_consistent_snapshot -> .)
    WITH            shift and go to state 168

    opt_with_consistent_snapshot   shift and go to state 167

state 89

    (549) commit -> COMMIT opt_work . opt_chain opt_release
    (543) opt_chain -> .
    (544) opt_chain -> . AND NO CHAIN
    (545) opt_chain -> . AND CHAIN

    NO              reduce using rule 543 (opt_chain -> .)
    RELEASE         reduce using rule 543 (opt_chain -> .)
    DELIM           reduce using rule 543 (opt_chain -> .)
    ;               reduce using rule 543 (opt_chain -> .)
    AND             shift and go to state 169

    opt_chain                      shift and go to state 170

state 90

    (550) rollback -> ROLLBACK opt_work . opt_chain opt_release
    (543) opt_chain -> .
    (544) opt_chain -> . AND NO CHAIN
    (545) opt_chain -> . AND CHAIN

    NO              reduce using rule 543 (opt_chain -> .)
    RELEASE         reduce using rule 543 (opt_chain -> .)
    DELIM           reduce using rule 543 (opt_chain -> .)
    ;               reduce using rule 543 (opt_chain -> .)
    AND             shift and go to state 169

    opt_chain                      shift and go to state 171

state 91

    (343) rename_tables -> ident_to_ident .
    (344) rename_tables -> ident_to_ident . , rename_tables

    DELIM           reduce using rule 343 (rename_tables -> ident_to_ident .)
    ;               reduce using rule 343 (rename_tables -> ident_to_ident .)
    ,               shift and go to state 172


state 92

    (345) rename_table -> RENAME TABLE rename_tables .

    DELIM           reduce using rule 345 (rename_table -> RENAME TABLE rename_tables .)
    ;               reduce using rule 345 (rename_table -> RENAME TABLE rename_tables .)


state 93

    (342) ident_to_ident -> IDENT . TO IDENT

    TO              shift and go to state 173


state 94

    (532) optimize_table -> OPTIMIZE TABLE ident_list .

    DELIM           reduce using rule 532 (optimize_table -> OPTIMIZE TABLE ident_list .)
    ;               reduce using rule 532 (optimize_table -> OPTIMIZE TABLE ident_list .)


state 95

    (340) delete -> DELETE delete_options FROM . IDENT where rows_limit

    IDENT           shift and go to state 174


state 96

    (341) delete -> DELETE delete_options ident_list . FROM where

    FROM            shift and go to state 175


state 97

    (336) delete_options -> delete_option delete_options .

    FROM            reduce using rule 336 (delete_options -> delete_option delete_options .)
    IDENT           reduce using rule 336 (delete_options -> delete_option delete_options .)


state 98

    (249) alter_table -> ALTER TABLE IDENT . alter_specifications
    (247) alter_specifications -> . alter_specification
    (248) alter_specifications -> . alter_specification , alter_specifications
    (238) alter_specification -> . add_column
    (239) alter_specification -> . add_index
    (240) alter_specification -> . add_primary_key
    (241) alter_specification -> . change_column
    (242) alter_specification -> . change_default
    (243) alter_specification -> . remove_column
    (244) alter_specification -> . remove_primary_key
    (245) alter_specification -> . remove_index
    (246) alter_specification -> . alter_rename_table
    (226) add_column -> . ADD ignore_column column_name column_statement position_opt
    (227) add_index -> . ADD check_index_or_key index_name_opt ( column_names )
    (228) add_index -> . ADD constraint_opt UNIQUE ignore_index_or_key index_name_opt ( column_names )
    (229) add_primary_key -> . ADD constraint_opt PRIMARY KEY ( column_names )
    (230) change_column -> . CHANGE ignore_column column_name column_name column_statement position_opt
    (231) change_column -> . MODIFY ignore_column column_name column_statement position_opt
    (232) change_default -> . ALTER ignore_column IDENT SET DEFAULT literal
    (233) change_default -> . ALTER ignore_column IDENT DROP DEFAULT
    (234) remove_column -> . DROP ignore_column IDENT
    (235) remove_primary_key -> . DROP PRIMARY KEY
    (236) remove_index -> . DROP check_index_or_key IDENT
    (237) alter_rename_table -> . RENAME ignore_to_or_as IDENT

    ADD             shift and go to state 186
    CHANGE          shift and go to state 181
    MODIFY          shift and go to state 179
    ALTER           shift and go to state 180
    DROP            shift and go to state 182
    RENAME          shift and go to state 176

    change_default                 shift and go to state 177
    remove_index                   shift and go to state 178
    alter_rename_table             shift and go to state 188
    add_column                     shift and go to state 183
    add_primary_key                shift and go to state 191
    change_column                  shift and go to state 185
    alter_specifications           shift and go to state 187
    remove_column                  shift and go to state 189
    remove_primary_key             shift and go to state 190
    alter_specification            shift and go to state 184
    add_index                      shift and go to state 192

state 99

    (319) insert -> INSERT insert_lock_option opt_ignore . insert2 insert_field_spec opt_insert_update
    (311) insert2 -> . INTO insert_table
    (312) insert2 -> . insert_table
    (253) insert_table -> . table_name
    (252) table_name -> . table_ident
    (251) table_ident -> . IDENT

    INTO            shift and go to state 117
    IDENT           shift and go to state 115

    insert2                        shift and go to state 193
    table_ident                    shift and go to state 116
    table_name                     shift and go to state 118
    insert_table                   shift and go to state 119

state 100

    (314) opt_ignore -> IGNORE .

    INTO            reduce using rule 314 (opt_ignore -> IGNORE .)
    IDENT           reduce using rule 314 (opt_ignore -> IGNORE .)


state 101

    (526) variable_assignment -> SESSION IDENT . EQ expr

    EQ              shift and go to state 194


state 102

    (528) variable_assignments -> variable_assignment , . variable_assignments
    (527) variable_assignments -> . variable_assignment
    (528) variable_assignments -> . variable_assignment , variable_assignments
    (524) variable_assignment -> . IDENT EQ expr
    (525) variable_assignment -> . GLOBAL IDENT EQ expr
    (526) variable_assignment -> . SESSION IDENT EQ expr

    IDENT           shift and go to state 59
    GLOBAL          shift and go to state 60
    SESSION         shift and go to state 56

    variable_assignment            shift and go to state 57
    variable_assignments           shift and go to state 195

state 103

    (524) variable_assignment -> IDENT EQ . expr
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 197
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 104

    (525) variable_assignment -> GLOBAL IDENT . EQ expr

    EQ              shift and go to state 198


state 105

    (213) create_table -> CREATE TABLE if_not_exists . IDENT ( create_statements ) table_options_opt

    IDENT           shift and go to state 199


state 106

    (212) if_not_exists -> IF . NOT EXISTS

    NOT             shift and go to state 200


state 107

    (535) create_index -> CREATE unique_opt INDEX . IDENT ON IDENT ( ident_list )

    IDENT           shift and go to state 201


state 108

    (418) create_trigger -> CREATE TRIGGER IDENT . trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt
    (416) trigger_time -> . BEFORE
    (417) trigger_time -> . AFTER

    BEFORE          shift and go to state 204
    AFTER           shift and go to state 202

    trigger_time                   shift and go to state 203

state 109

    (530) create_view -> CREATE VIEW IDENT . AS select

    AS              shift and go to state 205


state 110

    (221) drop_table -> DROP temporary TABLE . if_exists ident_list opt_restrict_cascade
    (216) if_exists -> .
    (217) if_exists -> . IF EXISTS

    IDENT           reduce using rule 216 (if_exists -> .)
    IF              shift and go to state 112

    if_exists                      shift and go to state 206

state 111

    (531) drop_trigger -> DROP TRIGGER if_exists . IDENT

    IDENT           shift and go to state 207


state 112

    (217) if_exists -> IF . EXISTS

    EXISTS          shift and go to state 208


state 113

    (536) drop_view -> DROP VIEW if_exists . ident_list opt_restrict_cascade
    (330) ident_list -> . IDENT
    (331) ident_list -> . IDENT , ident_list

    IDENT           shift and go to state 86

    ident_list                     shift and go to state 209

state 114

    (324) replace -> REPLACE replace_lock_option insert2 . insert_field_spec
    (304) insert_field_spec -> . insert_values
    (305) insert_field_spec -> . ( ) insert_values
    (306) insert_field_spec -> . ( fields ) insert_values
    (310) insert_field_spec -> . SET ident_eq_list
    (274) insert_values -> . VALUES values_list
    (275) insert_values -> . VALUE values_list
    (302) insert_values -> . create_select union_clause
    (303) insert_values -> . ( create_select ) union_opt
    (281) create_select -> . SELECT select_options select_item_list opt_select_from

    (               shift and go to state 216
    SET             shift and go to state 210
    VALUES          shift and go to state 214
    VALUE           shift and go to state 212
    SELECT          shift and go to state 217

    insert_field_spec              shift and go to state 211
    create_select                  shift and go to state 215
    insert_values                  shift and go to state 213

state 115

    (251) table_ident -> IDENT .

    (               reduce using rule 251 (table_ident -> IDENT .)
    SET             reduce using rule 251 (table_ident -> IDENT .)
    VALUES          reduce using rule 251 (table_ident -> IDENT .)
    VALUE           reduce using rule 251 (table_ident -> IDENT .)
    SELECT          reduce using rule 251 (table_ident -> IDENT .)


state 116

    (252) table_name -> table_ident .

    (               reduce using rule 252 (table_name -> table_ident .)
    SET             reduce using rule 252 (table_name -> table_ident .)
    VALUES          reduce using rule 252 (table_name -> table_ident .)
    VALUE           reduce using rule 252 (table_name -> table_ident .)
    SELECT          reduce using rule 252 (table_name -> table_ident .)


state 117

    (311) insert2 -> INTO . insert_table
    (253) insert_table -> . table_name
    (252) table_name -> . table_ident
    (251) table_ident -> . IDENT

    IDENT           shift and go to state 115

    table_ident                    shift and go to state 116
    insert_table                   shift and go to state 218
    table_name                     shift and go to state 118

state 118

    (253) insert_table -> table_name .

    (               reduce using rule 253 (insert_table -> table_name .)
    SET             reduce using rule 253 (insert_table -> table_name .)
    VALUES          reduce using rule 253 (insert_table -> table_name .)
    VALUE           reduce using rule 253 (insert_table -> table_name .)
    SELECT          reduce using rule 253 (insert_table -> table_name .)


state 119

    (312) insert2 -> insert_table .

    (               reduce using rule 312 (insert2 -> insert_table .)
    SET             reduce using rule 312 (insert2 -> insert_table .)
    VALUES          reduce using rule 312 (insert2 -> insert_table .)
    VALUE           reduce using rule 312 (insert2 -> insert_table .)
    SELECT          reduce using rule 312 (insert2 -> insert_table .)


state 120

    (571) statements -> statement delim statements .

    $end            reduce using rule 571 (statements -> statement delim statements .)


state 121

    (424) select_option_list -> select_option select_option_list .

    *               reduce using rule 424 (select_option_list -> select_option select_option_list .)
    IDENT           reduce using rule 424 (select_option_list -> select_option select_option_list .)
    NOT             reduce using rule 424 (select_option_list -> select_option select_option_list .)
    @               reduce using rule 424 (select_option_list -> select_option select_option_list .)
    (               reduce using rule 424 (select_option_list -> select_option select_option_list .)
    EXISTS          reduce using rule 424 (select_option_list -> select_option select_option_list .)
    ROW             reduce using rule 424 (select_option_list -> select_option select_option_list .)
    STRING          reduce using rule 424 (select_option_list -> select_option select_option_list .)
    NUMBER          reduce using rule 424 (select_option_list -> select_option select_option_list .)
    FLOAT_LIT       reduce using rule 424 (select_option_list -> select_option select_option_list .)
    CONVERT         reduce using rule 424 (select_option_list -> select_option select_option_list .)
    CAST            reduce using rule 424 (select_option_list -> select_option select_option_list .)
    AVG             reduce using rule 424 (select_option_list -> select_option select_option_list .)
    BIT_AND         reduce using rule 424 (select_option_list -> select_option select_option_list .)
    BIT_OR          reduce using rule 424 (select_option_list -> select_option select_option_list .)
    BIT_XOR         reduce using rule 424 (select_option_list -> select_option select_option_list .)
    COUNT           reduce using rule 424 (select_option_list -> select_option select_option_list .)
    MAX             reduce using rule 424 (select_option_list -> select_option select_option_list .)
    MIN             reduce using rule 424 (select_option_list -> select_option select_option_list .)
    SUM             reduce using rule 424 (select_option_list -> select_option select_option_list .)


state 122

    (78) bit_function -> BIT_AND . ( expr )

    (               shift and go to state 219


state 123

    (83) count_function -> COUNT . ( opt_all * )
    (84) count_function -> COUNT . ( expr )
    (85) count_function -> COUNT . ( DISTINCT expr_list )

    (               shift and go to state 220


state 124

    (63) convert_function -> CONVERT . ( expr USING IDENT )

    (               shift and go to state 221


state 125

    (92) function_call -> cast_function .

    SOUNDS          reduce using rule 92 (function_call -> cast_function .)
    BITWISE_OR      reduce using rule 92 (function_call -> cast_function .)
    BITWISE_AND     reduce using rule 92 (function_call -> cast_function .)
    SHL             reduce using rule 92 (function_call -> cast_function .)
    SHR             reduce using rule 92 (function_call -> cast_function .)
    PLUS            reduce using rule 92 (function_call -> cast_function .)
    MINUS           reduce using rule 92 (function_call -> cast_function .)
    TIMES           reduce using rule 92 (function_call -> cast_function .)
    DIV             reduce using rule 92 (function_call -> cast_function .)
    MOD             reduce using rule 92 (function_call -> cast_function .)
    BITWISE_XOR     reduce using rule 92 (function_call -> cast_function .)
    NOT             reduce using rule 92 (function_call -> cast_function .)
    LOGICAL_NOT     reduce using rule 92 (function_call -> cast_function .)
    IN              reduce using rule 92 (function_call -> cast_function .)
    BETWEEN         reduce using rule 92 (function_call -> cast_function .)
    LIKE            reduce using rule 92 (function_call -> cast_function .)
    REGEXP          reduce using rule 92 (function_call -> cast_function .)
    IS              reduce using rule 92 (function_call -> cast_function .)
    NULL_SAFE       reduce using rule 92 (function_call -> cast_function .)
    EQ              reduce using rule 92 (function_call -> cast_function .)
    GE              reduce using rule 92 (function_call -> cast_function .)
    GT              reduce using rule 92 (function_call -> cast_function .)
    LE              reduce using rule 92 (function_call -> cast_function .)
    LT              reduce using rule 92 (function_call -> cast_function .)
    NE              reduce using rule 92 (function_call -> cast_function .)
    )               reduce using rule 92 (function_call -> cast_function .)
    OR              reduce using rule 92 (function_call -> cast_function .)
    AND             reduce using rule 92 (function_call -> cast_function .)
    XOR             reduce using rule 92 (function_call -> cast_function .)
    AS              reduce using rule 92 (function_call -> cast_function .)
    IDENT           reduce using rule 92 (function_call -> cast_function .)
    ,               reduce using rule 92 (function_call -> cast_function .)
    INTO            reduce using rule 92 (function_call -> cast_function .)
    FROM            reduce using rule 92 (function_call -> cast_function .)
    ORDER           reduce using rule 92 (function_call -> cast_function .)
    FOR             reduce using rule 92 (function_call -> cast_function .)
    LOCK            reduce using rule 92 (function_call -> cast_function .)
    LIMIT           reduce using rule 92 (function_call -> cast_function .)
    UNION           reduce using rule 92 (function_call -> cast_function .)
    DELIM           reduce using rule 92 (function_call -> cast_function .)
    ;               reduce using rule 92 (function_call -> cast_function .)
    ON              reduce using rule 92 (function_call -> cast_function .)
    USING           reduce using rule 92 (function_call -> cast_function .)
    ASC             reduce using rule 92 (function_call -> cast_function .)
    DESC            reduce using rule 92 (function_call -> cast_function .)
    WHERE           reduce using rule 92 (function_call -> cast_function .)
    GROUP           reduce using rule 92 (function_call -> cast_function .)
    HAVING          reduce using rule 92 (function_call -> cast_function .)
    JOIN            reduce using rule 92 (function_call -> cast_function .)
    INNER           reduce using rule 92 (function_call -> cast_function .)
    CROSS           reduce using rule 92 (function_call -> cast_function .)
    LEFT            reduce using rule 92 (function_call -> cast_function .)
    RIGHT           reduce using rule 92 (function_call -> cast_function .)
    NATURAL         reduce using rule 92 (function_call -> cast_function .)
    WITH            reduce using rule 92 (function_call -> cast_function .)
    DO              reduce using rule 92 (function_call -> cast_function .)
    WHEN            reduce using rule 92 (function_call -> cast_function .)
    THEN            reduce using rule 92 (function_call -> cast_function .)
    END             reduce using rule 92 (function_call -> cast_function .)
    ESCAPE          reduce using rule 92 (function_call -> cast_function .)


state 126

    (56) simple_expr -> @ . IDENT

    IDENT           shift and go to state 222


state 127

    (88) sum_function -> SUM . ( opt_distinct expr )

    (               shift and go to state 223


state 128

    (57) simple_expr -> function_call .

    BITWISE_OR      reduce using rule 57 (simple_expr -> function_call .)
    BITWISE_AND     reduce using rule 57 (simple_expr -> function_call .)
    SHL             reduce using rule 57 (simple_expr -> function_call .)
    SHR             reduce using rule 57 (simple_expr -> function_call .)
    PLUS            reduce using rule 57 (simple_expr -> function_call .)
    MINUS           reduce using rule 57 (simple_expr -> function_call .)
    TIMES           reduce using rule 57 (simple_expr -> function_call .)
    DIV             reduce using rule 57 (simple_expr -> function_call .)
    MOD             reduce using rule 57 (simple_expr -> function_call .)
    BITWISE_XOR     reduce using rule 57 (simple_expr -> function_call .)
    SOUNDS          reduce using rule 57 (simple_expr -> function_call .)
    NOT             reduce using rule 57 (simple_expr -> function_call .)
    LOGICAL_NOT     reduce using rule 57 (simple_expr -> function_call .)
    IN              reduce using rule 57 (simple_expr -> function_call .)
    BETWEEN         reduce using rule 57 (simple_expr -> function_call .)
    LIKE            reduce using rule 57 (simple_expr -> function_call .)
    REGEXP          reduce using rule 57 (simple_expr -> function_call .)
    IS              reduce using rule 57 (simple_expr -> function_call .)
    NULL_SAFE       reduce using rule 57 (simple_expr -> function_call .)
    EQ              reduce using rule 57 (simple_expr -> function_call .)
    GE              reduce using rule 57 (simple_expr -> function_call .)
    GT              reduce using rule 57 (simple_expr -> function_call .)
    LE              reduce using rule 57 (simple_expr -> function_call .)
    LT              reduce using rule 57 (simple_expr -> function_call .)
    NE              reduce using rule 57 (simple_expr -> function_call .)
    OR              reduce using rule 57 (simple_expr -> function_call .)
    AND             reduce using rule 57 (simple_expr -> function_call .)
    XOR             reduce using rule 57 (simple_expr -> function_call .)
    AS              reduce using rule 57 (simple_expr -> function_call .)
    IDENT           reduce using rule 57 (simple_expr -> function_call .)
    ,               reduce using rule 57 (simple_expr -> function_call .)
    INTO            reduce using rule 57 (simple_expr -> function_call .)
    FROM            reduce using rule 57 (simple_expr -> function_call .)
    ORDER           reduce using rule 57 (simple_expr -> function_call .)
    FOR             reduce using rule 57 (simple_expr -> function_call .)
    LOCK            reduce using rule 57 (simple_expr -> function_call .)
    LIMIT           reduce using rule 57 (simple_expr -> function_call .)
    UNION           reduce using rule 57 (simple_expr -> function_call .)
    DELIM           reduce using rule 57 (simple_expr -> function_call .)
    ;               reduce using rule 57 (simple_expr -> function_call .)
    )               reduce using rule 57 (simple_expr -> function_call .)
    ON              reduce using rule 57 (simple_expr -> function_call .)
    USING           reduce using rule 57 (simple_expr -> function_call .)
    ASC             reduce using rule 57 (simple_expr -> function_call .)
    DESC            reduce using rule 57 (simple_expr -> function_call .)
    WHERE           reduce using rule 57 (simple_expr -> function_call .)
    GROUP           reduce using rule 57 (simple_expr -> function_call .)
    HAVING          reduce using rule 57 (simple_expr -> function_call .)
    JOIN            reduce using rule 57 (simple_expr -> function_call .)
    INNER           reduce using rule 57 (simple_expr -> function_call .)
    CROSS           reduce using rule 57 (simple_expr -> function_call .)
    LEFT            reduce using rule 57 (simple_expr -> function_call .)
    RIGHT           reduce using rule 57 (simple_expr -> function_call .)
    NATURAL         reduce using rule 57 (simple_expr -> function_call .)
    WITH            reduce using rule 57 (simple_expr -> function_call .)
    DO              reduce using rule 57 (simple_expr -> function_call .)
    WHEN            reduce using rule 57 (simple_expr -> function_call .)
    THEN            reduce using rule 57 (simple_expr -> function_call .)
    END             reduce using rule 57 (simple_expr -> function_call .)
    ESCAPE          reduce using rule 57 (simple_expr -> function_call .)


state 129

    (53) literal -> FLOAT_LIT .

    BITWISE_OR      reduce using rule 53 (literal -> FLOAT_LIT .)
    BITWISE_AND     reduce using rule 53 (literal -> FLOAT_LIT .)
    SHL             reduce using rule 53 (literal -> FLOAT_LIT .)
    SHR             reduce using rule 53 (literal -> FLOAT_LIT .)
    PLUS            reduce using rule 53 (literal -> FLOAT_LIT .)
    MINUS           reduce using rule 53 (literal -> FLOAT_LIT .)
    TIMES           reduce using rule 53 (literal -> FLOAT_LIT .)
    DIV             reduce using rule 53 (literal -> FLOAT_LIT .)
    MOD             reduce using rule 53 (literal -> FLOAT_LIT .)
    BITWISE_XOR     reduce using rule 53 (literal -> FLOAT_LIT .)
    SOUNDS          reduce using rule 53 (literal -> FLOAT_LIT .)
    NOT             reduce using rule 53 (literal -> FLOAT_LIT .)
    LOGICAL_NOT     reduce using rule 53 (literal -> FLOAT_LIT .)
    IN              reduce using rule 53 (literal -> FLOAT_LIT .)
    BETWEEN         reduce using rule 53 (literal -> FLOAT_LIT .)
    LIKE            reduce using rule 53 (literal -> FLOAT_LIT .)
    REGEXP          reduce using rule 53 (literal -> FLOAT_LIT .)
    IS              reduce using rule 53 (literal -> FLOAT_LIT .)
    NULL_SAFE       reduce using rule 53 (literal -> FLOAT_LIT .)
    EQ              reduce using rule 53 (literal -> FLOAT_LIT .)
    GE              reduce using rule 53 (literal -> FLOAT_LIT .)
    GT              reduce using rule 53 (literal -> FLOAT_LIT .)
    LE              reduce using rule 53 (literal -> FLOAT_LIT .)
    LT              reduce using rule 53 (literal -> FLOAT_LIT .)
    NE              reduce using rule 53 (literal -> FLOAT_LIT .)
    OR              reduce using rule 53 (literal -> FLOAT_LIT .)
    AND             reduce using rule 53 (literal -> FLOAT_LIT .)
    XOR             reduce using rule 53 (literal -> FLOAT_LIT .)
    AS              reduce using rule 53 (literal -> FLOAT_LIT .)
    IDENT           reduce using rule 53 (literal -> FLOAT_LIT .)
    ,               reduce using rule 53 (literal -> FLOAT_LIT .)
    INTO            reduce using rule 53 (literal -> FLOAT_LIT .)
    FROM            reduce using rule 53 (literal -> FLOAT_LIT .)
    ORDER           reduce using rule 53 (literal -> FLOAT_LIT .)
    FOR             reduce using rule 53 (literal -> FLOAT_LIT .)
    LOCK            reduce using rule 53 (literal -> FLOAT_LIT .)
    LIMIT           reduce using rule 53 (literal -> FLOAT_LIT .)
    UNION           reduce using rule 53 (literal -> FLOAT_LIT .)
    DELIM           reduce using rule 53 (literal -> FLOAT_LIT .)
    ;               reduce using rule 53 (literal -> FLOAT_LIT .)
    )               reduce using rule 53 (literal -> FLOAT_LIT .)
    ON              reduce using rule 53 (literal -> FLOAT_LIT .)
    USING           reduce using rule 53 (literal -> FLOAT_LIT .)
    ASC             reduce using rule 53 (literal -> FLOAT_LIT .)
    DESC            reduce using rule 53 (literal -> FLOAT_LIT .)
    WHERE           reduce using rule 53 (literal -> FLOAT_LIT .)
    GROUP           reduce using rule 53 (literal -> FLOAT_LIT .)
    HAVING          reduce using rule 53 (literal -> FLOAT_LIT .)
    JOIN            reduce using rule 53 (literal -> FLOAT_LIT .)
    INNER           reduce using rule 53 (literal -> FLOAT_LIT .)
    CROSS           reduce using rule 53 (literal -> FLOAT_LIT .)
    LEFT            reduce using rule 53 (literal -> FLOAT_LIT .)
    RIGHT           reduce using rule 53 (literal -> FLOAT_LIT .)
    NATURAL         reduce using rule 53 (literal -> FLOAT_LIT .)
    WITH            reduce using rule 53 (literal -> FLOAT_LIT .)
    DO              reduce using rule 53 (literal -> FLOAT_LIT .)
    WHEN            reduce using rule 53 (literal -> FLOAT_LIT .)
    THEN            reduce using rule 53 (literal -> FLOAT_LIT .)
    END             reduce using rule 53 (literal -> FLOAT_LIT .)
    ESCAPE          reduce using rule 53 (literal -> FLOAT_LIT .)


state 130

    (93) function_call -> average_function .

    SOUNDS          reduce using rule 93 (function_call -> average_function .)
    BITWISE_OR      reduce using rule 93 (function_call -> average_function .)
    BITWISE_AND     reduce using rule 93 (function_call -> average_function .)
    SHL             reduce using rule 93 (function_call -> average_function .)
    SHR             reduce using rule 93 (function_call -> average_function .)
    PLUS            reduce using rule 93 (function_call -> average_function .)
    MINUS           reduce using rule 93 (function_call -> average_function .)
    TIMES           reduce using rule 93 (function_call -> average_function .)
    DIV             reduce using rule 93 (function_call -> average_function .)
    MOD             reduce using rule 93 (function_call -> average_function .)
    BITWISE_XOR     reduce using rule 93 (function_call -> average_function .)
    NOT             reduce using rule 93 (function_call -> average_function .)
    LOGICAL_NOT     reduce using rule 93 (function_call -> average_function .)
    IN              reduce using rule 93 (function_call -> average_function .)
    BETWEEN         reduce using rule 93 (function_call -> average_function .)
    LIKE            reduce using rule 93 (function_call -> average_function .)
    REGEXP          reduce using rule 93 (function_call -> average_function .)
    IS              reduce using rule 93 (function_call -> average_function .)
    NULL_SAFE       reduce using rule 93 (function_call -> average_function .)
    EQ              reduce using rule 93 (function_call -> average_function .)
    GE              reduce using rule 93 (function_call -> average_function .)
    GT              reduce using rule 93 (function_call -> average_function .)
    LE              reduce using rule 93 (function_call -> average_function .)
    LT              reduce using rule 93 (function_call -> average_function .)
    NE              reduce using rule 93 (function_call -> average_function .)
    )               reduce using rule 93 (function_call -> average_function .)
    OR              reduce using rule 93 (function_call -> average_function .)
    AND             reduce using rule 93 (function_call -> average_function .)
    XOR             reduce using rule 93 (function_call -> average_function .)
    AS              reduce using rule 93 (function_call -> average_function .)
    IDENT           reduce using rule 93 (function_call -> average_function .)
    ,               reduce using rule 93 (function_call -> average_function .)
    INTO            reduce using rule 93 (function_call -> average_function .)
    FROM            reduce using rule 93 (function_call -> average_function .)
    ORDER           reduce using rule 93 (function_call -> average_function .)
    FOR             reduce using rule 93 (function_call -> average_function .)
    LOCK            reduce using rule 93 (function_call -> average_function .)
    LIMIT           reduce using rule 93 (function_call -> average_function .)
    UNION           reduce using rule 93 (function_call -> average_function .)
    DELIM           reduce using rule 93 (function_call -> average_function .)
    ;               reduce using rule 93 (function_call -> average_function .)
    ON              reduce using rule 93 (function_call -> average_function .)
    USING           reduce using rule 93 (function_call -> average_function .)
    ASC             reduce using rule 93 (function_call -> average_function .)
    DESC            reduce using rule 93 (function_call -> average_function .)
    WHERE           reduce using rule 93 (function_call -> average_function .)
    GROUP           reduce using rule 93 (function_call -> average_function .)
    HAVING          reduce using rule 93 (function_call -> average_function .)
    JOIN            reduce using rule 93 (function_call -> average_function .)
    INNER           reduce using rule 93 (function_call -> average_function .)
    CROSS           reduce using rule 93 (function_call -> average_function .)
    LEFT            reduce using rule 93 (function_call -> average_function .)
    RIGHT           reduce using rule 93 (function_call -> average_function .)
    NATURAL         reduce using rule 93 (function_call -> average_function .)
    WITH            reduce using rule 93 (function_call -> average_function .)
    DO              reduce using rule 93 (function_call -> average_function .)
    WHEN            reduce using rule 93 (function_call -> average_function .)
    THEN            reduce using rule 93 (function_call -> average_function .)
    END             reduce using rule 93 (function_call -> average_function .)
    ESCAPE          reduce using rule 93 (function_call -> average_function .)


state 131

    (50) bit_expr -> simple_expr .

    SOUNDS          reduce using rule 50 (bit_expr -> simple_expr .)
    BITWISE_OR      reduce using rule 50 (bit_expr -> simple_expr .)
    BITWISE_AND     reduce using rule 50 (bit_expr -> simple_expr .)
    SHL             reduce using rule 50 (bit_expr -> simple_expr .)
    SHR             reduce using rule 50 (bit_expr -> simple_expr .)
    PLUS            reduce using rule 50 (bit_expr -> simple_expr .)
    MINUS           reduce using rule 50 (bit_expr -> simple_expr .)
    TIMES           reduce using rule 50 (bit_expr -> simple_expr .)
    DIV             reduce using rule 50 (bit_expr -> simple_expr .)
    MOD             reduce using rule 50 (bit_expr -> simple_expr .)
    BITWISE_XOR     reduce using rule 50 (bit_expr -> simple_expr .)
    NOT             reduce using rule 50 (bit_expr -> simple_expr .)
    LOGICAL_NOT     reduce using rule 50 (bit_expr -> simple_expr .)
    IN              reduce using rule 50 (bit_expr -> simple_expr .)
    BETWEEN         reduce using rule 50 (bit_expr -> simple_expr .)
    LIKE            reduce using rule 50 (bit_expr -> simple_expr .)
    REGEXP          reduce using rule 50 (bit_expr -> simple_expr .)
    IS              reduce using rule 50 (bit_expr -> simple_expr .)
    NULL_SAFE       reduce using rule 50 (bit_expr -> simple_expr .)
    EQ              reduce using rule 50 (bit_expr -> simple_expr .)
    GE              reduce using rule 50 (bit_expr -> simple_expr .)
    GT              reduce using rule 50 (bit_expr -> simple_expr .)
    LE              reduce using rule 50 (bit_expr -> simple_expr .)
    LT              reduce using rule 50 (bit_expr -> simple_expr .)
    NE              reduce using rule 50 (bit_expr -> simple_expr .)
    ,               reduce using rule 50 (bit_expr -> simple_expr .)
    OR              reduce using rule 50 (bit_expr -> simple_expr .)
    AND             reduce using rule 50 (bit_expr -> simple_expr .)
    XOR             reduce using rule 50 (bit_expr -> simple_expr .)
    )               reduce using rule 50 (bit_expr -> simple_expr .)
    USING           reduce using rule 50 (bit_expr -> simple_expr .)
    THEN            reduce using rule 50 (bit_expr -> simple_expr .)
    AS              reduce using rule 50 (bit_expr -> simple_expr .)
    IDENT           reduce using rule 50 (bit_expr -> simple_expr .)
    INTO            reduce using rule 50 (bit_expr -> simple_expr .)
    FROM            reduce using rule 50 (bit_expr -> simple_expr .)
    ORDER           reduce using rule 50 (bit_expr -> simple_expr .)
    FOR             reduce using rule 50 (bit_expr -> simple_expr .)
    LOCK            reduce using rule 50 (bit_expr -> simple_expr .)
    LIMIT           reduce using rule 50 (bit_expr -> simple_expr .)
    UNION           reduce using rule 50 (bit_expr -> simple_expr .)
    DELIM           reduce using rule 50 (bit_expr -> simple_expr .)
    ;               reduce using rule 50 (bit_expr -> simple_expr .)
    ON              reduce using rule 50 (bit_expr -> simple_expr .)
    ASC             reduce using rule 50 (bit_expr -> simple_expr .)
    DESC            reduce using rule 50 (bit_expr -> simple_expr .)
    WHERE           reduce using rule 50 (bit_expr -> simple_expr .)
    GROUP           reduce using rule 50 (bit_expr -> simple_expr .)
    HAVING          reduce using rule 50 (bit_expr -> simple_expr .)
    JOIN            reduce using rule 50 (bit_expr -> simple_expr .)
    INNER           reduce using rule 50 (bit_expr -> simple_expr .)
    CROSS           reduce using rule 50 (bit_expr -> simple_expr .)
    LEFT            reduce using rule 50 (bit_expr -> simple_expr .)
    RIGHT           reduce using rule 50 (bit_expr -> simple_expr .)
    NATURAL         reduce using rule 50 (bit_expr -> simple_expr .)
    WITH            reduce using rule 50 (bit_expr -> simple_expr .)
    DO              reduce using rule 50 (bit_expr -> simple_expr .)
    WHEN            reduce using rule 50 (bit_expr -> simple_expr .)
    END             reduce using rule 50 (bit_expr -> simple_expr .)


state 132

    (98) function_call -> sum_function .

    SOUNDS          reduce using rule 98 (function_call -> sum_function .)
    BITWISE_OR      reduce using rule 98 (function_call -> sum_function .)
    BITWISE_AND     reduce using rule 98 (function_call -> sum_function .)
    SHL             reduce using rule 98 (function_call -> sum_function .)
    SHR             reduce using rule 98 (function_call -> sum_function .)
    PLUS            reduce using rule 98 (function_call -> sum_function .)
    MINUS           reduce using rule 98 (function_call -> sum_function .)
    TIMES           reduce using rule 98 (function_call -> sum_function .)
    DIV             reduce using rule 98 (function_call -> sum_function .)
    MOD             reduce using rule 98 (function_call -> sum_function .)
    BITWISE_XOR     reduce using rule 98 (function_call -> sum_function .)
    NOT             reduce using rule 98 (function_call -> sum_function .)
    LOGICAL_NOT     reduce using rule 98 (function_call -> sum_function .)
    IN              reduce using rule 98 (function_call -> sum_function .)
    BETWEEN         reduce using rule 98 (function_call -> sum_function .)
    LIKE            reduce using rule 98 (function_call -> sum_function .)
    REGEXP          reduce using rule 98 (function_call -> sum_function .)
    IS              reduce using rule 98 (function_call -> sum_function .)
    NULL_SAFE       reduce using rule 98 (function_call -> sum_function .)
    EQ              reduce using rule 98 (function_call -> sum_function .)
    GE              reduce using rule 98 (function_call -> sum_function .)
    GT              reduce using rule 98 (function_call -> sum_function .)
    LE              reduce using rule 98 (function_call -> sum_function .)
    LT              reduce using rule 98 (function_call -> sum_function .)
    NE              reduce using rule 98 (function_call -> sum_function .)
    )               reduce using rule 98 (function_call -> sum_function .)
    OR              reduce using rule 98 (function_call -> sum_function .)
    AND             reduce using rule 98 (function_call -> sum_function .)
    XOR             reduce using rule 98 (function_call -> sum_function .)
    AS              reduce using rule 98 (function_call -> sum_function .)
    IDENT           reduce using rule 98 (function_call -> sum_function .)
    ,               reduce using rule 98 (function_call -> sum_function .)
    INTO            reduce using rule 98 (function_call -> sum_function .)
    FROM            reduce using rule 98 (function_call -> sum_function .)
    ORDER           reduce using rule 98 (function_call -> sum_function .)
    FOR             reduce using rule 98 (function_call -> sum_function .)
    LOCK            reduce using rule 98 (function_call -> sum_function .)
    LIMIT           reduce using rule 98 (function_call -> sum_function .)
    UNION           reduce using rule 98 (function_call -> sum_function .)
    DELIM           reduce using rule 98 (function_call -> sum_function .)
    ;               reduce using rule 98 (function_call -> sum_function .)
    ON              reduce using rule 98 (function_call -> sum_function .)
    USING           reduce using rule 98 (function_call -> sum_function .)
    ASC             reduce using rule 98 (function_call -> sum_function .)
    DESC            reduce using rule 98 (function_call -> sum_function .)
    WHERE           reduce using rule 98 (function_call -> sum_function .)
    GROUP           reduce using rule 98 (function_call -> sum_function .)
    HAVING          reduce using rule 98 (function_call -> sum_function .)
    JOIN            reduce using rule 98 (function_call -> sum_function .)
    INNER           reduce using rule 98 (function_call -> sum_function .)
    CROSS           reduce using rule 98 (function_call -> sum_function .)
    LEFT            reduce using rule 98 (function_call -> sum_function .)
    RIGHT           reduce using rule 98 (function_call -> sum_function .)
    NATURAL         reduce using rule 98 (function_call -> sum_function .)
    WITH            reduce using rule 98 (function_call -> sum_function .)
    DO              reduce using rule 98 (function_call -> sum_function .)
    WHEN            reduce using rule 98 (function_call -> sum_function .)
    THEN            reduce using rule 98 (function_call -> sum_function .)
    END             reduce using rule 98 (function_call -> sum_function .)
    ESCAPE          reduce using rule 98 (function_call -> sum_function .)


state 133

    (285) select_part2 -> select_options select_item_list . select_into select_lock_type
    (453) select_into -> . opt_order_clause opt_limit_clause
    (460) select_into -> . into
    (519) select_into -> . select_from
    (520) select_into -> . into select_from
    (521) select_into -> . select_from into
    (435) opt_order_clause -> .
    (436) opt_order_clause -> . order_clause
    (459) into -> . INTO into_destination
    (517) select_from -> . FROM join_table_list where_clause group_clause having_clause opt_order_clause opt_limit_clause
    (518) select_from -> . FROM DUAL where_clause opt_limit_clause
    (437) order_clause -> . ORDER BY order_list

    LIMIT           reduce using rule 435 (opt_order_clause -> .)
    FOR             reduce using rule 435 (opt_order_clause -> .)
    LOCK            reduce using rule 435 (opt_order_clause -> .)
    UNION           reduce using rule 435 (opt_order_clause -> .)
    DELIM           reduce using rule 435 (opt_order_clause -> .)
    ;               reduce using rule 435 (opt_order_clause -> .)
    )               reduce using rule 435 (opt_order_clause -> .)
    ON              reduce using rule 435 (opt_order_clause -> .)
    INTO            shift and go to state 226
    FROM            shift and go to state 224
    ORDER           shift and go to state 228

    into                           shift and go to state 225
    order_clause                   shift and go to state 227
    select_into                    shift and go to state 229
    select_from                    shift and go to state 230
    opt_order_clause               shift and go to state 231

state 134

    (80) bit_function -> BIT_XOR . ( expr )

    (               shift and go to state 232


state 135

    (429) select_item2 -> table_wild .

    AS              reduce using rule 429 (select_item2 -> table_wild .)
    IDENT           reduce using rule 429 (select_item2 -> table_wild .)
    ,               reduce using rule 429 (select_item2 -> table_wild .)
    INTO            reduce using rule 429 (select_item2 -> table_wild .)
    FROM            reduce using rule 429 (select_item2 -> table_wild .)
    ORDER           reduce using rule 429 (select_item2 -> table_wild .)
    FOR             reduce using rule 429 (select_item2 -> table_wild .)
    LOCK            reduce using rule 429 (select_item2 -> table_wild .)
    LIMIT           reduce using rule 429 (select_item2 -> table_wild .)
    UNION           reduce using rule 429 (select_item2 -> table_wild .)
    DELIM           reduce using rule 429 (select_item2 -> table_wild .)
    ;               reduce using rule 429 (select_item2 -> table_wild .)
    )               reduce using rule 429 (select_item2 -> table_wild .)
    ON              reduce using rule 429 (select_item2 -> table_wild .)


state 136

    (434) select_item_list -> * .

    INTO            reduce using rule 434 (select_item_list -> * .)
    FROM            reduce using rule 434 (select_item_list -> * .)
    ORDER           reduce using rule 434 (select_item_list -> * .)
    FOR             reduce using rule 434 (select_item_list -> * .)
    LOCK            reduce using rule 434 (select_item_list -> * .)
    LIMIT           reduce using rule 434 (select_item_list -> * .)
    UNION           reduce using rule 434 (select_item_list -> * .)
    DELIM           reduce using rule 434 (select_item_list -> * .)
    ;               reduce using rule 434 (select_item_list -> * .)
    )               reduce using rule 434 (select_item_list -> * .)
    ON              reduce using rule 434 (select_item_list -> * .)


state 137

    (74) cast_function -> CAST . ( expr AS cast_type )

    (               shift and go to state 233


state 138

    (54) simple_expr -> literal .

    BITWISE_OR      reduce using rule 54 (simple_expr -> literal .)
    BITWISE_AND     reduce using rule 54 (simple_expr -> literal .)
    SHL             reduce using rule 54 (simple_expr -> literal .)
    SHR             reduce using rule 54 (simple_expr -> literal .)
    PLUS            reduce using rule 54 (simple_expr -> literal .)
    MINUS           reduce using rule 54 (simple_expr -> literal .)
    TIMES           reduce using rule 54 (simple_expr -> literal .)
    DIV             reduce using rule 54 (simple_expr -> literal .)
    MOD             reduce using rule 54 (simple_expr -> literal .)
    BITWISE_XOR     reduce using rule 54 (simple_expr -> literal .)
    SOUNDS          reduce using rule 54 (simple_expr -> literal .)
    NOT             reduce using rule 54 (simple_expr -> literal .)
    LOGICAL_NOT     reduce using rule 54 (simple_expr -> literal .)
    IN              reduce using rule 54 (simple_expr -> literal .)
    BETWEEN         reduce using rule 54 (simple_expr -> literal .)
    LIKE            reduce using rule 54 (simple_expr -> literal .)
    REGEXP          reduce using rule 54 (simple_expr -> literal .)
    IS              reduce using rule 54 (simple_expr -> literal .)
    NULL_SAFE       reduce using rule 54 (simple_expr -> literal .)
    EQ              reduce using rule 54 (simple_expr -> literal .)
    GE              reduce using rule 54 (simple_expr -> literal .)
    GT              reduce using rule 54 (simple_expr -> literal .)
    LE              reduce using rule 54 (simple_expr -> literal .)
    LT              reduce using rule 54 (simple_expr -> literal .)
    NE              reduce using rule 54 (simple_expr -> literal .)
    OR              reduce using rule 54 (simple_expr -> literal .)
    AND             reduce using rule 54 (simple_expr -> literal .)
    XOR             reduce using rule 54 (simple_expr -> literal .)
    AS              reduce using rule 54 (simple_expr -> literal .)
    IDENT           reduce using rule 54 (simple_expr -> literal .)
    ,               reduce using rule 54 (simple_expr -> literal .)
    INTO            reduce using rule 54 (simple_expr -> literal .)
    FROM            reduce using rule 54 (simple_expr -> literal .)
    ORDER           reduce using rule 54 (simple_expr -> literal .)
    FOR             reduce using rule 54 (simple_expr -> literal .)
    LOCK            reduce using rule 54 (simple_expr -> literal .)
    LIMIT           reduce using rule 54 (simple_expr -> literal .)
    UNION           reduce using rule 54 (simple_expr -> literal .)
    DELIM           reduce using rule 54 (simple_expr -> literal .)
    ;               reduce using rule 54 (simple_expr -> literal .)
    )               reduce using rule 54 (simple_expr -> literal .)
    ON              reduce using rule 54 (simple_expr -> literal .)
    USING           reduce using rule 54 (simple_expr -> literal .)
    ASC             reduce using rule 54 (simple_expr -> literal .)
    DESC            reduce using rule 54 (simple_expr -> literal .)
    WHERE           reduce using rule 54 (simple_expr -> literal .)
    GROUP           reduce using rule 54 (simple_expr -> literal .)
    HAVING          reduce using rule 54 (simple_expr -> literal .)
    JOIN            reduce using rule 54 (simple_expr -> literal .)
    INNER           reduce using rule 54 (simple_expr -> literal .)
    CROSS           reduce using rule 54 (simple_expr -> literal .)
    LEFT            reduce using rule 54 (simple_expr -> literal .)
    RIGHT           reduce using rule 54 (simple_expr -> literal .)
    NATURAL         reduce using rule 54 (simple_expr -> literal .)
    WITH            reduce using rule 54 (simple_expr -> literal .)
    DO              reduce using rule 54 (simple_expr -> literal .)
    WHEN            reduce using rule 54 (simple_expr -> literal .)
    THEN            reduce using rule 54 (simple_expr -> literal .)
    END             reduce using rule 54 (simple_expr -> literal .)
    ESCAPE          reduce using rule 54 (simple_expr -> literal .)


state 139

    (95) function_call -> count_function .

    SOUNDS          reduce using rule 95 (function_call -> count_function .)
    BITWISE_OR      reduce using rule 95 (function_call -> count_function .)
    BITWISE_AND     reduce using rule 95 (function_call -> count_function .)
    SHL             reduce using rule 95 (function_call -> count_function .)
    SHR             reduce using rule 95 (function_call -> count_function .)
    PLUS            reduce using rule 95 (function_call -> count_function .)
    MINUS           reduce using rule 95 (function_call -> count_function .)
    TIMES           reduce using rule 95 (function_call -> count_function .)
    DIV             reduce using rule 95 (function_call -> count_function .)
    MOD             reduce using rule 95 (function_call -> count_function .)
    BITWISE_XOR     reduce using rule 95 (function_call -> count_function .)
    NOT             reduce using rule 95 (function_call -> count_function .)
    LOGICAL_NOT     reduce using rule 95 (function_call -> count_function .)
    IN              reduce using rule 95 (function_call -> count_function .)
    BETWEEN         reduce using rule 95 (function_call -> count_function .)
    LIKE            reduce using rule 95 (function_call -> count_function .)
    REGEXP          reduce using rule 95 (function_call -> count_function .)
    IS              reduce using rule 95 (function_call -> count_function .)
    NULL_SAFE       reduce using rule 95 (function_call -> count_function .)
    EQ              reduce using rule 95 (function_call -> count_function .)
    GE              reduce using rule 95 (function_call -> count_function .)
    GT              reduce using rule 95 (function_call -> count_function .)
    LE              reduce using rule 95 (function_call -> count_function .)
    LT              reduce using rule 95 (function_call -> count_function .)
    NE              reduce using rule 95 (function_call -> count_function .)
    )               reduce using rule 95 (function_call -> count_function .)
    OR              reduce using rule 95 (function_call -> count_function .)
    AND             reduce using rule 95 (function_call -> count_function .)
    XOR             reduce using rule 95 (function_call -> count_function .)
    AS              reduce using rule 95 (function_call -> count_function .)
    IDENT           reduce using rule 95 (function_call -> count_function .)
    ,               reduce using rule 95 (function_call -> count_function .)
    INTO            reduce using rule 95 (function_call -> count_function .)
    FROM            reduce using rule 95 (function_call -> count_function .)
    ORDER           reduce using rule 95 (function_call -> count_function .)
    FOR             reduce using rule 95 (function_call -> count_function .)
    LOCK            reduce using rule 95 (function_call -> count_function .)
    LIMIT           reduce using rule 95 (function_call -> count_function .)
    UNION           reduce using rule 95 (function_call -> count_function .)
    DELIM           reduce using rule 95 (function_call -> count_function .)
    ;               reduce using rule 95 (function_call -> count_function .)
    ON              reduce using rule 95 (function_call -> count_function .)
    USING           reduce using rule 95 (function_call -> count_function .)
    ASC             reduce using rule 95 (function_call -> count_function .)
    DESC            reduce using rule 95 (function_call -> count_function .)
    WHERE           reduce using rule 95 (function_call -> count_function .)
    GROUP           reduce using rule 95 (function_call -> count_function .)
    HAVING          reduce using rule 95 (function_call -> count_function .)
    JOIN            reduce using rule 95 (function_call -> count_function .)
    INNER           reduce using rule 95 (function_call -> count_function .)
    CROSS           reduce using rule 95 (function_call -> count_function .)
    LEFT            reduce using rule 95 (function_call -> count_function .)
    RIGHT           reduce using rule 95 (function_call -> count_function .)
    NATURAL         reduce using rule 95 (function_call -> count_function .)
    WITH            reduce using rule 95 (function_call -> count_function .)
    DO              reduce using rule 95 (function_call -> count_function .)
    WHEN            reduce using rule 95 (function_call -> count_function .)
    THEN            reduce using rule 95 (function_call -> count_function .)
    END             reduce using rule 95 (function_call -> count_function .)
    ESCAPE          reduce using rule 95 (function_call -> count_function .)


state 140

    (91) function_call -> convert_function .

    SOUNDS          reduce using rule 91 (function_call -> convert_function .)
    BITWISE_OR      reduce using rule 91 (function_call -> convert_function .)
    BITWISE_AND     reduce using rule 91 (function_call -> convert_function .)
    SHL             reduce using rule 91 (function_call -> convert_function .)
    SHR             reduce using rule 91 (function_call -> convert_function .)
    PLUS            reduce using rule 91 (function_call -> convert_function .)
    MINUS           reduce using rule 91 (function_call -> convert_function .)
    TIMES           reduce using rule 91 (function_call -> convert_function .)
    DIV             reduce using rule 91 (function_call -> convert_function .)
    MOD             reduce using rule 91 (function_call -> convert_function .)
    BITWISE_XOR     reduce using rule 91 (function_call -> convert_function .)
    NOT             reduce using rule 91 (function_call -> convert_function .)
    LOGICAL_NOT     reduce using rule 91 (function_call -> convert_function .)
    IN              reduce using rule 91 (function_call -> convert_function .)
    BETWEEN         reduce using rule 91 (function_call -> convert_function .)
    LIKE            reduce using rule 91 (function_call -> convert_function .)
    REGEXP          reduce using rule 91 (function_call -> convert_function .)
    IS              reduce using rule 91 (function_call -> convert_function .)
    NULL_SAFE       reduce using rule 91 (function_call -> convert_function .)
    EQ              reduce using rule 91 (function_call -> convert_function .)
    GE              reduce using rule 91 (function_call -> convert_function .)
    GT              reduce using rule 91 (function_call -> convert_function .)
    LE              reduce using rule 91 (function_call -> convert_function .)
    LT              reduce using rule 91 (function_call -> convert_function .)
    NE              reduce using rule 91 (function_call -> convert_function .)
    )               reduce using rule 91 (function_call -> convert_function .)
    OR              reduce using rule 91 (function_call -> convert_function .)
    AND             reduce using rule 91 (function_call -> convert_function .)
    XOR             reduce using rule 91 (function_call -> convert_function .)
    AS              reduce using rule 91 (function_call -> convert_function .)
    IDENT           reduce using rule 91 (function_call -> convert_function .)
    ,               reduce using rule 91 (function_call -> convert_function .)
    INTO            reduce using rule 91 (function_call -> convert_function .)
    FROM            reduce using rule 91 (function_call -> convert_function .)
    ORDER           reduce using rule 91 (function_call -> convert_function .)
    FOR             reduce using rule 91 (function_call -> convert_function .)
    LOCK            reduce using rule 91 (function_call -> convert_function .)
    LIMIT           reduce using rule 91 (function_call -> convert_function .)
    UNION           reduce using rule 91 (function_call -> convert_function .)
    DELIM           reduce using rule 91 (function_call -> convert_function .)
    ;               reduce using rule 91 (function_call -> convert_function .)
    ON              reduce using rule 91 (function_call -> convert_function .)
    USING           reduce using rule 91 (function_call -> convert_function .)
    ASC             reduce using rule 91 (function_call -> convert_function .)
    DESC            reduce using rule 91 (function_call -> convert_function .)
    WHERE           reduce using rule 91 (function_call -> convert_function .)
    GROUP           reduce using rule 91 (function_call -> convert_function .)
    HAVING          reduce using rule 91 (function_call -> convert_function .)
    JOIN            reduce using rule 91 (function_call -> convert_function .)
    INNER           reduce using rule 91 (function_call -> convert_function .)
    CROSS           reduce using rule 91 (function_call -> convert_function .)
    LEFT            reduce using rule 91 (function_call -> convert_function .)
    RIGHT           reduce using rule 91 (function_call -> convert_function .)
    NATURAL         reduce using rule 91 (function_call -> convert_function .)
    WITH            reduce using rule 91 (function_call -> convert_function .)
    DO              reduce using rule 91 (function_call -> convert_function .)
    WHEN            reduce using rule 91 (function_call -> convert_function .)
    THEN            reduce using rule 91 (function_call -> convert_function .)
    END             reduce using rule 91 (function_call -> convert_function .)
    ESCAPE          reduce using rule 91 (function_call -> convert_function .)


state 141

    (62) simple_expr -> ROW . ( expr_list )

    (               shift and go to state 234


state 142

    (15) expr -> boolean_primary . IS not_opt true_false_or_unknown
    (16) expr -> boolean_primary .
    (17) boolean_primary -> boolean_primary . IS not_opt NULL
    (18) boolean_primary -> boolean_primary . NULL_SAFE predicate
    (19) boolean_primary -> boolean_primary . comparison_operator predicate
    (23) boolean_primary -> boolean_primary . comparison_operator all_or_any ( subquery )
    (25) comparison_operator -> . EQ
    (26) comparison_operator -> . GE
    (27) comparison_operator -> . GT
    (28) comparison_operator -> . LE
    (29) comparison_operator -> . LT
    (30) comparison_operator -> . NE

    IS              shift and go to state 237
    OR              reduce using rule 16 (expr -> boolean_primary .)
    AND             reduce using rule 16 (expr -> boolean_primary .)
    XOR             reduce using rule 16 (expr -> boolean_primary .)
    AS              reduce using rule 16 (expr -> boolean_primary .)
    IDENT           reduce using rule 16 (expr -> boolean_primary .)
    ,               reduce using rule 16 (expr -> boolean_primary .)
    INTO            reduce using rule 16 (expr -> boolean_primary .)
    FROM            reduce using rule 16 (expr -> boolean_primary .)
    ORDER           reduce using rule 16 (expr -> boolean_primary .)
    FOR             reduce using rule 16 (expr -> boolean_primary .)
    LOCK            reduce using rule 16 (expr -> boolean_primary .)
    LIMIT           reduce using rule 16 (expr -> boolean_primary .)
    UNION           reduce using rule 16 (expr -> boolean_primary .)
    DELIM           reduce using rule 16 (expr -> boolean_primary .)
    ;               reduce using rule 16 (expr -> boolean_primary .)
    )               reduce using rule 16 (expr -> boolean_primary .)
    ON              reduce using rule 16 (expr -> boolean_primary .)
    ASC             reduce using rule 16 (expr -> boolean_primary .)
    DESC            reduce using rule 16 (expr -> boolean_primary .)
    THEN            reduce using rule 16 (expr -> boolean_primary .)
    USING           reduce using rule 16 (expr -> boolean_primary .)
    WHERE           reduce using rule 16 (expr -> boolean_primary .)
    GROUP           reduce using rule 16 (expr -> boolean_primary .)
    HAVING          reduce using rule 16 (expr -> boolean_primary .)
    JOIN            reduce using rule 16 (expr -> boolean_primary .)
    INNER           reduce using rule 16 (expr -> boolean_primary .)
    CROSS           reduce using rule 16 (expr -> boolean_primary .)
    LEFT            reduce using rule 16 (expr -> boolean_primary .)
    RIGHT           reduce using rule 16 (expr -> boolean_primary .)
    NATURAL         reduce using rule 16 (expr -> boolean_primary .)
    WITH            reduce using rule 16 (expr -> boolean_primary .)
    DO              reduce using rule 16 (expr -> boolean_primary .)
    WHEN            reduce using rule 16 (expr -> boolean_primary .)
    END             reduce using rule 16 (expr -> boolean_primary .)
    NULL_SAFE       shift and go to state 242
    EQ              shift and go to state 243
    GE              shift and go to state 239
    GT              shift and go to state 235
    LE              shift and go to state 241
    LT              shift and go to state 238
    NE              shift and go to state 236

    comparison_operator            shift and go to state 240

state 143

    (33) predicate -> bit_expr . not_opt IN ( subquery )
    (34) predicate -> bit_expr . not_opt IN ( expr_list )
    (35) predicate -> bit_expr . not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> bit_expr . SOUNDS LIKE bit_expr
    (37) predicate -> bit_expr . not_opt LIKE simple_expr escape_opt
    (38) predicate -> bit_expr . not_opt REGEXP bit_expr
    (39) predicate -> bit_expr .
    (40) bit_expr -> bit_expr . BITWISE_OR bit_expr
    (41) bit_expr -> bit_expr . BITWISE_AND bit_expr
    (42) bit_expr -> bit_expr . SHL bit_expr
    (43) bit_expr -> bit_expr . SHR bit_expr
    (44) bit_expr -> bit_expr . PLUS bit_expr
    (45) bit_expr -> bit_expr . MINUS bit_expr
    (46) bit_expr -> bit_expr . TIMES bit_expr
    (47) bit_expr -> bit_expr . DIV bit_expr
    (48) bit_expr -> bit_expr . MOD bit_expr
    (49) bit_expr -> bit_expr . BITWISE_XOR bit_expr
    (3) not_opt -> .
    (4) not_opt -> . NOT
    (5) not_opt -> . LOGICAL_NOT

    SOUNDS          shift and go to state 247
    IS              reduce using rule 39 (predicate -> bit_expr .)
    NULL_SAFE       reduce using rule 39 (predicate -> bit_expr .)
    EQ              reduce using rule 39 (predicate -> bit_expr .)
    GE              reduce using rule 39 (predicate -> bit_expr .)
    GT              reduce using rule 39 (predicate -> bit_expr .)
    LE              reduce using rule 39 (predicate -> bit_expr .)
    LT              reduce using rule 39 (predicate -> bit_expr .)
    NE              reduce using rule 39 (predicate -> bit_expr .)
    OR              reduce using rule 39 (predicate -> bit_expr .)
    AND             reduce using rule 39 (predicate -> bit_expr .)
    XOR             reduce using rule 39 (predicate -> bit_expr .)
    AS              reduce using rule 39 (predicate -> bit_expr .)
    IDENT           reduce using rule 39 (predicate -> bit_expr .)
    ,               reduce using rule 39 (predicate -> bit_expr .)
    INTO            reduce using rule 39 (predicate -> bit_expr .)
    FROM            reduce using rule 39 (predicate -> bit_expr .)
    ORDER           reduce using rule 39 (predicate -> bit_expr .)
    FOR             reduce using rule 39 (predicate -> bit_expr .)
    LOCK            reduce using rule 39 (predicate -> bit_expr .)
    LIMIT           reduce using rule 39 (predicate -> bit_expr .)
    UNION           reduce using rule 39 (predicate -> bit_expr .)
    DELIM           reduce using rule 39 (predicate -> bit_expr .)
    ;               reduce using rule 39 (predicate -> bit_expr .)
    )               reduce using rule 39 (predicate -> bit_expr .)
    ON              reduce using rule 39 (predicate -> bit_expr .)
    USING           reduce using rule 39 (predicate -> bit_expr .)
    ASC             reduce using rule 39 (predicate -> bit_expr .)
    DESC            reduce using rule 39 (predicate -> bit_expr .)
    WHERE           reduce using rule 39 (predicate -> bit_expr .)
    GROUP           reduce using rule 39 (predicate -> bit_expr .)
    HAVING          reduce using rule 39 (predicate -> bit_expr .)
    JOIN            reduce using rule 39 (predicate -> bit_expr .)
    INNER           reduce using rule 39 (predicate -> bit_expr .)
    CROSS           reduce using rule 39 (predicate -> bit_expr .)
    LEFT            reduce using rule 39 (predicate -> bit_expr .)
    RIGHT           reduce using rule 39 (predicate -> bit_expr .)
    NATURAL         reduce using rule 39 (predicate -> bit_expr .)
    WITH            reduce using rule 39 (predicate -> bit_expr .)
    DO              reduce using rule 39 (predicate -> bit_expr .)
    WHEN            reduce using rule 39 (predicate -> bit_expr .)
    THEN            reduce using rule 39 (predicate -> bit_expr .)
    END             reduce using rule 39 (predicate -> bit_expr .)
    BITWISE_OR      shift and go to state 254
    BITWISE_AND     shift and go to state 245
    SHL             shift and go to state 252
    SHR             shift and go to state 244
    PLUS            shift and go to state 249
    MINUS           shift and go to state 248
    TIMES           shift and go to state 251
    DIV             shift and go to state 256
    MOD             shift and go to state 257
    BITWISE_XOR     shift and go to state 246
    IN              reduce using rule 3 (not_opt -> .)
    BETWEEN         reduce using rule 3 (not_opt -> .)
    LIKE            reduce using rule 3 (not_opt -> .)
    REGEXP          reduce using rule 3 (not_opt -> .)
    NOT             shift and go to state 255
    LOGICAL_NOT     shift and go to state 253

    not_opt                        shift and go to state 250

state 144

    (24) boolean_primary -> predicate .

    IS              reduce using rule 24 (boolean_primary -> predicate .)
    NULL_SAFE       reduce using rule 24 (boolean_primary -> predicate .)
    EQ              reduce using rule 24 (boolean_primary -> predicate .)
    GE              reduce using rule 24 (boolean_primary -> predicate .)
    GT              reduce using rule 24 (boolean_primary -> predicate .)
    LE              reduce using rule 24 (boolean_primary -> predicate .)
    LT              reduce using rule 24 (boolean_primary -> predicate .)
    NE              reduce using rule 24 (boolean_primary -> predicate .)
    OR              reduce using rule 24 (boolean_primary -> predicate .)
    AND             reduce using rule 24 (boolean_primary -> predicate .)
    XOR             reduce using rule 24 (boolean_primary -> predicate .)
    ASC             reduce using rule 24 (boolean_primary -> predicate .)
    DESC            reduce using rule 24 (boolean_primary -> predicate .)
    ,               reduce using rule 24 (boolean_primary -> predicate .)
    LIMIT           reduce using rule 24 (boolean_primary -> predicate .)
    FOR             reduce using rule 24 (boolean_primary -> predicate .)
    LOCK            reduce using rule 24 (boolean_primary -> predicate .)
    UNION           reduce using rule 24 (boolean_primary -> predicate .)
    DELIM           reduce using rule 24 (boolean_primary -> predicate .)
    ;               reduce using rule 24 (boolean_primary -> predicate .)
    )               reduce using rule 24 (boolean_primary -> predicate .)
    ON              reduce using rule 24 (boolean_primary -> predicate .)
    INTO            reduce using rule 24 (boolean_primary -> predicate .)
    THEN            reduce using rule 24 (boolean_primary -> predicate .)
    DO              reduce using rule 24 (boolean_primary -> predicate .)
    WITH            reduce using rule 24 (boolean_primary -> predicate .)
    HAVING          reduce using rule 24 (boolean_primary -> predicate .)
    ORDER           reduce using rule 24 (boolean_primary -> predicate .)
    GROUP           reduce using rule 24 (boolean_primary -> predicate .)
    WHEN            reduce using rule 24 (boolean_primary -> predicate .)
    AS              reduce using rule 24 (boolean_primary -> predicate .)
    USING           reduce using rule 24 (boolean_primary -> predicate .)
    IDENT           reduce using rule 24 (boolean_primary -> predicate .)
    FROM            reduce using rule 24 (boolean_primary -> predicate .)
    WHERE           reduce using rule 24 (boolean_primary -> predicate .)
    JOIN            reduce using rule 24 (boolean_primary -> predicate .)
    INNER           reduce using rule 24 (boolean_primary -> predicate .)
    CROSS           reduce using rule 24 (boolean_primary -> predicate .)
    LEFT            reduce using rule 24 (boolean_primary -> predicate .)
    RIGHT           reduce using rule 24 (boolean_primary -> predicate .)
    NATURAL         reduce using rule 24 (boolean_primary -> predicate .)
    END             reduce using rule 24 (boolean_primary -> predicate .)


state 145

    (428) table_wild -> IDENT . *
    (55) simple_expr -> IDENT .
    (89) other_function -> IDENT . ( )
    (90) other_function -> IDENT . ( expr_list )

    *               shift and go to state 258
    SOUNDS          reduce using rule 55 (simple_expr -> IDENT .)
    BITWISE_OR      reduce using rule 55 (simple_expr -> IDENT .)
    BITWISE_AND     reduce using rule 55 (simple_expr -> IDENT .)
    SHL             reduce using rule 55 (simple_expr -> IDENT .)
    SHR             reduce using rule 55 (simple_expr -> IDENT .)
    PLUS            reduce using rule 55 (simple_expr -> IDENT .)
    MINUS           reduce using rule 55 (simple_expr -> IDENT .)
    TIMES           reduce using rule 55 (simple_expr -> IDENT .)
    DIV             reduce using rule 55 (simple_expr -> IDENT .)
    MOD             reduce using rule 55 (simple_expr -> IDENT .)
    BITWISE_XOR     reduce using rule 55 (simple_expr -> IDENT .)
    NOT             reduce using rule 55 (simple_expr -> IDENT .)
    LOGICAL_NOT     reduce using rule 55 (simple_expr -> IDENT .)
    IN              reduce using rule 55 (simple_expr -> IDENT .)
    BETWEEN         reduce using rule 55 (simple_expr -> IDENT .)
    LIKE            reduce using rule 55 (simple_expr -> IDENT .)
    REGEXP          reduce using rule 55 (simple_expr -> IDENT .)
    IS              reduce using rule 55 (simple_expr -> IDENT .)
    NULL_SAFE       reduce using rule 55 (simple_expr -> IDENT .)
    EQ              reduce using rule 55 (simple_expr -> IDENT .)
    GE              reduce using rule 55 (simple_expr -> IDENT .)
    GT              reduce using rule 55 (simple_expr -> IDENT .)
    LE              reduce using rule 55 (simple_expr -> IDENT .)
    LT              reduce using rule 55 (simple_expr -> IDENT .)
    NE              reduce using rule 55 (simple_expr -> IDENT .)
    OR              reduce using rule 55 (simple_expr -> IDENT .)
    AND             reduce using rule 55 (simple_expr -> IDENT .)
    XOR             reduce using rule 55 (simple_expr -> IDENT .)
    AS              reduce using rule 55 (simple_expr -> IDENT .)
    IDENT           reduce using rule 55 (simple_expr -> IDENT .)
    ,               reduce using rule 55 (simple_expr -> IDENT .)
    INTO            reduce using rule 55 (simple_expr -> IDENT .)
    FROM            reduce using rule 55 (simple_expr -> IDENT .)
    ORDER           reduce using rule 55 (simple_expr -> IDENT .)
    FOR             reduce using rule 55 (simple_expr -> IDENT .)
    LOCK            reduce using rule 55 (simple_expr -> IDENT .)
    LIMIT           reduce using rule 55 (simple_expr -> IDENT .)
    UNION           reduce using rule 55 (simple_expr -> IDENT .)
    DELIM           reduce using rule 55 (simple_expr -> IDENT .)
    ;               reduce using rule 55 (simple_expr -> IDENT .)
    )               reduce using rule 55 (simple_expr -> IDENT .)
    ON              reduce using rule 55 (simple_expr -> IDENT .)
    (               shift and go to state 259


state 146

    (51) literal -> STRING .

    BITWISE_OR      reduce using rule 51 (literal -> STRING .)
    BITWISE_AND     reduce using rule 51 (literal -> STRING .)
    SHL             reduce using rule 51 (literal -> STRING .)
    SHR             reduce using rule 51 (literal -> STRING .)
    PLUS            reduce using rule 51 (literal -> STRING .)
    MINUS           reduce using rule 51 (literal -> STRING .)
    TIMES           reduce using rule 51 (literal -> STRING .)
    DIV             reduce using rule 51 (literal -> STRING .)
    MOD             reduce using rule 51 (literal -> STRING .)
    BITWISE_XOR     reduce using rule 51 (literal -> STRING .)
    SOUNDS          reduce using rule 51 (literal -> STRING .)
    NOT             reduce using rule 51 (literal -> STRING .)
    LOGICAL_NOT     reduce using rule 51 (literal -> STRING .)
    IN              reduce using rule 51 (literal -> STRING .)
    BETWEEN         reduce using rule 51 (literal -> STRING .)
    LIKE            reduce using rule 51 (literal -> STRING .)
    REGEXP          reduce using rule 51 (literal -> STRING .)
    IS              reduce using rule 51 (literal -> STRING .)
    NULL_SAFE       reduce using rule 51 (literal -> STRING .)
    EQ              reduce using rule 51 (literal -> STRING .)
    GE              reduce using rule 51 (literal -> STRING .)
    GT              reduce using rule 51 (literal -> STRING .)
    LE              reduce using rule 51 (literal -> STRING .)
    LT              reduce using rule 51 (literal -> STRING .)
    NE              reduce using rule 51 (literal -> STRING .)
    OR              reduce using rule 51 (literal -> STRING .)
    AND             reduce using rule 51 (literal -> STRING .)
    XOR             reduce using rule 51 (literal -> STRING .)
    AS              reduce using rule 51 (literal -> STRING .)
    IDENT           reduce using rule 51 (literal -> STRING .)
    ,               reduce using rule 51 (literal -> STRING .)
    INTO            reduce using rule 51 (literal -> STRING .)
    FROM            reduce using rule 51 (literal -> STRING .)
    ORDER           reduce using rule 51 (literal -> STRING .)
    FOR             reduce using rule 51 (literal -> STRING .)
    LOCK            reduce using rule 51 (literal -> STRING .)
    LIMIT           reduce using rule 51 (literal -> STRING .)
    UNION           reduce using rule 51 (literal -> STRING .)
    DELIM           reduce using rule 51 (literal -> STRING .)
    ;               reduce using rule 51 (literal -> STRING .)
    )               reduce using rule 51 (literal -> STRING .)
    ON              reduce using rule 51 (literal -> STRING .)
    USING           reduce using rule 51 (literal -> STRING .)
    ASC             reduce using rule 51 (literal -> STRING .)
    DESC            reduce using rule 51 (literal -> STRING .)
    WHERE           reduce using rule 51 (literal -> STRING .)
    GROUP           reduce using rule 51 (literal -> STRING .)
    HAVING          reduce using rule 51 (literal -> STRING .)
    JOIN            reduce using rule 51 (literal -> STRING .)
    INNER           reduce using rule 51 (literal -> STRING .)
    CROSS           reduce using rule 51 (literal -> STRING .)
    LEFT            reduce using rule 51 (literal -> STRING .)
    RIGHT           reduce using rule 51 (literal -> STRING .)
    NATURAL         reduce using rule 51 (literal -> STRING .)
    WITH            reduce using rule 51 (literal -> STRING .)
    DO              reduce using rule 51 (literal -> STRING .)
    WHEN            reduce using rule 51 (literal -> STRING .)
    THEN            reduce using rule 51 (literal -> STRING .)
    END             reduce using rule 51 (literal -> STRING .)
    ESCAPE          reduce using rule 51 (literal -> STRING .)


state 147

    (60) simple_expr -> EXISTS . ( subquery )

    (               shift and go to state 260


state 148

    (52) literal -> NUMBER .

    BITWISE_OR      reduce using rule 52 (literal -> NUMBER .)
    BITWISE_AND     reduce using rule 52 (literal -> NUMBER .)
    SHL             reduce using rule 52 (literal -> NUMBER .)
    SHR             reduce using rule 52 (literal -> NUMBER .)
    PLUS            reduce using rule 52 (literal -> NUMBER .)
    MINUS           reduce using rule 52 (literal -> NUMBER .)
    TIMES           reduce using rule 52 (literal -> NUMBER .)
    DIV             reduce using rule 52 (literal -> NUMBER .)
    MOD             reduce using rule 52 (literal -> NUMBER .)
    BITWISE_XOR     reduce using rule 52 (literal -> NUMBER .)
    SOUNDS          reduce using rule 52 (literal -> NUMBER .)
    NOT             reduce using rule 52 (literal -> NUMBER .)
    LOGICAL_NOT     reduce using rule 52 (literal -> NUMBER .)
    IN              reduce using rule 52 (literal -> NUMBER .)
    BETWEEN         reduce using rule 52 (literal -> NUMBER .)
    LIKE            reduce using rule 52 (literal -> NUMBER .)
    REGEXP          reduce using rule 52 (literal -> NUMBER .)
    IS              reduce using rule 52 (literal -> NUMBER .)
    NULL_SAFE       reduce using rule 52 (literal -> NUMBER .)
    EQ              reduce using rule 52 (literal -> NUMBER .)
    GE              reduce using rule 52 (literal -> NUMBER .)
    GT              reduce using rule 52 (literal -> NUMBER .)
    LE              reduce using rule 52 (literal -> NUMBER .)
    LT              reduce using rule 52 (literal -> NUMBER .)
    NE              reduce using rule 52 (literal -> NUMBER .)
    OR              reduce using rule 52 (literal -> NUMBER .)
    AND             reduce using rule 52 (literal -> NUMBER .)
    XOR             reduce using rule 52 (literal -> NUMBER .)
    AS              reduce using rule 52 (literal -> NUMBER .)
    IDENT           reduce using rule 52 (literal -> NUMBER .)
    ,               reduce using rule 52 (literal -> NUMBER .)
    INTO            reduce using rule 52 (literal -> NUMBER .)
    FROM            reduce using rule 52 (literal -> NUMBER .)
    ORDER           reduce using rule 52 (literal -> NUMBER .)
    FOR             reduce using rule 52 (literal -> NUMBER .)
    LOCK            reduce using rule 52 (literal -> NUMBER .)
    LIMIT           reduce using rule 52 (literal -> NUMBER .)
    UNION           reduce using rule 52 (literal -> NUMBER .)
    DELIM           reduce using rule 52 (literal -> NUMBER .)
    ;               reduce using rule 52 (literal -> NUMBER .)
    )               reduce using rule 52 (literal -> NUMBER .)
    ON              reduce using rule 52 (literal -> NUMBER .)
    USING           reduce using rule 52 (literal -> NUMBER .)
    ASC             reduce using rule 52 (literal -> NUMBER .)
    DESC            reduce using rule 52 (literal -> NUMBER .)
    WHERE           reduce using rule 52 (literal -> NUMBER .)
    GROUP           reduce using rule 52 (literal -> NUMBER .)
    HAVING          reduce using rule 52 (literal -> NUMBER .)
    JOIN            reduce using rule 52 (literal -> NUMBER .)
    INNER           reduce using rule 52 (literal -> NUMBER .)
    CROSS           reduce using rule 52 (literal -> NUMBER .)
    LEFT            reduce using rule 52 (literal -> NUMBER .)
    RIGHT           reduce using rule 52 (literal -> NUMBER .)
    NATURAL         reduce using rule 52 (literal -> NUMBER .)
    WITH            reduce using rule 52 (literal -> NUMBER .)
    DO              reduce using rule 52 (literal -> NUMBER .)
    WHEN            reduce using rule 52 (literal -> NUMBER .)
    THEN            reduce using rule 52 (literal -> NUMBER .)
    END             reduce using rule 52 (literal -> NUMBER .)
    ESCAPE          reduce using rule 52 (literal -> NUMBER .)


state 149

    (96) function_call -> max_function .

    SOUNDS          reduce using rule 96 (function_call -> max_function .)
    BITWISE_OR      reduce using rule 96 (function_call -> max_function .)
    BITWISE_AND     reduce using rule 96 (function_call -> max_function .)
    SHL             reduce using rule 96 (function_call -> max_function .)
    SHR             reduce using rule 96 (function_call -> max_function .)
    PLUS            reduce using rule 96 (function_call -> max_function .)
    MINUS           reduce using rule 96 (function_call -> max_function .)
    TIMES           reduce using rule 96 (function_call -> max_function .)
    DIV             reduce using rule 96 (function_call -> max_function .)
    MOD             reduce using rule 96 (function_call -> max_function .)
    BITWISE_XOR     reduce using rule 96 (function_call -> max_function .)
    NOT             reduce using rule 96 (function_call -> max_function .)
    LOGICAL_NOT     reduce using rule 96 (function_call -> max_function .)
    IN              reduce using rule 96 (function_call -> max_function .)
    BETWEEN         reduce using rule 96 (function_call -> max_function .)
    LIKE            reduce using rule 96 (function_call -> max_function .)
    REGEXP          reduce using rule 96 (function_call -> max_function .)
    IS              reduce using rule 96 (function_call -> max_function .)
    NULL_SAFE       reduce using rule 96 (function_call -> max_function .)
    EQ              reduce using rule 96 (function_call -> max_function .)
    GE              reduce using rule 96 (function_call -> max_function .)
    GT              reduce using rule 96 (function_call -> max_function .)
    LE              reduce using rule 96 (function_call -> max_function .)
    LT              reduce using rule 96 (function_call -> max_function .)
    NE              reduce using rule 96 (function_call -> max_function .)
    )               reduce using rule 96 (function_call -> max_function .)
    OR              reduce using rule 96 (function_call -> max_function .)
    AND             reduce using rule 96 (function_call -> max_function .)
    XOR             reduce using rule 96 (function_call -> max_function .)
    AS              reduce using rule 96 (function_call -> max_function .)
    IDENT           reduce using rule 96 (function_call -> max_function .)
    ,               reduce using rule 96 (function_call -> max_function .)
    INTO            reduce using rule 96 (function_call -> max_function .)
    FROM            reduce using rule 96 (function_call -> max_function .)
    ORDER           reduce using rule 96 (function_call -> max_function .)
    FOR             reduce using rule 96 (function_call -> max_function .)
    LOCK            reduce using rule 96 (function_call -> max_function .)
    LIMIT           reduce using rule 96 (function_call -> max_function .)
    UNION           reduce using rule 96 (function_call -> max_function .)
    DELIM           reduce using rule 96 (function_call -> max_function .)
    ;               reduce using rule 96 (function_call -> max_function .)
    ON              reduce using rule 96 (function_call -> max_function .)
    USING           reduce using rule 96 (function_call -> max_function .)
    ASC             reduce using rule 96 (function_call -> max_function .)
    DESC            reduce using rule 96 (function_call -> max_function .)
    WHERE           reduce using rule 96 (function_call -> max_function .)
    GROUP           reduce using rule 96 (function_call -> max_function .)
    HAVING          reduce using rule 96 (function_call -> max_function .)
    JOIN            reduce using rule 96 (function_call -> max_function .)
    INNER           reduce using rule 96 (function_call -> max_function .)
    CROSS           reduce using rule 96 (function_call -> max_function .)
    LEFT            reduce using rule 96 (function_call -> max_function .)
    RIGHT           reduce using rule 96 (function_call -> max_function .)
    NATURAL         reduce using rule 96 (function_call -> max_function .)
    WITH            reduce using rule 96 (function_call -> max_function .)
    DO              reduce using rule 96 (function_call -> max_function .)
    WHEN            reduce using rule 96 (function_call -> max_function .)
    THEN            reduce using rule 96 (function_call -> max_function .)
    END             reduce using rule 96 (function_call -> max_function .)
    ESCAPE          reduce using rule 96 (function_call -> max_function .)


state 150

    (86) max_function -> MAX . ( opt_distinct expr )

    (               shift and go to state 261


state 151

    (79) bit_function -> BIT_OR . ( expr )

    (               shift and go to state 262


state 152

    (97) function_call -> min_function .

    SOUNDS          reduce using rule 97 (function_call -> min_function .)
    BITWISE_OR      reduce using rule 97 (function_call -> min_function .)
    BITWISE_AND     reduce using rule 97 (function_call -> min_function .)
    SHL             reduce using rule 97 (function_call -> min_function .)
    SHR             reduce using rule 97 (function_call -> min_function .)
    PLUS            reduce using rule 97 (function_call -> min_function .)
    MINUS           reduce using rule 97 (function_call -> min_function .)
    TIMES           reduce using rule 97 (function_call -> min_function .)
    DIV             reduce using rule 97 (function_call -> min_function .)
    MOD             reduce using rule 97 (function_call -> min_function .)
    BITWISE_XOR     reduce using rule 97 (function_call -> min_function .)
    NOT             reduce using rule 97 (function_call -> min_function .)
    LOGICAL_NOT     reduce using rule 97 (function_call -> min_function .)
    IN              reduce using rule 97 (function_call -> min_function .)
    BETWEEN         reduce using rule 97 (function_call -> min_function .)
    LIKE            reduce using rule 97 (function_call -> min_function .)
    REGEXP          reduce using rule 97 (function_call -> min_function .)
    IS              reduce using rule 97 (function_call -> min_function .)
    NULL_SAFE       reduce using rule 97 (function_call -> min_function .)
    EQ              reduce using rule 97 (function_call -> min_function .)
    GE              reduce using rule 97 (function_call -> min_function .)
    GT              reduce using rule 97 (function_call -> min_function .)
    LE              reduce using rule 97 (function_call -> min_function .)
    LT              reduce using rule 97 (function_call -> min_function .)
    NE              reduce using rule 97 (function_call -> min_function .)
    )               reduce using rule 97 (function_call -> min_function .)
    OR              reduce using rule 97 (function_call -> min_function .)
    AND             reduce using rule 97 (function_call -> min_function .)
    XOR             reduce using rule 97 (function_call -> min_function .)
    AS              reduce using rule 97 (function_call -> min_function .)
    IDENT           reduce using rule 97 (function_call -> min_function .)
    ,               reduce using rule 97 (function_call -> min_function .)
    INTO            reduce using rule 97 (function_call -> min_function .)
    FROM            reduce using rule 97 (function_call -> min_function .)
    ORDER           reduce using rule 97 (function_call -> min_function .)
    FOR             reduce using rule 97 (function_call -> min_function .)
    LOCK            reduce using rule 97 (function_call -> min_function .)
    LIMIT           reduce using rule 97 (function_call -> min_function .)
    UNION           reduce using rule 97 (function_call -> min_function .)
    DELIM           reduce using rule 97 (function_call -> min_function .)
    ;               reduce using rule 97 (function_call -> min_function .)
    ON              reduce using rule 97 (function_call -> min_function .)
    USING           reduce using rule 97 (function_call -> min_function .)
    ASC             reduce using rule 97 (function_call -> min_function .)
    DESC            reduce using rule 97 (function_call -> min_function .)
    WHERE           reduce using rule 97 (function_call -> min_function .)
    GROUP           reduce using rule 97 (function_call -> min_function .)
    HAVING          reduce using rule 97 (function_call -> min_function .)
    JOIN            reduce using rule 97 (function_call -> min_function .)
    INNER           reduce using rule 97 (function_call -> min_function .)
    CROSS           reduce using rule 97 (function_call -> min_function .)
    LEFT            reduce using rule 97 (function_call -> min_function .)
    RIGHT           reduce using rule 97 (function_call -> min_function .)
    NATURAL         reduce using rule 97 (function_call -> min_function .)
    WITH            reduce using rule 97 (function_call -> min_function .)
    DO              reduce using rule 97 (function_call -> min_function .)
    WHEN            reduce using rule 97 (function_call -> min_function .)
    THEN            reduce using rule 97 (function_call -> min_function .)
    END             reduce using rule 97 (function_call -> min_function .)
    ESCAPE          reduce using rule 97 (function_call -> min_function .)


state 153

    (94) function_call -> bit_function .

    SOUNDS          reduce using rule 94 (function_call -> bit_function .)
    BITWISE_OR      reduce using rule 94 (function_call -> bit_function .)
    BITWISE_AND     reduce using rule 94 (function_call -> bit_function .)
    SHL             reduce using rule 94 (function_call -> bit_function .)
    SHR             reduce using rule 94 (function_call -> bit_function .)
    PLUS            reduce using rule 94 (function_call -> bit_function .)
    MINUS           reduce using rule 94 (function_call -> bit_function .)
    TIMES           reduce using rule 94 (function_call -> bit_function .)
    DIV             reduce using rule 94 (function_call -> bit_function .)
    MOD             reduce using rule 94 (function_call -> bit_function .)
    BITWISE_XOR     reduce using rule 94 (function_call -> bit_function .)
    NOT             reduce using rule 94 (function_call -> bit_function .)
    LOGICAL_NOT     reduce using rule 94 (function_call -> bit_function .)
    IN              reduce using rule 94 (function_call -> bit_function .)
    BETWEEN         reduce using rule 94 (function_call -> bit_function .)
    LIKE            reduce using rule 94 (function_call -> bit_function .)
    REGEXP          reduce using rule 94 (function_call -> bit_function .)
    IS              reduce using rule 94 (function_call -> bit_function .)
    NULL_SAFE       reduce using rule 94 (function_call -> bit_function .)
    EQ              reduce using rule 94 (function_call -> bit_function .)
    GE              reduce using rule 94 (function_call -> bit_function .)
    GT              reduce using rule 94 (function_call -> bit_function .)
    LE              reduce using rule 94 (function_call -> bit_function .)
    LT              reduce using rule 94 (function_call -> bit_function .)
    NE              reduce using rule 94 (function_call -> bit_function .)
    )               reduce using rule 94 (function_call -> bit_function .)
    OR              reduce using rule 94 (function_call -> bit_function .)
    AND             reduce using rule 94 (function_call -> bit_function .)
    XOR             reduce using rule 94 (function_call -> bit_function .)
    AS              reduce using rule 94 (function_call -> bit_function .)
    IDENT           reduce using rule 94 (function_call -> bit_function .)
    ,               reduce using rule 94 (function_call -> bit_function .)
    INTO            reduce using rule 94 (function_call -> bit_function .)
    FROM            reduce using rule 94 (function_call -> bit_function .)
    ORDER           reduce using rule 94 (function_call -> bit_function .)
    FOR             reduce using rule 94 (function_call -> bit_function .)
    LOCK            reduce using rule 94 (function_call -> bit_function .)
    LIMIT           reduce using rule 94 (function_call -> bit_function .)
    UNION           reduce using rule 94 (function_call -> bit_function .)
    DELIM           reduce using rule 94 (function_call -> bit_function .)
    ;               reduce using rule 94 (function_call -> bit_function .)
    ON              reduce using rule 94 (function_call -> bit_function .)
    USING           reduce using rule 94 (function_call -> bit_function .)
    ASC             reduce using rule 94 (function_call -> bit_function .)
    DESC            reduce using rule 94 (function_call -> bit_function .)
    WHERE           reduce using rule 94 (function_call -> bit_function .)
    GROUP           reduce using rule 94 (function_call -> bit_function .)
    HAVING          reduce using rule 94 (function_call -> bit_function .)
    JOIN            reduce using rule 94 (function_call -> bit_function .)
    INNER           reduce using rule 94 (function_call -> bit_function .)
    CROSS           reduce using rule 94 (function_call -> bit_function .)
    LEFT            reduce using rule 94 (function_call -> bit_function .)
    RIGHT           reduce using rule 94 (function_call -> bit_function .)
    NATURAL         reduce using rule 94 (function_call -> bit_function .)
    WITH            reduce using rule 94 (function_call -> bit_function .)
    DO              reduce using rule 94 (function_call -> bit_function .)
    WHEN            reduce using rule 94 (function_call -> bit_function .)
    THEN            reduce using rule 94 (function_call -> bit_function .)
    END             reduce using rule 94 (function_call -> bit_function .)
    ESCAPE          reduce using rule 94 (function_call -> bit_function .)


state 154

    (99) function_call -> other_function .

    SOUNDS          reduce using rule 99 (function_call -> other_function .)
    BITWISE_OR      reduce using rule 99 (function_call -> other_function .)
    BITWISE_AND     reduce using rule 99 (function_call -> other_function .)
    SHL             reduce using rule 99 (function_call -> other_function .)
    SHR             reduce using rule 99 (function_call -> other_function .)
    PLUS            reduce using rule 99 (function_call -> other_function .)
    MINUS           reduce using rule 99 (function_call -> other_function .)
    TIMES           reduce using rule 99 (function_call -> other_function .)
    DIV             reduce using rule 99 (function_call -> other_function .)
    MOD             reduce using rule 99 (function_call -> other_function .)
    BITWISE_XOR     reduce using rule 99 (function_call -> other_function .)
    NOT             reduce using rule 99 (function_call -> other_function .)
    LOGICAL_NOT     reduce using rule 99 (function_call -> other_function .)
    IN              reduce using rule 99 (function_call -> other_function .)
    BETWEEN         reduce using rule 99 (function_call -> other_function .)
    LIKE            reduce using rule 99 (function_call -> other_function .)
    REGEXP          reduce using rule 99 (function_call -> other_function .)
    IS              reduce using rule 99 (function_call -> other_function .)
    NULL_SAFE       reduce using rule 99 (function_call -> other_function .)
    EQ              reduce using rule 99 (function_call -> other_function .)
    GE              reduce using rule 99 (function_call -> other_function .)
    GT              reduce using rule 99 (function_call -> other_function .)
    LE              reduce using rule 99 (function_call -> other_function .)
    LT              reduce using rule 99 (function_call -> other_function .)
    NE              reduce using rule 99 (function_call -> other_function .)
    )               reduce using rule 99 (function_call -> other_function .)
    OR              reduce using rule 99 (function_call -> other_function .)
    AND             reduce using rule 99 (function_call -> other_function .)
    XOR             reduce using rule 99 (function_call -> other_function .)
    AS              reduce using rule 99 (function_call -> other_function .)
    IDENT           reduce using rule 99 (function_call -> other_function .)
    ,               reduce using rule 99 (function_call -> other_function .)
    INTO            reduce using rule 99 (function_call -> other_function .)
    FROM            reduce using rule 99 (function_call -> other_function .)
    ORDER           reduce using rule 99 (function_call -> other_function .)
    FOR             reduce using rule 99 (function_call -> other_function .)
    LOCK            reduce using rule 99 (function_call -> other_function .)
    LIMIT           reduce using rule 99 (function_call -> other_function .)
    UNION           reduce using rule 99 (function_call -> other_function .)
    DELIM           reduce using rule 99 (function_call -> other_function .)
    ;               reduce using rule 99 (function_call -> other_function .)
    ON              reduce using rule 99 (function_call -> other_function .)
    USING           reduce using rule 99 (function_call -> other_function .)
    ASC             reduce using rule 99 (function_call -> other_function .)
    DESC            reduce using rule 99 (function_call -> other_function .)
    WHERE           reduce using rule 99 (function_call -> other_function .)
    GROUP           reduce using rule 99 (function_call -> other_function .)
    HAVING          reduce using rule 99 (function_call -> other_function .)
    JOIN            reduce using rule 99 (function_call -> other_function .)
    INNER           reduce using rule 99 (function_call -> other_function .)
    CROSS           reduce using rule 99 (function_call -> other_function .)
    LEFT            reduce using rule 99 (function_call -> other_function .)
    RIGHT           reduce using rule 99 (function_call -> other_function .)
    NATURAL         reduce using rule 99 (function_call -> other_function .)
    WITH            reduce using rule 99 (function_call -> other_function .)
    DO              reduce using rule 99 (function_call -> other_function .)
    WHEN            reduce using rule 99 (function_call -> other_function .)
    THEN            reduce using rule 99 (function_call -> other_function .)
    END             reduce using rule 99 (function_call -> other_function .)
    ESCAPE          reduce using rule 99 (function_call -> other_function .)


state 155

    (431) select_item -> select_item2 . select_alias
    (425) select_alias -> .
    (426) select_alias -> . AS IDENT
    (427) select_alias -> . IDENT

    ,               reduce using rule 425 (select_alias -> .)
    INTO            reduce using rule 425 (select_alias -> .)
    FROM            reduce using rule 425 (select_alias -> .)
    ORDER           reduce using rule 425 (select_alias -> .)
    FOR             reduce using rule 425 (select_alias -> .)
    LOCK            reduce using rule 425 (select_alias -> .)
    LIMIT           reduce using rule 425 (select_alias -> .)
    UNION           reduce using rule 425 (select_alias -> .)
    DELIM           reduce using rule 425 (select_alias -> .)
    ;               reduce using rule 425 (select_alias -> .)
    )               reduce using rule 425 (select_alias -> .)
    ON              reduce using rule 425 (select_alias -> .)
    AS              shift and go to state 264
    IDENT           shift and go to state 265

    select_alias                   shift and go to state 263

state 156

    (430) select_item2 -> expr .
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    AS              reduce using rule 430 (select_item2 -> expr .)
    IDENT           reduce using rule 430 (select_item2 -> expr .)
    ,               reduce using rule 430 (select_item2 -> expr .)
    INTO            reduce using rule 430 (select_item2 -> expr .)
    FROM            reduce using rule 430 (select_item2 -> expr .)
    ORDER           reduce using rule 430 (select_item2 -> expr .)
    FOR             reduce using rule 430 (select_item2 -> expr .)
    LOCK            reduce using rule 430 (select_item2 -> expr .)
    LIMIT           reduce using rule 430 (select_item2 -> expr .)
    UNION           reduce using rule 430 (select_item2 -> expr .)
    DELIM           reduce using rule 430 (select_item2 -> expr .)
    ;               reduce using rule 430 (select_item2 -> expr .)
    )               reduce using rule 430 (select_item2 -> expr .)
    ON              reduce using rule 430 (select_item2 -> expr .)
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 157

    (87) min_function -> MIN . ( opt_distinct expr )

    (               shift and go to state 269


state 158

    (59) simple_expr -> ( . subquery )
    (61) simple_expr -> ( . expr_list )
    (58) subquery -> . select
    (31) expr_list -> . expr
    (32) expr_list -> . expr , expr_list
    (523) select -> . top_level_select_init
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (522) top_level_select_init -> . SELECT select_init2
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    SELECT          shift and go to state 24
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    expr_list                      shift and go to state 270
    function_call                  shift and go to state 128
    bit_function                   shift and go to state 153
    select                         shift and go to state 271
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    top_level_select_init          shift and go to state 27
    average_function               shift and go to state 130
    other_function                 shift and go to state 154
    expr                           shift and go to state 272
    simple_expr                    shift and go to state 131
    subquery                       shift and go to state 273
    max_function                   shift and go to state 149

state 159

    (11) expr -> NOT . expr
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 274
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 160

    (432) select_item_list -> select_item .
    (433) select_item_list -> select_item . , select_item_list

    INTO            reduce using rule 432 (select_item_list -> select_item .)
    FROM            reduce using rule 432 (select_item_list -> select_item .)
    ORDER           reduce using rule 432 (select_item_list -> select_item .)
    FOR             reduce using rule 432 (select_item_list -> select_item .)
    LOCK            reduce using rule 432 (select_item_list -> select_item .)
    LIMIT           reduce using rule 432 (select_item_list -> select_item .)
    UNION           reduce using rule 432 (select_item_list -> select_item .)
    DELIM           reduce using rule 432 (select_item_list -> select_item .)
    ;               reduce using rule 432 (select_item_list -> select_item .)
    )               reduce using rule 432 (select_item_list -> select_item .)
    ON              reduce using rule 432 (select_item_list -> select_item .)
    ,               shift and go to state 275


state 161

    (77) average_function -> AVG . ( opt_distinct expr )

    (               shift and go to state 276


state 162

    (298) union_list -> UNION . union_option union_select_init
    (282) union_option -> .
    (283) union_option -> . DISTINCT
    (284) union_option -> . ALL

    SELECT          reduce using rule 282 (union_option -> .)
    (               reduce using rule 282 (union_option -> .)
    DISTINCT        shift and go to state 278
    ALL             shift and go to state 277

    union_option                   shift and go to state 279

state 163

    (300) union_clause -> union_list .

    DELIM           reduce using rule 300 (union_clause -> union_list .)
    ;               reduce using rule 300 (union_clause -> union_list .)
    ON              reduce using rule 300 (union_clause -> union_list .)
    )               reduce using rule 300 (union_clause -> union_list .)


state 164

    (301) select_init2 -> select_part2 union_clause .

    DELIM           reduce using rule 301 (select_init2 -> select_part2 union_clause .)
    ;               reduce using rule 301 (select_init2 -> select_part2 union_clause .)
    )               reduce using rule 301 (select_init2 -> select_part2 union_clause .)
    ON              reduce using rule 301 (select_init2 -> select_part2 union_clause .)


state 165

    (331) ident_list -> IDENT , . ident_list
    (330) ident_list -> . IDENT
    (331) ident_list -> . IDENT , ident_list

    IDENT           shift and go to state 86

    ident_list                     shift and go to state 280

state 166

    (334) update -> UPDATE ident_list SET . key_values where rows_limit
    (326) key_values -> . key_value
    (327) key_values -> . key_value , key_values
    (325) key_value -> . IDENT EQ expr_or_default

    IDENT           shift and go to state 282

    key_value                      shift and go to state 281
    key_values                     shift and go to state 283

state 167

    (541) start_transaction -> START TRANSACTION opt_with_consistent_snapshot .

    DELIM           reduce using rule 541 (start_transaction -> START TRANSACTION opt_with_consistent_snapshot .)
    ;               reduce using rule 541 (start_transaction -> START TRANSACTION opt_with_consistent_snapshot .)


state 168

    (540) opt_with_consistent_snapshot -> WITH . CONSISTENT SNAPSHOT

    CONSISTENT      shift and go to state 284


state 169

    (544) opt_chain -> AND . NO CHAIN
    (545) opt_chain -> AND . CHAIN

    NO              shift and go to state 286
    CHAIN           shift and go to state 285


state 170

    (549) commit -> COMMIT opt_work opt_chain . opt_release
    (546) opt_release -> .
    (547) opt_release -> . NO RELEASE
    (548) opt_release -> . RELEASE

    DELIM           reduce using rule 546 (opt_release -> .)
    ;               reduce using rule 546 (opt_release -> .)
    NO              shift and go to state 287
    RELEASE         shift and go to state 289

    opt_release                    shift and go to state 288

state 171

    (550) rollback -> ROLLBACK opt_work opt_chain . opt_release
    (546) opt_release -> .
    (547) opt_release -> . NO RELEASE
    (548) opt_release -> . RELEASE

    DELIM           reduce using rule 546 (opt_release -> .)
    ;               reduce using rule 546 (opt_release -> .)
    NO              shift and go to state 287
    RELEASE         shift and go to state 289

    opt_release                    shift and go to state 290

state 172

    (344) rename_tables -> ident_to_ident , . rename_tables
    (343) rename_tables -> . ident_to_ident
    (344) rename_tables -> . ident_to_ident , rename_tables
    (342) ident_to_ident -> . IDENT TO IDENT

    IDENT           shift and go to state 93

    ident_to_ident                 shift and go to state 91
    rename_tables                  shift and go to state 291

state 173

    (342) ident_to_ident -> IDENT TO . IDENT

    IDENT           shift and go to state 292


state 174

    (340) delete -> DELETE delete_options FROM IDENT . where rows_limit
    (328) where -> .
    (329) where -> . WHERE expr

    LIMIT           reduce using rule 328 (where -> .)
    DELIM           reduce using rule 328 (where -> .)
    ;               reduce using rule 328 (where -> .)
    WHERE           shift and go to state 293

    where                          shift and go to state 294

state 175

    (341) delete -> DELETE delete_options ident_list FROM . where
    (328) where -> .
    (329) where -> . WHERE expr

    DELIM           reduce using rule 328 (where -> .)
    ;               reduce using rule 328 (where -> .)
    WHERE           shift and go to state 293

    where                          shift and go to state 295

state 176

    (237) alter_rename_table -> RENAME . ignore_to_or_as IDENT
    (113) ignore_to_or_as -> . TO
    (114) ignore_to_or_as -> . AS
    (115) ignore_to_or_as -> .

    TO              shift and go to state 296
    AS              shift and go to state 298
    IDENT           reduce using rule 115 (ignore_to_or_as -> .)

    ignore_to_or_as                shift and go to state 297

state 177

    (242) alter_specification -> change_default .

    ,               reduce using rule 242 (alter_specification -> change_default .)
    DELIM           reduce using rule 242 (alter_specification -> change_default .)
    ;               reduce using rule 242 (alter_specification -> change_default .)


state 178

    (245) alter_specification -> remove_index .

    ,               reduce using rule 245 (alter_specification -> remove_index .)
    DELIM           reduce using rule 245 (alter_specification -> remove_index .)
    ;               reduce using rule 245 (alter_specification -> remove_index .)


state 179

    (231) change_column -> MODIFY . ignore_column column_name column_statement position_opt
    (111) ignore_column -> . COLUMN
    (112) ignore_column -> .

    COLUMN          shift and go to state 299
    IDENT           reduce using rule 112 (ignore_column -> .)

    ignore_column                  shift and go to state 300

state 180

    (232) change_default -> ALTER . ignore_column IDENT SET DEFAULT literal
    (233) change_default -> ALTER . ignore_column IDENT DROP DEFAULT
    (111) ignore_column -> . COLUMN
    (112) ignore_column -> .

    COLUMN          shift and go to state 299
    IDENT           reduce using rule 112 (ignore_column -> .)

    ignore_column                  shift and go to state 301

state 181

    (230) change_column -> CHANGE . ignore_column column_name column_name column_statement position_opt
    (111) ignore_column -> . COLUMN
    (112) ignore_column -> .

    COLUMN          shift and go to state 299
    IDENT           reduce using rule 112 (ignore_column -> .)

    ignore_column                  shift and go to state 302

state 182

    (234) remove_column -> DROP . ignore_column IDENT
    (235) remove_primary_key -> DROP . PRIMARY KEY
    (236) remove_index -> DROP . check_index_or_key IDENT
    (111) ignore_column -> . COLUMN
    (112) ignore_column -> .
    (116) check_index_or_key -> . INDEX
    (117) check_index_or_key -> . KEY

    PRIMARY         shift and go to state 305
    COLUMN          shift and go to state 299
    IDENT           reduce using rule 112 (ignore_column -> .)
    INDEX           shift and go to state 303
    KEY             shift and go to state 306

    check_index_or_key             shift and go to state 304
    ignore_column                  shift and go to state 307

state 183

    (238) alter_specification -> add_column .

    ,               reduce using rule 238 (alter_specification -> add_column .)
    DELIM           reduce using rule 238 (alter_specification -> add_column .)
    ;               reduce using rule 238 (alter_specification -> add_column .)


state 184

    (247) alter_specifications -> alter_specification .
    (248) alter_specifications -> alter_specification . , alter_specifications

    DELIM           reduce using rule 247 (alter_specifications -> alter_specification .)
    ;               reduce using rule 247 (alter_specifications -> alter_specification .)
    ,               shift and go to state 308


state 185

    (241) alter_specification -> change_column .

    ,               reduce using rule 241 (alter_specification -> change_column .)
    DELIM           reduce using rule 241 (alter_specification -> change_column .)
    ;               reduce using rule 241 (alter_specification -> change_column .)


state 186

    (226) add_column -> ADD . ignore_column column_name column_statement position_opt
    (227) add_index -> ADD . check_index_or_key index_name_opt ( column_names )
    (228) add_index -> ADD . constraint_opt UNIQUE ignore_index_or_key index_name_opt ( column_names )
    (229) add_primary_key -> ADD . constraint_opt PRIMARY KEY ( column_names )
    (111) ignore_column -> . COLUMN
    (112) ignore_column -> .
    (116) check_index_or_key -> . INDEX
    (117) check_index_or_key -> . KEY
    (118) constraint_opt -> .
    (119) constraint_opt -> . CONSTRAINT IDENT

    COLUMN          shift and go to state 299
    IDENT           reduce using rule 112 (ignore_column -> .)
    INDEX           shift and go to state 303
    KEY             shift and go to state 306
    UNIQUE          reduce using rule 118 (constraint_opt -> .)
    PRIMARY         reduce using rule 118 (constraint_opt -> .)
    CONSTRAINT      shift and go to state 309

    check_index_or_key             shift and go to state 310
    constraint_opt                 shift and go to state 311
    ignore_column                  shift and go to state 312

state 187

    (249) alter_table -> ALTER TABLE IDENT alter_specifications .

    DELIM           reduce using rule 249 (alter_table -> ALTER TABLE IDENT alter_specifications .)
    ;               reduce using rule 249 (alter_table -> ALTER TABLE IDENT alter_specifications .)


state 188

    (246) alter_specification -> alter_rename_table .

    ,               reduce using rule 246 (alter_specification -> alter_rename_table .)
    DELIM           reduce using rule 246 (alter_specification -> alter_rename_table .)
    ;               reduce using rule 246 (alter_specification -> alter_rename_table .)


state 189

    (243) alter_specification -> remove_column .

    ,               reduce using rule 243 (alter_specification -> remove_column .)
    DELIM           reduce using rule 243 (alter_specification -> remove_column .)
    ;               reduce using rule 243 (alter_specification -> remove_column .)


state 190

    (244) alter_specification -> remove_primary_key .

    ,               reduce using rule 244 (alter_specification -> remove_primary_key .)
    DELIM           reduce using rule 244 (alter_specification -> remove_primary_key .)
    ;               reduce using rule 244 (alter_specification -> remove_primary_key .)


state 191

    (240) alter_specification -> add_primary_key .

    ,               reduce using rule 240 (alter_specification -> add_primary_key .)
    DELIM           reduce using rule 240 (alter_specification -> add_primary_key .)
    ;               reduce using rule 240 (alter_specification -> add_primary_key .)


state 192

    (239) alter_specification -> add_index .

    ,               reduce using rule 239 (alter_specification -> add_index .)
    DELIM           reduce using rule 239 (alter_specification -> add_index .)
    ;               reduce using rule 239 (alter_specification -> add_index .)


state 193

    (319) insert -> INSERT insert_lock_option opt_ignore insert2 . insert_field_spec opt_insert_update
    (304) insert_field_spec -> . insert_values
    (305) insert_field_spec -> . ( ) insert_values
    (306) insert_field_spec -> . ( fields ) insert_values
    (310) insert_field_spec -> . SET ident_eq_list
    (274) insert_values -> . VALUES values_list
    (275) insert_values -> . VALUE values_list
    (302) insert_values -> . create_select union_clause
    (303) insert_values -> . ( create_select ) union_opt
    (281) create_select -> . SELECT select_options select_item_list opt_select_from

    (               shift and go to state 216
    SET             shift and go to state 210
    VALUES          shift and go to state 214
    VALUE           shift and go to state 212
    SELECT          shift and go to state 217

    insert_field_spec              shift and go to state 313
    insert_values                  shift and go to state 213
    create_select                  shift and go to state 215

state 194

    (526) variable_assignment -> SESSION IDENT EQ . expr
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 314
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 195

    (528) variable_assignments -> variable_assignment , variable_assignments .

    DELIM           reduce using rule 528 (variable_assignments -> variable_assignment , variable_assignments .)
    ;               reduce using rule 528 (variable_assignments -> variable_assignment , variable_assignments .)


state 196

    (55) simple_expr -> IDENT .
    (89) other_function -> IDENT . ( )
    (90) other_function -> IDENT . ( expr_list )

    BITWISE_OR      reduce using rule 55 (simple_expr -> IDENT .)
    BITWISE_AND     reduce using rule 55 (simple_expr -> IDENT .)
    SHL             reduce using rule 55 (simple_expr -> IDENT .)
    SHR             reduce using rule 55 (simple_expr -> IDENT .)
    PLUS            reduce using rule 55 (simple_expr -> IDENT .)
    MINUS           reduce using rule 55 (simple_expr -> IDENT .)
    TIMES           reduce using rule 55 (simple_expr -> IDENT .)
    DIV             reduce using rule 55 (simple_expr -> IDENT .)
    MOD             reduce using rule 55 (simple_expr -> IDENT .)
    BITWISE_XOR     reduce using rule 55 (simple_expr -> IDENT .)
    SOUNDS          reduce using rule 55 (simple_expr -> IDENT .)
    NOT             reduce using rule 55 (simple_expr -> IDENT .)
    LOGICAL_NOT     reduce using rule 55 (simple_expr -> IDENT .)
    IN              reduce using rule 55 (simple_expr -> IDENT .)
    BETWEEN         reduce using rule 55 (simple_expr -> IDENT .)
    LIKE            reduce using rule 55 (simple_expr -> IDENT .)
    REGEXP          reduce using rule 55 (simple_expr -> IDENT .)
    IS              reduce using rule 55 (simple_expr -> IDENT .)
    NULL_SAFE       reduce using rule 55 (simple_expr -> IDENT .)
    EQ              reduce using rule 55 (simple_expr -> IDENT .)
    GE              reduce using rule 55 (simple_expr -> IDENT .)
    GT              reduce using rule 55 (simple_expr -> IDENT .)
    LE              reduce using rule 55 (simple_expr -> IDENT .)
    LT              reduce using rule 55 (simple_expr -> IDENT .)
    NE              reduce using rule 55 (simple_expr -> IDENT .)
    OR              reduce using rule 55 (simple_expr -> IDENT .)
    AND             reduce using rule 55 (simple_expr -> IDENT .)
    XOR             reduce using rule 55 (simple_expr -> IDENT .)
    AS              reduce using rule 55 (simple_expr -> IDENT .)
    IDENT           reduce using rule 55 (simple_expr -> IDENT .)
    ,               reduce using rule 55 (simple_expr -> IDENT .)
    INTO            reduce using rule 55 (simple_expr -> IDENT .)
    FROM            reduce using rule 55 (simple_expr -> IDENT .)
    ORDER           reduce using rule 55 (simple_expr -> IDENT .)
    FOR             reduce using rule 55 (simple_expr -> IDENT .)
    LOCK            reduce using rule 55 (simple_expr -> IDENT .)
    LIMIT           reduce using rule 55 (simple_expr -> IDENT .)
    UNION           reduce using rule 55 (simple_expr -> IDENT .)
    DELIM           reduce using rule 55 (simple_expr -> IDENT .)
    ;               reduce using rule 55 (simple_expr -> IDENT .)
    )               reduce using rule 55 (simple_expr -> IDENT .)
    ON              reduce using rule 55 (simple_expr -> IDENT .)
    USING           reduce using rule 55 (simple_expr -> IDENT .)
    ASC             reduce using rule 55 (simple_expr -> IDENT .)
    DESC            reduce using rule 55 (simple_expr -> IDENT .)
    WHERE           reduce using rule 55 (simple_expr -> IDENT .)
    GROUP           reduce using rule 55 (simple_expr -> IDENT .)
    HAVING          reduce using rule 55 (simple_expr -> IDENT .)
    JOIN            reduce using rule 55 (simple_expr -> IDENT .)
    INNER           reduce using rule 55 (simple_expr -> IDENT .)
    CROSS           reduce using rule 55 (simple_expr -> IDENT .)
    LEFT            reduce using rule 55 (simple_expr -> IDENT .)
    RIGHT           reduce using rule 55 (simple_expr -> IDENT .)
    NATURAL         reduce using rule 55 (simple_expr -> IDENT .)
    WITH            reduce using rule 55 (simple_expr -> IDENT .)
    DO              reduce using rule 55 (simple_expr -> IDENT .)
    WHEN            reduce using rule 55 (simple_expr -> IDENT .)
    THEN            reduce using rule 55 (simple_expr -> IDENT .)
    END             reduce using rule 55 (simple_expr -> IDENT .)
    ESCAPE          reduce using rule 55 (simple_expr -> IDENT .)
    (               shift and go to state 259


state 197

    (524) variable_assignment -> IDENT EQ expr .
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    ,               reduce using rule 524 (variable_assignment -> IDENT EQ expr .)
    DELIM           reduce using rule 524 (variable_assignment -> IDENT EQ expr .)
    ;               reduce using rule 524 (variable_assignment -> IDENT EQ expr .)
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 198

    (525) variable_assignment -> GLOBAL IDENT EQ . expr
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 315
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 199

    (213) create_table -> CREATE TABLE if_not_exists IDENT . ( create_statements ) table_options_opt

    (               shift and go to state 316


state 200

    (212) if_not_exists -> IF NOT . EXISTS

    EXISTS          shift and go to state 317


state 201

    (535) create_index -> CREATE unique_opt INDEX IDENT . ON IDENT ( ident_list )

    ON              shift and go to state 318


state 202

    (417) trigger_time -> AFTER .

    INSERT          reduce using rule 417 (trigger_time -> AFTER .)
    UPDATE          reduce using rule 417 (trigger_time -> AFTER .)
    DELETE          reduce using rule 417 (trigger_time -> AFTER .)


state 203

    (418) create_trigger -> CREATE TRIGGER IDENT trigger_time . trigger_event ON IDENT FOR EACH ROW sp_proc_stmt
    (413) trigger_event -> . INSERT
    (414) trigger_event -> . UPDATE
    (415) trigger_event -> . DELETE

    INSERT          shift and go to state 319
    UPDATE          shift and go to state 320
    DELETE          shift and go to state 321

    trigger_event                  shift and go to state 322

state 204

    (416) trigger_time -> BEFORE .

    INSERT          reduce using rule 416 (trigger_time -> BEFORE .)
    UPDATE          reduce using rule 416 (trigger_time -> BEFORE .)
    DELETE          reduce using rule 416 (trigger_time -> BEFORE .)


state 205

    (530) create_view -> CREATE VIEW IDENT AS . select
    (523) select -> . top_level_select_init
    (522) top_level_select_init -> . SELECT select_init2

    SELECT          shift and go to state 24

    top_level_select_init          shift and go to state 27
    select                         shift and go to state 323

state 206

    (221) drop_table -> DROP temporary TABLE if_exists . ident_list opt_restrict_cascade
    (330) ident_list -> . IDENT
    (331) ident_list -> . IDENT , ident_list

    IDENT           shift and go to state 86

    ident_list                     shift and go to state 324

state 207

    (531) drop_trigger -> DROP TRIGGER if_exists IDENT .

    DELIM           reduce using rule 531 (drop_trigger -> DROP TRIGGER if_exists IDENT .)
    ;               reduce using rule 531 (drop_trigger -> DROP TRIGGER if_exists IDENT .)


state 208

    (217) if_exists -> IF EXISTS .

    IDENT           reduce using rule 217 (if_exists -> IF EXISTS .)


state 209

    (536) drop_view -> DROP VIEW if_exists ident_list . opt_restrict_cascade
    (218) opt_restrict_cascade -> .
    (219) opt_restrict_cascade -> . RESTRICT
    (220) opt_restrict_cascade -> . CASCADE

    DELIM           reduce using rule 218 (opt_restrict_cascade -> .)
    ;               reduce using rule 218 (opt_restrict_cascade -> .)
    RESTRICT        shift and go to state 326
    CASCADE         shift and go to state 327

    opt_restrict_cascade           shift and go to state 325

state 210

    (310) insert_field_spec -> SET . ident_eq_list
    (308) ident_eq_list -> . ident_eq_value
    (309) ident_eq_list -> . ident_eq_value , ident_eq_list
    (307) ident_eq_value -> . simple_ident_nospvar equal expr_or_default
    (258) simple_ident_nospvar -> . IDENT

    IDENT           shift and go to state 330

    simple_ident_nospvar           shift and go to state 329
    ident_eq_list                  shift and go to state 328
    ident_eq_value                 shift and go to state 331

state 211

    (324) replace -> REPLACE replace_lock_option insert2 insert_field_spec .

    DELIM           reduce using rule 324 (replace -> REPLACE replace_lock_option insert2 insert_field_spec .)
    ;               reduce using rule 324 (replace -> REPLACE replace_lock_option insert2 insert_field_spec .)


state 212

    (275) insert_values -> VALUE . values_list
    (272) values_list -> . no_braces
    (273) values_list -> . no_braces , values_list
    (271) no_braces -> . ( opt_values )

    (               shift and go to state 333

    no_braces                      shift and go to state 332
    values_list                    shift and go to state 334

state 213

    (304) insert_field_spec -> insert_values .

    DELIM           reduce using rule 304 (insert_field_spec -> insert_values .)
    ;               reduce using rule 304 (insert_field_spec -> insert_values .)
    ON              reduce using rule 304 (insert_field_spec -> insert_values .)


state 214

    (274) insert_values -> VALUES . values_list
    (272) values_list -> . no_braces
    (273) values_list -> . no_braces , values_list
    (271) no_braces -> . ( opt_values )

    (               shift and go to state 333

    no_braces                      shift and go to state 332
    values_list                    shift and go to state 335

state 215

    (302) insert_values -> create_select . union_clause
    (299) union_clause -> .
    (300) union_clause -> . union_list
    (298) union_list -> . UNION union_option union_select_init

    DELIM           reduce using rule 299 (union_clause -> .)
    ;               reduce using rule 299 (union_clause -> .)
    ON              reduce using rule 299 (union_clause -> .)
    UNION           shift and go to state 162

    union_list                     shift and go to state 163
    union_clause                   shift and go to state 336

state 216

    (305) insert_field_spec -> ( . ) insert_values
    (306) insert_field_spec -> ( . fields ) insert_values
    (303) insert_values -> ( . create_select ) union_opt
    (265) fields -> . insert_ident
    (266) fields -> . insert_ident , fields
    (281) create_select -> . SELECT select_options select_item_list opt_select_from
    (263) insert_ident -> . simple_ident_nospvar
    (264) insert_ident -> . table_wild
    (258) simple_ident_nospvar -> . IDENT
    (428) table_wild -> . IDENT *

    )               shift and go to state 338
    SELECT          shift and go to state 217
    IDENT           shift and go to state 337

    fields                         shift and go to state 342
    simple_ident_nospvar           shift and go to state 339
    insert_ident                   shift and go to state 340
    create_select                  shift and go to state 341
    table_wild                     shift and go to state 343

state 217

    (281) create_select -> SELECT . select_options select_item_list opt_select_from
    (419) select_options -> .
    (420) select_options -> . select_option_list
    (423) select_option_list -> . select_option
    (424) select_option_list -> . select_option select_option_list
    (421) select_option -> . DISTINCT
    (422) select_option -> . ALL

    *               reduce using rule 419 (select_options -> .)
    IDENT           reduce using rule 419 (select_options -> .)
    NOT             reduce using rule 419 (select_options -> .)
    @               reduce using rule 419 (select_options -> .)
    (               reduce using rule 419 (select_options -> .)
    EXISTS          reduce using rule 419 (select_options -> .)
    ROW             reduce using rule 419 (select_options -> .)
    STRING          reduce using rule 419 (select_options -> .)
    NUMBER          reduce using rule 419 (select_options -> .)
    FLOAT_LIT       reduce using rule 419 (select_options -> .)
    CONVERT         reduce using rule 419 (select_options -> .)
    CAST            reduce using rule 419 (select_options -> .)
    AVG             reduce using rule 419 (select_options -> .)
    BIT_AND         reduce using rule 419 (select_options -> .)
    BIT_OR          reduce using rule 419 (select_options -> .)
    BIT_XOR         reduce using rule 419 (select_options -> .)
    COUNT           reduce using rule 419 (select_options -> .)
    MAX             reduce using rule 419 (select_options -> .)
    MIN             reduce using rule 419 (select_options -> .)
    SUM             reduce using rule 419 (select_options -> .)
    DISTINCT        shift and go to state 81
    ALL             shift and go to state 79

    select_option                  shift and go to state 80
    select_options                 shift and go to state 344
    select_option_list             shift and go to state 83

state 218

    (311) insert2 -> INTO insert_table .

    (               reduce using rule 311 (insert2 -> INTO insert_table .)
    SET             reduce using rule 311 (insert2 -> INTO insert_table .)
    VALUES          reduce using rule 311 (insert2 -> INTO insert_table .)
    VALUE           reduce using rule 311 (insert2 -> INTO insert_table .)
    SELECT          reduce using rule 311 (insert2 -> INTO insert_table .)


state 219

    (78) bit_function -> BIT_AND ( . expr )
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 345
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 220

    (83) count_function -> COUNT ( . opt_all * )
    (84) count_function -> COUNT ( . expr )
    (85) count_function -> COUNT ( . DISTINCT expr_list )
    (81) opt_all -> . ALL
    (82) opt_all -> .
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    DISTINCT        shift and go to state 349
    ALL             shift and go to state 347
    *               reduce using rule 82 (opt_all -> .)
    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    opt_all                        shift and go to state 346
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 348
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 221

    (63) convert_function -> CONVERT ( . expr USING IDENT )
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 350
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 222

    (56) simple_expr -> @ IDENT .

    BITWISE_OR      reduce using rule 56 (simple_expr -> @ IDENT .)
    BITWISE_AND     reduce using rule 56 (simple_expr -> @ IDENT .)
    SHL             reduce using rule 56 (simple_expr -> @ IDENT .)
    SHR             reduce using rule 56 (simple_expr -> @ IDENT .)
    PLUS            reduce using rule 56 (simple_expr -> @ IDENT .)
    MINUS           reduce using rule 56 (simple_expr -> @ IDENT .)
    TIMES           reduce using rule 56 (simple_expr -> @ IDENT .)
    DIV             reduce using rule 56 (simple_expr -> @ IDENT .)
    MOD             reduce using rule 56 (simple_expr -> @ IDENT .)
    BITWISE_XOR     reduce using rule 56 (simple_expr -> @ IDENT .)
    SOUNDS          reduce using rule 56 (simple_expr -> @ IDENT .)
    NOT             reduce using rule 56 (simple_expr -> @ IDENT .)
    LOGICAL_NOT     reduce using rule 56 (simple_expr -> @ IDENT .)
    IN              reduce using rule 56 (simple_expr -> @ IDENT .)
    BETWEEN         reduce using rule 56 (simple_expr -> @ IDENT .)
    LIKE            reduce using rule 56 (simple_expr -> @ IDENT .)
    REGEXP          reduce using rule 56 (simple_expr -> @ IDENT .)
    IS              reduce using rule 56 (simple_expr -> @ IDENT .)
    NULL_SAFE       reduce using rule 56 (simple_expr -> @ IDENT .)
    EQ              reduce using rule 56 (simple_expr -> @ IDENT .)
    GE              reduce using rule 56 (simple_expr -> @ IDENT .)
    GT              reduce using rule 56 (simple_expr -> @ IDENT .)
    LE              reduce using rule 56 (simple_expr -> @ IDENT .)
    LT              reduce using rule 56 (simple_expr -> @ IDENT .)
    NE              reduce using rule 56 (simple_expr -> @ IDENT .)
    OR              reduce using rule 56 (simple_expr -> @ IDENT .)
    AND             reduce using rule 56 (simple_expr -> @ IDENT .)
    XOR             reduce using rule 56 (simple_expr -> @ IDENT .)
    AS              reduce using rule 56 (simple_expr -> @ IDENT .)
    IDENT           reduce using rule 56 (simple_expr -> @ IDENT .)
    ,               reduce using rule 56 (simple_expr -> @ IDENT .)
    INTO            reduce using rule 56 (simple_expr -> @ IDENT .)
    FROM            reduce using rule 56 (simple_expr -> @ IDENT .)
    ORDER           reduce using rule 56 (simple_expr -> @ IDENT .)
    FOR             reduce using rule 56 (simple_expr -> @ IDENT .)
    LOCK            reduce using rule 56 (simple_expr -> @ IDENT .)
    LIMIT           reduce using rule 56 (simple_expr -> @ IDENT .)
    UNION           reduce using rule 56 (simple_expr -> @ IDENT .)
    DELIM           reduce using rule 56 (simple_expr -> @ IDENT .)
    ;               reduce using rule 56 (simple_expr -> @ IDENT .)
    )               reduce using rule 56 (simple_expr -> @ IDENT .)
    ON              reduce using rule 56 (simple_expr -> @ IDENT .)
    USING           reduce using rule 56 (simple_expr -> @ IDENT .)
    ASC             reduce using rule 56 (simple_expr -> @ IDENT .)
    DESC            reduce using rule 56 (simple_expr -> @ IDENT .)
    WHERE           reduce using rule 56 (simple_expr -> @ IDENT .)
    GROUP           reduce using rule 56 (simple_expr -> @ IDENT .)
    HAVING          reduce using rule 56 (simple_expr -> @ IDENT .)
    JOIN            reduce using rule 56 (simple_expr -> @ IDENT .)
    INNER           reduce using rule 56 (simple_expr -> @ IDENT .)
    CROSS           reduce using rule 56 (simple_expr -> @ IDENT .)
    LEFT            reduce using rule 56 (simple_expr -> @ IDENT .)
    RIGHT           reduce using rule 56 (simple_expr -> @ IDENT .)
    NATURAL         reduce using rule 56 (simple_expr -> @ IDENT .)
    WITH            reduce using rule 56 (simple_expr -> @ IDENT .)
    DO              reduce using rule 56 (simple_expr -> @ IDENT .)
    WHEN            reduce using rule 56 (simple_expr -> @ IDENT .)
    THEN            reduce using rule 56 (simple_expr -> @ IDENT .)
    END             reduce using rule 56 (simple_expr -> @ IDENT .)
    ESCAPE          reduce using rule 56 (simple_expr -> @ IDENT .)


state 223

    (88) sum_function -> SUM ( . opt_distinct expr )
    (75) opt_distinct -> .
    (76) opt_distinct -> . DISTINCT

    NOT             reduce using rule 75 (opt_distinct -> .)
    IDENT           reduce using rule 75 (opt_distinct -> .)
    @               reduce using rule 75 (opt_distinct -> .)
    (               reduce using rule 75 (opt_distinct -> .)
    EXISTS          reduce using rule 75 (opt_distinct -> .)
    ROW             reduce using rule 75 (opt_distinct -> .)
    STRING          reduce using rule 75 (opt_distinct -> .)
    NUMBER          reduce using rule 75 (opt_distinct -> .)
    FLOAT_LIT       reduce using rule 75 (opt_distinct -> .)
    CONVERT         reduce using rule 75 (opt_distinct -> .)
    CAST            reduce using rule 75 (opt_distinct -> .)
    AVG             reduce using rule 75 (opt_distinct -> .)
    BIT_AND         reduce using rule 75 (opt_distinct -> .)
    BIT_OR          reduce using rule 75 (opt_distinct -> .)
    BIT_XOR         reduce using rule 75 (opt_distinct -> .)
    COUNT           reduce using rule 75 (opt_distinct -> .)
    MAX             reduce using rule 75 (opt_distinct -> .)
    MIN             reduce using rule 75 (opt_distinct -> .)
    SUM             reduce using rule 75 (opt_distinct -> .)
    DISTINCT        shift and go to state 351

    opt_distinct                   shift and go to state 352

state 224

    (517) select_from -> FROM . join_table_list where_clause group_clause having_clause opt_order_clause opt_limit_clause
    (518) select_from -> FROM . DUAL where_clause opt_limit_clause
    (504) join_table_list -> . derived_table_list
    (502) derived_table_list -> . esc_table_ref
    (503) derived_table_list -> . esc_table_ref , derived_table_list
    (501) esc_table_ref -> . table_ref
    (499) table_ref -> . table_factor
    (500) table_ref -> . join_table
    (485) table_factor -> . IDENT opt_table_alias opt_key_definition
    (498) join_table -> . table_ref join_clause table_factor opt_join_condition

    DUAL            shift and go to state 357
    IDENT           shift and go to state 356

    table_factor                   shift and go to state 353
    table_ref                      shift and go to state 354
    esc_table_ref                  shift and go to state 355
    join_table                     shift and go to state 358
    derived_table_list             shift and go to state 359
    join_table_list                shift and go to state 360

state 225

    (460) select_into -> into .
    (520) select_into -> into . select_from
    (517) select_from -> . FROM join_table_list where_clause group_clause having_clause opt_order_clause opt_limit_clause
    (518) select_from -> . FROM DUAL where_clause opt_limit_clause

    FOR             reduce using rule 460 (select_into -> into .)
    LOCK            reduce using rule 460 (select_into -> into .)
    UNION           reduce using rule 460 (select_into -> into .)
    DELIM           reduce using rule 460 (select_into -> into .)
    ;               reduce using rule 460 (select_into -> into .)
    )               reduce using rule 460 (select_into -> into .)
    ON              reduce using rule 460 (select_into -> into .)
    FROM            shift and go to state 224

    select_from                    shift and go to state 361

state 226

    (459) into -> INTO . into_destination
    (458) into_destination -> . select_var_list
    (454) select_var_list -> . select_var_ident
    (455) select_var_list -> . select_var_ident , select_var_list
    (456) select_var_ident -> . @ IDENT
    (457) select_var_ident -> . IDENT

    @               shift and go to state 362
    IDENT           shift and go to state 363

    select_var_ident               shift and go to state 366
    select_var_list                shift and go to state 365
    into_destination               shift and go to state 364

state 227

    (436) opt_order_clause -> order_clause .

    LIMIT           reduce using rule 436 (opt_order_clause -> order_clause .)
    FOR             reduce using rule 436 (opt_order_clause -> order_clause .)
    LOCK            reduce using rule 436 (opt_order_clause -> order_clause .)
    UNION           reduce using rule 436 (opt_order_clause -> order_clause .)
    DELIM           reduce using rule 436 (opt_order_clause -> order_clause .)
    ;               reduce using rule 436 (opt_order_clause -> order_clause .)
    )               reduce using rule 436 (opt_order_clause -> order_clause .)
    ON              reduce using rule 436 (opt_order_clause -> order_clause .)
    INTO            reduce using rule 436 (opt_order_clause -> order_clause .)


state 228

    (437) order_clause -> ORDER . BY order_list

    BY              shift and go to state 367


state 229

    (285) select_part2 -> select_options select_item_list select_into . select_lock_type
    (277) select_lock_type -> .
    (278) select_lock_type -> . FOR UPDATE
    (279) select_lock_type -> . LOCK IN SHARE MODE

    UNION           reduce using rule 277 (select_lock_type -> .)
    DELIM           reduce using rule 277 (select_lock_type -> .)
    ;               reduce using rule 277 (select_lock_type -> .)
    )               reduce using rule 277 (select_lock_type -> .)
    ON              reduce using rule 277 (select_lock_type -> .)
    FOR             shift and go to state 368
    LOCK            shift and go to state 369

    select_lock_type               shift and go to state 370

state 230

    (519) select_into -> select_from .
    (521) select_into -> select_from . into
    (459) into -> . INTO into_destination

    FOR             reduce using rule 519 (select_into -> select_from .)
    LOCK            reduce using rule 519 (select_into -> select_from .)
    UNION           reduce using rule 519 (select_into -> select_from .)
    DELIM           reduce using rule 519 (select_into -> select_from .)
    ;               reduce using rule 519 (select_into -> select_from .)
    )               reduce using rule 519 (select_into -> select_from .)
    ON              reduce using rule 519 (select_into -> select_from .)
    INTO            shift and go to state 226

    into                           shift and go to state 371

state 231

    (453) select_into -> opt_order_clause . opt_limit_clause
    (445) opt_limit_clause -> .
    (446) opt_limit_clause -> . limit_clause
    (447) limit_clause -> . LIMIT limit_options

    FOR             reduce using rule 445 (opt_limit_clause -> .)
    LOCK            reduce using rule 445 (opt_limit_clause -> .)
    UNION           reduce using rule 445 (opt_limit_clause -> .)
    DELIM           reduce using rule 445 (opt_limit_clause -> .)
    ;               reduce using rule 445 (opt_limit_clause -> .)
    )               reduce using rule 445 (opt_limit_clause -> .)
    ON              reduce using rule 445 (opt_limit_clause -> .)
    LIMIT           shift and go to state 372

    opt_limit_clause               shift and go to state 373
    limit_clause                   shift and go to state 374

state 232

    (80) bit_function -> BIT_XOR ( . expr )
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 375
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 233

    (74) cast_function -> CAST ( . expr AS cast_type )
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 376
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 234

    (62) simple_expr -> ROW ( . expr_list )
    (31) expr_list -> . expr
    (32) expr_list -> . expr , expr_list
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    expr_list                      shift and go to state 377
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 272
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 235

    (27) comparison_operator -> GT .

    ALL             reduce using rule 27 (comparison_operator -> GT .)
    ANY             reduce using rule 27 (comparison_operator -> GT .)
    SOME            reduce using rule 27 (comparison_operator -> GT .)
    IDENT           reduce using rule 27 (comparison_operator -> GT .)
    @               reduce using rule 27 (comparison_operator -> GT .)
    (               reduce using rule 27 (comparison_operator -> GT .)
    EXISTS          reduce using rule 27 (comparison_operator -> GT .)
    ROW             reduce using rule 27 (comparison_operator -> GT .)
    STRING          reduce using rule 27 (comparison_operator -> GT .)
    NUMBER          reduce using rule 27 (comparison_operator -> GT .)
    FLOAT_LIT       reduce using rule 27 (comparison_operator -> GT .)
    CONVERT         reduce using rule 27 (comparison_operator -> GT .)
    CAST            reduce using rule 27 (comparison_operator -> GT .)
    AVG             reduce using rule 27 (comparison_operator -> GT .)
    BIT_AND         reduce using rule 27 (comparison_operator -> GT .)
    BIT_OR          reduce using rule 27 (comparison_operator -> GT .)
    BIT_XOR         reduce using rule 27 (comparison_operator -> GT .)
    COUNT           reduce using rule 27 (comparison_operator -> GT .)
    MAX             reduce using rule 27 (comparison_operator -> GT .)
    MIN             reduce using rule 27 (comparison_operator -> GT .)
    SUM             reduce using rule 27 (comparison_operator -> GT .)


state 236

    (30) comparison_operator -> NE .

    ALL             reduce using rule 30 (comparison_operator -> NE .)
    ANY             reduce using rule 30 (comparison_operator -> NE .)
    SOME            reduce using rule 30 (comparison_operator -> NE .)
    IDENT           reduce using rule 30 (comparison_operator -> NE .)
    @               reduce using rule 30 (comparison_operator -> NE .)
    (               reduce using rule 30 (comparison_operator -> NE .)
    EXISTS          reduce using rule 30 (comparison_operator -> NE .)
    ROW             reduce using rule 30 (comparison_operator -> NE .)
    STRING          reduce using rule 30 (comparison_operator -> NE .)
    NUMBER          reduce using rule 30 (comparison_operator -> NE .)
    FLOAT_LIT       reduce using rule 30 (comparison_operator -> NE .)
    CONVERT         reduce using rule 30 (comparison_operator -> NE .)
    CAST            reduce using rule 30 (comparison_operator -> NE .)
    AVG             reduce using rule 30 (comparison_operator -> NE .)
    BIT_AND         reduce using rule 30 (comparison_operator -> NE .)
    BIT_OR          reduce using rule 30 (comparison_operator -> NE .)
    BIT_XOR         reduce using rule 30 (comparison_operator -> NE .)
    COUNT           reduce using rule 30 (comparison_operator -> NE .)
    MAX             reduce using rule 30 (comparison_operator -> NE .)
    MIN             reduce using rule 30 (comparison_operator -> NE .)
    SUM             reduce using rule 30 (comparison_operator -> NE .)


state 237

    (15) expr -> boolean_primary IS . not_opt true_false_or_unknown
    (17) boolean_primary -> boolean_primary IS . not_opt NULL
    (3) not_opt -> .
    (4) not_opt -> . NOT
    (5) not_opt -> . LOGICAL_NOT

    NULL            reduce using rule 3 (not_opt -> .)
    TRUE            reduce using rule 3 (not_opt -> .)
    FALSE           reduce using rule 3 (not_opt -> .)
    UNKNOWN         reduce using rule 3 (not_opt -> .)
    NOT             shift and go to state 255
    LOGICAL_NOT     shift and go to state 253

    not_opt                        shift and go to state 378

state 238

    (29) comparison_operator -> LT .

    ALL             reduce using rule 29 (comparison_operator -> LT .)
    ANY             reduce using rule 29 (comparison_operator -> LT .)
    SOME            reduce using rule 29 (comparison_operator -> LT .)
    IDENT           reduce using rule 29 (comparison_operator -> LT .)
    @               reduce using rule 29 (comparison_operator -> LT .)
    (               reduce using rule 29 (comparison_operator -> LT .)
    EXISTS          reduce using rule 29 (comparison_operator -> LT .)
    ROW             reduce using rule 29 (comparison_operator -> LT .)
    STRING          reduce using rule 29 (comparison_operator -> LT .)
    NUMBER          reduce using rule 29 (comparison_operator -> LT .)
    FLOAT_LIT       reduce using rule 29 (comparison_operator -> LT .)
    CONVERT         reduce using rule 29 (comparison_operator -> LT .)
    CAST            reduce using rule 29 (comparison_operator -> LT .)
    AVG             reduce using rule 29 (comparison_operator -> LT .)
    BIT_AND         reduce using rule 29 (comparison_operator -> LT .)
    BIT_OR          reduce using rule 29 (comparison_operator -> LT .)
    BIT_XOR         reduce using rule 29 (comparison_operator -> LT .)
    COUNT           reduce using rule 29 (comparison_operator -> LT .)
    MAX             reduce using rule 29 (comparison_operator -> LT .)
    MIN             reduce using rule 29 (comparison_operator -> LT .)
    SUM             reduce using rule 29 (comparison_operator -> LT .)


state 239

    (26) comparison_operator -> GE .

    ALL             reduce using rule 26 (comparison_operator -> GE .)
    ANY             reduce using rule 26 (comparison_operator -> GE .)
    SOME            reduce using rule 26 (comparison_operator -> GE .)
    IDENT           reduce using rule 26 (comparison_operator -> GE .)
    @               reduce using rule 26 (comparison_operator -> GE .)
    (               reduce using rule 26 (comparison_operator -> GE .)
    EXISTS          reduce using rule 26 (comparison_operator -> GE .)
    ROW             reduce using rule 26 (comparison_operator -> GE .)
    STRING          reduce using rule 26 (comparison_operator -> GE .)
    NUMBER          reduce using rule 26 (comparison_operator -> GE .)
    FLOAT_LIT       reduce using rule 26 (comparison_operator -> GE .)
    CONVERT         reduce using rule 26 (comparison_operator -> GE .)
    CAST            reduce using rule 26 (comparison_operator -> GE .)
    AVG             reduce using rule 26 (comparison_operator -> GE .)
    BIT_AND         reduce using rule 26 (comparison_operator -> GE .)
    BIT_OR          reduce using rule 26 (comparison_operator -> GE .)
    BIT_XOR         reduce using rule 26 (comparison_operator -> GE .)
    COUNT           reduce using rule 26 (comparison_operator -> GE .)
    MAX             reduce using rule 26 (comparison_operator -> GE .)
    MIN             reduce using rule 26 (comparison_operator -> GE .)
    SUM             reduce using rule 26 (comparison_operator -> GE .)


state 240

    (19) boolean_primary -> boolean_primary comparison_operator . predicate
    (23) boolean_primary -> boolean_primary comparison_operator . all_or_any ( subquery )
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (20) all_or_any -> . ALL
    (21) all_or_any -> . ANY
    (22) all_or_any -> . SOME
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    ALL             shift and go to state 381
    ANY             shift and go to state 383
    SOME            shift and go to state 379
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 380
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    all_or_any                     shift and go to state 382
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 241

    (28) comparison_operator -> LE .

    ALL             reduce using rule 28 (comparison_operator -> LE .)
    ANY             reduce using rule 28 (comparison_operator -> LE .)
    SOME            reduce using rule 28 (comparison_operator -> LE .)
    IDENT           reduce using rule 28 (comparison_operator -> LE .)
    @               reduce using rule 28 (comparison_operator -> LE .)
    (               reduce using rule 28 (comparison_operator -> LE .)
    EXISTS          reduce using rule 28 (comparison_operator -> LE .)
    ROW             reduce using rule 28 (comparison_operator -> LE .)
    STRING          reduce using rule 28 (comparison_operator -> LE .)
    NUMBER          reduce using rule 28 (comparison_operator -> LE .)
    FLOAT_LIT       reduce using rule 28 (comparison_operator -> LE .)
    CONVERT         reduce using rule 28 (comparison_operator -> LE .)
    CAST            reduce using rule 28 (comparison_operator -> LE .)
    AVG             reduce using rule 28 (comparison_operator -> LE .)
    BIT_AND         reduce using rule 28 (comparison_operator -> LE .)
    BIT_OR          reduce using rule 28 (comparison_operator -> LE .)
    BIT_XOR         reduce using rule 28 (comparison_operator -> LE .)
    COUNT           reduce using rule 28 (comparison_operator -> LE .)
    MAX             reduce using rule 28 (comparison_operator -> LE .)
    MIN             reduce using rule 28 (comparison_operator -> LE .)
    SUM             reduce using rule 28 (comparison_operator -> LE .)


state 242

    (18) boolean_primary -> boolean_primary NULL_SAFE . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 384
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 243

    (25) comparison_operator -> EQ .

    ALL             reduce using rule 25 (comparison_operator -> EQ .)
    ANY             reduce using rule 25 (comparison_operator -> EQ .)
    SOME            reduce using rule 25 (comparison_operator -> EQ .)
    IDENT           reduce using rule 25 (comparison_operator -> EQ .)
    @               reduce using rule 25 (comparison_operator -> EQ .)
    (               reduce using rule 25 (comparison_operator -> EQ .)
    EXISTS          reduce using rule 25 (comparison_operator -> EQ .)
    ROW             reduce using rule 25 (comparison_operator -> EQ .)
    STRING          reduce using rule 25 (comparison_operator -> EQ .)
    NUMBER          reduce using rule 25 (comparison_operator -> EQ .)
    FLOAT_LIT       reduce using rule 25 (comparison_operator -> EQ .)
    CONVERT         reduce using rule 25 (comparison_operator -> EQ .)
    CAST            reduce using rule 25 (comparison_operator -> EQ .)
    AVG             reduce using rule 25 (comparison_operator -> EQ .)
    BIT_AND         reduce using rule 25 (comparison_operator -> EQ .)
    BIT_OR          reduce using rule 25 (comparison_operator -> EQ .)
    BIT_XOR         reduce using rule 25 (comparison_operator -> EQ .)
    COUNT           reduce using rule 25 (comparison_operator -> EQ .)
    MAX             reduce using rule 25 (comparison_operator -> EQ .)
    MIN             reduce using rule 25 (comparison_operator -> EQ .)
    SUM             reduce using rule 25 (comparison_operator -> EQ .)


state 244

    (43) bit_expr -> bit_expr SHR . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    sum_function                   shift and go to state 132
    bit_expr                       shift and go to state 385
    min_function                   shift and go to state 152
    cast_function                  shift and go to state 125
    convert_function               shift and go to state 140
    function_call                  shift and go to state 128
    simple_expr                    shift and go to state 131
    average_function               shift and go to state 130
    literal                        shift and go to state 138
    other_function                 shift and go to state 154
    count_function                 shift and go to state 139
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153

state 245

    (41) bit_expr -> bit_expr BITWISE_AND . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    sum_function                   shift and go to state 132
    bit_expr                       shift and go to state 386
    min_function                   shift and go to state 152
    cast_function                  shift and go to state 125
    convert_function               shift and go to state 140
    function_call                  shift and go to state 128
    simple_expr                    shift and go to state 131
    average_function               shift and go to state 130
    literal                        shift and go to state 138
    other_function                 shift and go to state 154
    count_function                 shift and go to state 139
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153

state 246

    (49) bit_expr -> bit_expr BITWISE_XOR . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    sum_function                   shift and go to state 132
    bit_expr                       shift and go to state 387
    min_function                   shift and go to state 152
    cast_function                  shift and go to state 125
    convert_function               shift and go to state 140
    function_call                  shift and go to state 128
    simple_expr                    shift and go to state 131
    average_function               shift and go to state 130
    literal                        shift and go to state 138
    other_function                 shift and go to state 154
    count_function                 shift and go to state 139
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153

state 247

    (36) predicate -> bit_expr SOUNDS . LIKE bit_expr

    LIKE            shift and go to state 388


state 248

    (45) bit_expr -> bit_expr MINUS . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    sum_function                   shift and go to state 132
    bit_expr                       shift and go to state 389
    min_function                   shift and go to state 152
    cast_function                  shift and go to state 125
    convert_function               shift and go to state 140
    function_call                  shift and go to state 128
    simple_expr                    shift and go to state 131
    average_function               shift and go to state 130
    literal                        shift and go to state 138
    other_function                 shift and go to state 154
    count_function                 shift and go to state 139
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153

state 249

    (44) bit_expr -> bit_expr PLUS . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    sum_function                   shift and go to state 132
    bit_expr                       shift and go to state 390
    min_function                   shift and go to state 152
    cast_function                  shift and go to state 125
    convert_function               shift and go to state 140
    function_call                  shift and go to state 128
    simple_expr                    shift and go to state 131
    average_function               shift and go to state 130
    literal                        shift and go to state 138
    other_function                 shift and go to state 154
    count_function                 shift and go to state 139
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153

state 250

    (33) predicate -> bit_expr not_opt . IN ( subquery )
    (34) predicate -> bit_expr not_opt . IN ( expr_list )
    (35) predicate -> bit_expr not_opt . BETWEEN bit_expr AND predicate
    (37) predicate -> bit_expr not_opt . LIKE simple_expr escape_opt
    (38) predicate -> bit_expr not_opt . REGEXP bit_expr

    IN              shift and go to state 393
    BETWEEN         shift and go to state 392
    LIKE            shift and go to state 391
    REGEXP          shift and go to state 394


state 251

    (46) bit_expr -> bit_expr TIMES . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    sum_function                   shift and go to state 132
    bit_expr                       shift and go to state 395
    min_function                   shift and go to state 152
    cast_function                  shift and go to state 125
    convert_function               shift and go to state 140
    function_call                  shift and go to state 128
    simple_expr                    shift and go to state 131
    average_function               shift and go to state 130
    literal                        shift and go to state 138
    other_function                 shift and go to state 154
    count_function                 shift and go to state 139
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153

state 252

    (42) bit_expr -> bit_expr SHL . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    sum_function                   shift and go to state 132
    bit_expr                       shift and go to state 396
    min_function                   shift and go to state 152
    cast_function                  shift and go to state 125
    convert_function               shift and go to state 140
    function_call                  shift and go to state 128
    simple_expr                    shift and go to state 131
    average_function               shift and go to state 130
    literal                        shift and go to state 138
    other_function                 shift and go to state 154
    count_function                 shift and go to state 139
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153

state 253

    (5) not_opt -> LOGICAL_NOT .

    NULL            reduce using rule 5 (not_opt -> LOGICAL_NOT .)
    TRUE            reduce using rule 5 (not_opt -> LOGICAL_NOT .)
    FALSE           reduce using rule 5 (not_opt -> LOGICAL_NOT .)
    UNKNOWN         reduce using rule 5 (not_opt -> LOGICAL_NOT .)
    IN              reduce using rule 5 (not_opt -> LOGICAL_NOT .)
    BETWEEN         reduce using rule 5 (not_opt -> LOGICAL_NOT .)
    LIKE            reduce using rule 5 (not_opt -> LOGICAL_NOT .)
    REGEXP          reduce using rule 5 (not_opt -> LOGICAL_NOT .)


state 254

    (40) bit_expr -> bit_expr BITWISE_OR . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    sum_function                   shift and go to state 132
    bit_expr                       shift and go to state 397
    min_function                   shift and go to state 152
    cast_function                  shift and go to state 125
    convert_function               shift and go to state 140
    function_call                  shift and go to state 128
    simple_expr                    shift and go to state 131
    average_function               shift and go to state 130
    literal                        shift and go to state 138
    other_function                 shift and go to state 154
    count_function                 shift and go to state 139
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153

state 255

    (4) not_opt -> NOT .

    NULL            reduce using rule 4 (not_opt -> NOT .)
    TRUE            reduce using rule 4 (not_opt -> NOT .)
    FALSE           reduce using rule 4 (not_opt -> NOT .)
    UNKNOWN         reduce using rule 4 (not_opt -> NOT .)
    IN              reduce using rule 4 (not_opt -> NOT .)
    BETWEEN         reduce using rule 4 (not_opt -> NOT .)
    LIKE            reduce using rule 4 (not_opt -> NOT .)
    REGEXP          reduce using rule 4 (not_opt -> NOT .)


state 256

    (47) bit_expr -> bit_expr DIV . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    sum_function                   shift and go to state 132
    bit_expr                       shift and go to state 398
    min_function                   shift and go to state 152
    cast_function                  shift and go to state 125
    convert_function               shift and go to state 140
    function_call                  shift and go to state 128
    simple_expr                    shift and go to state 131
    average_function               shift and go to state 130
    literal                        shift and go to state 138
    other_function                 shift and go to state 154
    count_function                 shift and go to state 139
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153

state 257

    (48) bit_expr -> bit_expr MOD . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    sum_function                   shift and go to state 132
    bit_expr                       shift and go to state 399
    min_function                   shift and go to state 152
    cast_function                  shift and go to state 125
    convert_function               shift and go to state 140
    function_call                  shift and go to state 128
    simple_expr                    shift and go to state 131
    average_function               shift and go to state 130
    literal                        shift and go to state 138
    other_function                 shift and go to state 154
    count_function                 shift and go to state 139
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153

state 258

    (428) table_wild -> IDENT * .

    AS              reduce using rule 428 (table_wild -> IDENT * .)
    IDENT           reduce using rule 428 (table_wild -> IDENT * .)
    ,               reduce using rule 428 (table_wild -> IDENT * .)
    FROM            reduce using rule 428 (table_wild -> IDENT * .)
    LIMIT           reduce using rule 428 (table_wild -> IDENT * .)
    UNION           reduce using rule 428 (table_wild -> IDENT * .)
    DELIM           reduce using rule 428 (table_wild -> IDENT * .)
    ;               reduce using rule 428 (table_wild -> IDENT * .)
    ON              reduce using rule 428 (table_wild -> IDENT * .)
    )               reduce using rule 428 (table_wild -> IDENT * .)
    INTO            reduce using rule 428 (table_wild -> IDENT * .)
    ORDER           reduce using rule 428 (table_wild -> IDENT * .)
    FOR             reduce using rule 428 (table_wild -> IDENT * .)
    LOCK            reduce using rule 428 (table_wild -> IDENT * .)


state 259

    (89) other_function -> IDENT ( . )
    (90) other_function -> IDENT ( . expr_list )
    (31) expr_list -> . expr
    (32) expr_list -> . expr , expr_list
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    )               shift and go to state 401
    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    expr_list                      shift and go to state 400
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 272
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 260

    (60) simple_expr -> EXISTS ( . subquery )
    (58) subquery -> . select
    (523) select -> . top_level_select_init
    (522) top_level_select_init -> . SELECT select_init2

    SELECT          shift and go to state 24

    subquery                       shift and go to state 402
    top_level_select_init          shift and go to state 27
    select                         shift and go to state 271

state 261

    (86) max_function -> MAX ( . opt_distinct expr )
    (75) opt_distinct -> .
    (76) opt_distinct -> . DISTINCT

    NOT             reduce using rule 75 (opt_distinct -> .)
    IDENT           reduce using rule 75 (opt_distinct -> .)
    @               reduce using rule 75 (opt_distinct -> .)
    (               reduce using rule 75 (opt_distinct -> .)
    EXISTS          reduce using rule 75 (opt_distinct -> .)
    ROW             reduce using rule 75 (opt_distinct -> .)
    STRING          reduce using rule 75 (opt_distinct -> .)
    NUMBER          reduce using rule 75 (opt_distinct -> .)
    FLOAT_LIT       reduce using rule 75 (opt_distinct -> .)
    CONVERT         reduce using rule 75 (opt_distinct -> .)
    CAST            reduce using rule 75 (opt_distinct -> .)
    AVG             reduce using rule 75 (opt_distinct -> .)
    BIT_AND         reduce using rule 75 (opt_distinct -> .)
    BIT_OR          reduce using rule 75 (opt_distinct -> .)
    BIT_XOR         reduce using rule 75 (opt_distinct -> .)
    COUNT           reduce using rule 75 (opt_distinct -> .)
    MAX             reduce using rule 75 (opt_distinct -> .)
    MIN             reduce using rule 75 (opt_distinct -> .)
    SUM             reduce using rule 75 (opt_distinct -> .)
    DISTINCT        shift and go to state 351

    opt_distinct                   shift and go to state 403

state 262

    (79) bit_function -> BIT_OR ( . expr )
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 404
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 263

    (431) select_item -> select_item2 select_alias .

    ,               reduce using rule 431 (select_item -> select_item2 select_alias .)
    FROM            reduce using rule 431 (select_item -> select_item2 select_alias .)
    LIMIT           reduce using rule 431 (select_item -> select_item2 select_alias .)
    UNION           reduce using rule 431 (select_item -> select_item2 select_alias .)
    DELIM           reduce using rule 431 (select_item -> select_item2 select_alias .)
    ;               reduce using rule 431 (select_item -> select_item2 select_alias .)
    ON              reduce using rule 431 (select_item -> select_item2 select_alias .)
    )               reduce using rule 431 (select_item -> select_item2 select_alias .)
    INTO            reduce using rule 431 (select_item -> select_item2 select_alias .)
    ORDER           reduce using rule 431 (select_item -> select_item2 select_alias .)
    FOR             reduce using rule 431 (select_item -> select_item2 select_alias .)
    LOCK            reduce using rule 431 (select_item -> select_item2 select_alias .)


state 264

    (426) select_alias -> AS . IDENT

    IDENT           shift and go to state 405


state 265

    (427) select_alias -> IDENT .

    ,               reduce using rule 427 (select_alias -> IDENT .)
    INTO            reduce using rule 427 (select_alias -> IDENT .)
    FROM            reduce using rule 427 (select_alias -> IDENT .)
    ORDER           reduce using rule 427 (select_alias -> IDENT .)
    FOR             reduce using rule 427 (select_alias -> IDENT .)
    LOCK            reduce using rule 427 (select_alias -> IDENT .)
    LIMIT           reduce using rule 427 (select_alias -> IDENT .)
    UNION           reduce using rule 427 (select_alias -> IDENT .)
    DELIM           reduce using rule 427 (select_alias -> IDENT .)
    ;               reduce using rule 427 (select_alias -> IDENT .)
    )               reduce using rule 427 (select_alias -> IDENT .)
    ON              reduce using rule 427 (select_alias -> IDENT .)


state 266

    (9) expr -> expr AND . expr
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 406
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 267

    (10) expr -> expr XOR . expr
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 407
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 268

    (8) expr -> expr OR . expr
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 408
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 269

    (87) min_function -> MIN ( . opt_distinct expr )
    (75) opt_distinct -> .
    (76) opt_distinct -> . DISTINCT

    NOT             reduce using rule 75 (opt_distinct -> .)
    IDENT           reduce using rule 75 (opt_distinct -> .)
    @               reduce using rule 75 (opt_distinct -> .)
    (               reduce using rule 75 (opt_distinct -> .)
    EXISTS          reduce using rule 75 (opt_distinct -> .)
    ROW             reduce using rule 75 (opt_distinct -> .)
    STRING          reduce using rule 75 (opt_distinct -> .)
    NUMBER          reduce using rule 75 (opt_distinct -> .)
    FLOAT_LIT       reduce using rule 75 (opt_distinct -> .)
    CONVERT         reduce using rule 75 (opt_distinct -> .)
    CAST            reduce using rule 75 (opt_distinct -> .)
    AVG             reduce using rule 75 (opt_distinct -> .)
    BIT_AND         reduce using rule 75 (opt_distinct -> .)
    BIT_OR          reduce using rule 75 (opt_distinct -> .)
    BIT_XOR         reduce using rule 75 (opt_distinct -> .)
    COUNT           reduce using rule 75 (opt_distinct -> .)
    MAX             reduce using rule 75 (opt_distinct -> .)
    MIN             reduce using rule 75 (opt_distinct -> .)
    SUM             reduce using rule 75 (opt_distinct -> .)
    DISTINCT        shift and go to state 351

    opt_distinct                   shift and go to state 409

state 270

    (61) simple_expr -> ( expr_list . )

    )               shift and go to state 410


state 271

    (58) subquery -> select .

    )               reduce using rule 58 (subquery -> select .)


state 272

    (31) expr_list -> expr .
    (32) expr_list -> expr . , expr_list
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    )               reduce using rule 31 (expr_list -> expr .)
    ,               shift and go to state 411
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 273

    (59) simple_expr -> ( subquery . )

    )               shift and go to state 412


state 274

    (11) expr -> NOT expr .
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    OR              reduce using rule 11 (expr -> NOT expr .)
    AND             reduce using rule 11 (expr -> NOT expr .)
    XOR             reduce using rule 11 (expr -> NOT expr .)
    AS              reduce using rule 11 (expr -> NOT expr .)
    IDENT           reduce using rule 11 (expr -> NOT expr .)
    ,               reduce using rule 11 (expr -> NOT expr .)
    INTO            reduce using rule 11 (expr -> NOT expr .)
    FROM            reduce using rule 11 (expr -> NOT expr .)
    ORDER           reduce using rule 11 (expr -> NOT expr .)
    FOR             reduce using rule 11 (expr -> NOT expr .)
    LOCK            reduce using rule 11 (expr -> NOT expr .)
    LIMIT           reduce using rule 11 (expr -> NOT expr .)
    UNION           reduce using rule 11 (expr -> NOT expr .)
    DELIM           reduce using rule 11 (expr -> NOT expr .)
    ;               reduce using rule 11 (expr -> NOT expr .)
    )               reduce using rule 11 (expr -> NOT expr .)
    ON              reduce using rule 11 (expr -> NOT expr .)
    ASC             reduce using rule 11 (expr -> NOT expr .)
    DESC            reduce using rule 11 (expr -> NOT expr .)
    THEN            reduce using rule 11 (expr -> NOT expr .)
    USING           reduce using rule 11 (expr -> NOT expr .)
    WHERE           reduce using rule 11 (expr -> NOT expr .)
    GROUP           reduce using rule 11 (expr -> NOT expr .)
    HAVING          reduce using rule 11 (expr -> NOT expr .)
    JOIN            reduce using rule 11 (expr -> NOT expr .)
    INNER           reduce using rule 11 (expr -> NOT expr .)
    CROSS           reduce using rule 11 (expr -> NOT expr .)
    LEFT            reduce using rule 11 (expr -> NOT expr .)
    RIGHT           reduce using rule 11 (expr -> NOT expr .)
    NATURAL         reduce using rule 11 (expr -> NOT expr .)
    WITH            reduce using rule 11 (expr -> NOT expr .)
    DO              reduce using rule 11 (expr -> NOT expr .)
    WHEN            reduce using rule 11 (expr -> NOT expr .)
    END             reduce using rule 11 (expr -> NOT expr .)

  ! OR              [ shift and go to state 268 ]
  ! AND             [ shift and go to state 266 ]
  ! XOR             [ shift and go to state 267 ]


state 275

    (433) select_item_list -> select_item , . select_item_list
    (432) select_item_list -> . select_item
    (433) select_item_list -> . select_item , select_item_list
    (434) select_item_list -> . *
    (431) select_item -> . select_item2 select_alias
    (429) select_item2 -> . table_wild
    (430) select_item2 -> . expr
    (428) table_wild -> . IDENT *
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    *               shift and go to state 136
    IDENT           shift and go to state 145
    NOT             shift and go to state 159
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    select_item_list               shift and go to state 413
    convert_function               shift and go to state 140
    table_wild                     shift and go to state 135
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    select_item2                   shift and go to state 155
    expr                           shift and go to state 156
    simple_expr                    shift and go to state 131
    select_item                    shift and go to state 160

state 276

    (77) average_function -> AVG ( . opt_distinct expr )
    (75) opt_distinct -> .
    (76) opt_distinct -> . DISTINCT

    NOT             reduce using rule 75 (opt_distinct -> .)
    IDENT           reduce using rule 75 (opt_distinct -> .)
    @               reduce using rule 75 (opt_distinct -> .)
    (               reduce using rule 75 (opt_distinct -> .)
    EXISTS          reduce using rule 75 (opt_distinct -> .)
    ROW             reduce using rule 75 (opt_distinct -> .)
    STRING          reduce using rule 75 (opt_distinct -> .)
    NUMBER          reduce using rule 75 (opt_distinct -> .)
    FLOAT_LIT       reduce using rule 75 (opt_distinct -> .)
    CONVERT         reduce using rule 75 (opt_distinct -> .)
    CAST            reduce using rule 75 (opt_distinct -> .)
    AVG             reduce using rule 75 (opt_distinct -> .)
    BIT_AND         reduce using rule 75 (opt_distinct -> .)
    BIT_OR          reduce using rule 75 (opt_distinct -> .)
    BIT_XOR         reduce using rule 75 (opt_distinct -> .)
    COUNT           reduce using rule 75 (opt_distinct -> .)
    MAX             reduce using rule 75 (opt_distinct -> .)
    MIN             reduce using rule 75 (opt_distinct -> .)
    SUM             reduce using rule 75 (opt_distinct -> .)
    DISTINCT        shift and go to state 351

    opt_distinct                   shift and go to state 414

state 277

    (284) union_option -> ALL .

    SELECT          reduce using rule 284 (union_option -> ALL .)
    (               reduce using rule 284 (union_option -> ALL .)


state 278

    (283) union_option -> DISTINCT .

    SELECT          reduce using rule 283 (union_option -> DISTINCT .)
    (               reduce using rule 283 (union_option -> DISTINCT .)


state 279

    (298) union_list -> UNION union_option . union_select_init
    (296) union_select_init -> . SELECT select_init2
    (297) union_select_init -> . ( select_paren ) union_opt

    SELECT          shift and go to state 417
    (               shift and go to state 415

    union_select_init              shift and go to state 416

state 280

    (331) ident_list -> IDENT , ident_list .

    DELIM           reduce using rule 331 (ident_list -> IDENT , ident_list .)
    ;               reduce using rule 331 (ident_list -> IDENT , ident_list .)
    SET             reduce using rule 331 (ident_list -> IDENT , ident_list .)
    FROM            reduce using rule 331 (ident_list -> IDENT , ident_list .)
    RESTRICT        reduce using rule 331 (ident_list -> IDENT , ident_list .)
    CASCADE         reduce using rule 331 (ident_list -> IDENT , ident_list .)
    )               reduce using rule 331 (ident_list -> IDENT , ident_list .)


state 281

    (326) key_values -> key_value .
    (327) key_values -> key_value . , key_values

    WHERE           reduce using rule 326 (key_values -> key_value .)
    LIMIT           reduce using rule 326 (key_values -> key_value .)
    DELIM           reduce using rule 326 (key_values -> key_value .)
    ;               reduce using rule 326 (key_values -> key_value .)
    ,               shift and go to state 418


state 282

    (325) key_value -> IDENT . EQ expr_or_default

    EQ              shift and go to state 419


state 283

    (334) update -> UPDATE ident_list SET key_values . where rows_limit
    (328) where -> .
    (329) where -> . WHERE expr

    LIMIT           reduce using rule 328 (where -> .)
    DELIM           reduce using rule 328 (where -> .)
    ;               reduce using rule 328 (where -> .)
    WHERE           shift and go to state 293

    where                          shift and go to state 420

state 284

    (540) opt_with_consistent_snapshot -> WITH CONSISTENT . SNAPSHOT

    SNAPSHOT        shift and go to state 421


state 285

    (545) opt_chain -> AND CHAIN .

    NO              reduce using rule 545 (opt_chain -> AND CHAIN .)
    RELEASE         reduce using rule 545 (opt_chain -> AND CHAIN .)
    DELIM           reduce using rule 545 (opt_chain -> AND CHAIN .)
    ;               reduce using rule 545 (opt_chain -> AND CHAIN .)


state 286

    (544) opt_chain -> AND NO . CHAIN

    CHAIN           shift and go to state 422


state 287

    (547) opt_release -> NO . RELEASE

    RELEASE         shift and go to state 423


state 288

    (549) commit -> COMMIT opt_work opt_chain opt_release .

    DELIM           reduce using rule 549 (commit -> COMMIT opt_work opt_chain opt_release .)
    ;               reduce using rule 549 (commit -> COMMIT opt_work opt_chain opt_release .)


state 289

    (548) opt_release -> RELEASE .

    DELIM           reduce using rule 548 (opt_release -> RELEASE .)
    ;               reduce using rule 548 (opt_release -> RELEASE .)


state 290

    (550) rollback -> ROLLBACK opt_work opt_chain opt_release .

    DELIM           reduce using rule 550 (rollback -> ROLLBACK opt_work opt_chain opt_release .)
    ;               reduce using rule 550 (rollback -> ROLLBACK opt_work opt_chain opt_release .)


state 291

    (344) rename_tables -> ident_to_ident , rename_tables .

    DELIM           reduce using rule 344 (rename_tables -> ident_to_ident , rename_tables .)
    ;               reduce using rule 344 (rename_tables -> ident_to_ident , rename_tables .)


state 292

    (342) ident_to_ident -> IDENT TO IDENT .

    ,               reduce using rule 342 (ident_to_ident -> IDENT TO IDENT .)
    DELIM           reduce using rule 342 (ident_to_ident -> IDENT TO IDENT .)
    ;               reduce using rule 342 (ident_to_ident -> IDENT TO IDENT .)


state 293

    (329) where -> WHERE . expr
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 424
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 294

    (340) delete -> DELETE delete_options FROM IDENT where . rows_limit
    (332) rows_limit -> .
    (333) rows_limit -> . LIMIT NUMBER

    DELIM           reduce using rule 332 (rows_limit -> .)
    ;               reduce using rule 332 (rows_limit -> .)
    LIMIT           shift and go to state 425

    rows_limit                     shift and go to state 426

state 295

    (341) delete -> DELETE delete_options ident_list FROM where .

    DELIM           reduce using rule 341 (delete -> DELETE delete_options ident_list FROM where .)
    ;               reduce using rule 341 (delete -> DELETE delete_options ident_list FROM where .)


state 296

    (113) ignore_to_or_as -> TO .

    IDENT           reduce using rule 113 (ignore_to_or_as -> TO .)


state 297

    (237) alter_rename_table -> RENAME ignore_to_or_as . IDENT

    IDENT           shift and go to state 427


state 298

    (114) ignore_to_or_as -> AS .

    IDENT           reduce using rule 114 (ignore_to_or_as -> AS .)


state 299

    (111) ignore_column -> COLUMN .

    IDENT           reduce using rule 111 (ignore_column -> COLUMN .)


state 300

    (231) change_column -> MODIFY ignore_column . column_name column_statement position_opt
    (120) column_name -> . IDENT

    IDENT           shift and go to state 428

    column_name                    shift and go to state 429

state 301

    (232) change_default -> ALTER ignore_column . IDENT SET DEFAULT literal
    (233) change_default -> ALTER ignore_column . IDENT DROP DEFAULT

    IDENT           shift and go to state 430


state 302

    (230) change_column -> CHANGE ignore_column . column_name column_name column_statement position_opt
    (120) column_name -> . IDENT

    IDENT           shift and go to state 428

    column_name                    shift and go to state 431

state 303

    (116) check_index_or_key -> INDEX .

    IDENT           reduce using rule 116 (check_index_or_key -> INDEX .)
    (               reduce using rule 116 (check_index_or_key -> INDEX .)
    FOR             reduce using rule 116 (check_index_or_key -> INDEX .)


state 304

    (236) remove_index -> DROP check_index_or_key . IDENT

    IDENT           shift and go to state 432


state 305

    (235) remove_primary_key -> DROP PRIMARY . KEY

    KEY             shift and go to state 433


state 306

    (117) check_index_or_key -> KEY .

    IDENT           reduce using rule 117 (check_index_or_key -> KEY .)
    (               reduce using rule 117 (check_index_or_key -> KEY .)
    FOR             reduce using rule 117 (check_index_or_key -> KEY .)


state 307

    (234) remove_column -> DROP ignore_column . IDENT

    IDENT           shift and go to state 434


state 308

    (248) alter_specifications -> alter_specification , . alter_specifications
    (247) alter_specifications -> . alter_specification
    (248) alter_specifications -> . alter_specification , alter_specifications
    (238) alter_specification -> . add_column
    (239) alter_specification -> . add_index
    (240) alter_specification -> . add_primary_key
    (241) alter_specification -> . change_column
    (242) alter_specification -> . change_default
    (243) alter_specification -> . remove_column
    (244) alter_specification -> . remove_primary_key
    (245) alter_specification -> . remove_index
    (246) alter_specification -> . alter_rename_table
    (226) add_column -> . ADD ignore_column column_name column_statement position_opt
    (227) add_index -> . ADD check_index_or_key index_name_opt ( column_names )
    (228) add_index -> . ADD constraint_opt UNIQUE ignore_index_or_key index_name_opt ( column_names )
    (229) add_primary_key -> . ADD constraint_opt PRIMARY KEY ( column_names )
    (230) change_column -> . CHANGE ignore_column column_name column_name column_statement position_opt
    (231) change_column -> . MODIFY ignore_column column_name column_statement position_opt
    (232) change_default -> . ALTER ignore_column IDENT SET DEFAULT literal
    (233) change_default -> . ALTER ignore_column IDENT DROP DEFAULT
    (234) remove_column -> . DROP ignore_column IDENT
    (235) remove_primary_key -> . DROP PRIMARY KEY
    (236) remove_index -> . DROP check_index_or_key IDENT
    (237) alter_rename_table -> . RENAME ignore_to_or_as IDENT

    ADD             shift and go to state 186
    CHANGE          shift and go to state 181
    MODIFY          shift and go to state 179
    ALTER           shift and go to state 180
    DROP            shift and go to state 182
    RENAME          shift and go to state 176

    change_default                 shift and go to state 177
    remove_index                   shift and go to state 178
    alter_rename_table             shift and go to state 188
    add_column                     shift and go to state 183
    change_column                  shift and go to state 185
    alter_specification            shift and go to state 184
    alter_specifications           shift and go to state 435
    remove_column                  shift and go to state 189
    remove_primary_key             shift and go to state 190
    add_primary_key                shift and go to state 191
    add_index                      shift and go to state 192

state 309

    (119) constraint_opt -> CONSTRAINT . IDENT

    IDENT           shift and go to state 436


state 310

    (227) add_index -> ADD check_index_or_key . index_name_opt ( column_names )
    (126) index_name_opt -> .
    (127) index_name_opt -> . IDENT

    (               reduce using rule 126 (index_name_opt -> .)
    IDENT           shift and go to state 438

    index_name_opt                 shift and go to state 437

state 311

    (228) add_index -> ADD constraint_opt . UNIQUE ignore_index_or_key index_name_opt ( column_names )
    (229) add_primary_key -> ADD constraint_opt . PRIMARY KEY ( column_names )

    UNIQUE          shift and go to state 440
    PRIMARY         shift and go to state 439


state 312

    (226) add_column -> ADD ignore_column . column_name column_statement position_opt
    (120) column_name -> . IDENT

    IDENT           shift and go to state 428

    column_name                    shift and go to state 441

state 313

    (319) insert -> INSERT insert_lock_option opt_ignore insert2 insert_field_spec . opt_insert_update
    (250) opt_insert_update -> .
    (262) opt_insert_update -> . ON DUPLICATE KEY UPDATE insert_update_list

    DELIM           reduce using rule 250 (opt_insert_update -> .)
    ;               reduce using rule 250 (opt_insert_update -> .)
    ON              shift and go to state 442

    opt_insert_update              shift and go to state 443

state 314

    (526) variable_assignment -> SESSION IDENT EQ expr .
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    ,               reduce using rule 526 (variable_assignment -> SESSION IDENT EQ expr .)
    DELIM           reduce using rule 526 (variable_assignment -> SESSION IDENT EQ expr .)
    ;               reduce using rule 526 (variable_assignment -> SESSION IDENT EQ expr .)
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 315

    (525) variable_assignment -> GLOBAL IDENT EQ expr .
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    ,               reduce using rule 525 (variable_assignment -> GLOBAL IDENT EQ expr .)
    DELIM           reduce using rule 525 (variable_assignment -> GLOBAL IDENT EQ expr .)
    ;               reduce using rule 525 (variable_assignment -> GLOBAL IDENT EQ expr .)
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 316

    (213) create_table -> CREATE TABLE if_not_exists IDENT ( . create_statements ) table_options_opt
    (200) create_statements -> . create_statement
    (201) create_statements -> . create_statement , create_statements
    (196) create_statement -> . col_name column_statement
    (197) create_statement -> . primary_key_statement
    (198) create_statement -> . index_statement
    (199) create_statement -> . unique_statement
    (129) col_name -> . IDENT
    (123) primary_key_statement -> . constraint_opt PRIMARY KEY ( column_names )
    (124) index_statement -> . INDEX IDENT ( column_names )
    (125) index_statement -> . KEY IDENT ( column_names )
    (128) unique_statement -> . constraint_opt UNIQUE ignore_index_or_key index_name_opt ( column_names )
    (118) constraint_opt -> .
    (119) constraint_opt -> . CONSTRAINT IDENT

    IDENT           shift and go to state 447
    INDEX           shift and go to state 444
    KEY             shift and go to state 453
    PRIMARY         reduce using rule 118 (constraint_opt -> .)
    UNIQUE          reduce using rule 118 (constraint_opt -> .)
    CONSTRAINT      shift and go to state 309

    create_statements              shift and go to state 450
    create_statement               shift and go to state 448
    unique_statement               shift and go to state 451
    col_name                       shift and go to state 449
    index_statement                shift and go to state 445
    constraint_opt                 shift and go to state 446
    primary_key_statement          shift and go to state 452

state 317

    (212) if_not_exists -> IF NOT EXISTS .

    IDENT           reduce using rule 212 (if_not_exists -> IF NOT EXISTS .)


state 318

    (535) create_index -> CREATE unique_opt INDEX IDENT ON . IDENT ( ident_list )

    IDENT           shift and go to state 454


state 319

    (413) trigger_event -> INSERT .

    ON              reduce using rule 413 (trigger_event -> INSERT .)


state 320

    (414) trigger_event -> UPDATE .

    ON              reduce using rule 414 (trigger_event -> UPDATE .)


state 321

    (415) trigger_event -> DELETE .

    ON              reduce using rule 415 (trigger_event -> DELETE .)


state 322

    (418) create_trigger -> CREATE TRIGGER IDENT trigger_time trigger_event . ON IDENT FOR EACH ROW sp_proc_stmt

    ON              shift and go to state 455


state 323

    (530) create_view -> CREATE VIEW IDENT AS select .

    DELIM           reduce using rule 530 (create_view -> CREATE VIEW IDENT AS select .)
    ;               reduce using rule 530 (create_view -> CREATE VIEW IDENT AS select .)


state 324

    (221) drop_table -> DROP temporary TABLE if_exists ident_list . opt_restrict_cascade
    (218) opt_restrict_cascade -> .
    (219) opt_restrict_cascade -> . RESTRICT
    (220) opt_restrict_cascade -> . CASCADE

    DELIM           reduce using rule 218 (opt_restrict_cascade -> .)
    ;               reduce using rule 218 (opt_restrict_cascade -> .)
    RESTRICT        shift and go to state 326
    CASCADE         shift and go to state 327

    opt_restrict_cascade           shift and go to state 456

state 325

    (536) drop_view -> DROP VIEW if_exists ident_list opt_restrict_cascade .

    DELIM           reduce using rule 536 (drop_view -> DROP VIEW if_exists ident_list opt_restrict_cascade .)
    ;               reduce using rule 536 (drop_view -> DROP VIEW if_exists ident_list opt_restrict_cascade .)


state 326

    (219) opt_restrict_cascade -> RESTRICT .

    DELIM           reduce using rule 219 (opt_restrict_cascade -> RESTRICT .)
    ;               reduce using rule 219 (opt_restrict_cascade -> RESTRICT .)


state 327

    (220) opt_restrict_cascade -> CASCADE .

    DELIM           reduce using rule 220 (opt_restrict_cascade -> CASCADE .)
    ;               reduce using rule 220 (opt_restrict_cascade -> CASCADE .)


state 328

    (310) insert_field_spec -> SET ident_eq_list .

    DELIM           reduce using rule 310 (insert_field_spec -> SET ident_eq_list .)
    ;               reduce using rule 310 (insert_field_spec -> SET ident_eq_list .)
    ON              reduce using rule 310 (insert_field_spec -> SET ident_eq_list .)


state 329

    (307) ident_eq_value -> simple_ident_nospvar . equal expr_or_default
    (256) equal -> . EQ
    (257) equal -> . SET_VAR

    EQ              shift and go to state 457
    SET_VAR         shift and go to state 459

    equal                          shift and go to state 458

state 330

    (258) simple_ident_nospvar -> IDENT .

    EQ              reduce using rule 258 (simple_ident_nospvar -> IDENT .)
    SET_VAR         reduce using rule 258 (simple_ident_nospvar -> IDENT .)


state 331

    (308) ident_eq_list -> ident_eq_value .
    (309) ident_eq_list -> ident_eq_value . , ident_eq_list

    DELIM           reduce using rule 308 (ident_eq_list -> ident_eq_value .)
    ;               reduce using rule 308 (ident_eq_list -> ident_eq_value .)
    ON              reduce using rule 308 (ident_eq_list -> ident_eq_value .)
    ,               shift and go to state 460


state 332

    (272) values_list -> no_braces .
    (273) values_list -> no_braces . , values_list

    DELIM           reduce using rule 272 (values_list -> no_braces .)
    ;               reduce using rule 272 (values_list -> no_braces .)
    ON              reduce using rule 272 (values_list -> no_braces .)
    ,               shift and go to state 461


state 333

    (271) no_braces -> ( . opt_values )
    (267) opt_values -> .
    (268) opt_values -> . values
    (269) values -> . expr_or_default
    (270) values -> . expr_or_default , values
    (254) expr_or_default -> . expr
    (255) expr_or_default -> . DEFAULT
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    )               reduce using rule 267 (opt_values -> .)
    DEFAULT         shift and go to state 462
    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    bit_function                   shift and go to state 153
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    max_function                   shift and go to state 149
    average_function               shift and go to state 130
    opt_values                     shift and go to state 463
    other_function                 shift and go to state 154
    expr                           shift and go to state 464
    simple_expr                    shift and go to state 131
    values                         shift and go to state 465
    expr_or_default                shift and go to state 466

state 334

    (275) insert_values -> VALUE values_list .

    DELIM           reduce using rule 275 (insert_values -> VALUE values_list .)
    ;               reduce using rule 275 (insert_values -> VALUE values_list .)
    ON              reduce using rule 275 (insert_values -> VALUE values_list .)


state 335

    (274) insert_values -> VALUES values_list .

    DELIM           reduce using rule 274 (insert_values -> VALUES values_list .)
    ;               reduce using rule 274 (insert_values -> VALUES values_list .)
    ON              reduce using rule 274 (insert_values -> VALUES values_list .)


state 336

    (302) insert_values -> create_select union_clause .

    DELIM           reduce using rule 302 (insert_values -> create_select union_clause .)
    ;               reduce using rule 302 (insert_values -> create_select union_clause .)
    ON              reduce using rule 302 (insert_values -> create_select union_clause .)


state 337

    (258) simple_ident_nospvar -> IDENT .
    (428) table_wild -> IDENT . *

    ,               reduce using rule 258 (simple_ident_nospvar -> IDENT .)
    )               reduce using rule 258 (simple_ident_nospvar -> IDENT .)
    *               shift and go to state 258


state 338

    (305) insert_field_spec -> ( ) . insert_values
    (274) insert_values -> . VALUES values_list
    (275) insert_values -> . VALUE values_list
    (302) insert_values -> . create_select union_clause
    (303) insert_values -> . ( create_select ) union_opt
    (281) create_select -> . SELECT select_options select_item_list opt_select_from

    VALUES          shift and go to state 214
    VALUE           shift and go to state 212
    (               shift and go to state 467
    SELECT          shift and go to state 217

    create_select                  shift and go to state 215
    insert_values                  shift and go to state 468

state 339

    (263) insert_ident -> simple_ident_nospvar .

    ,               reduce using rule 263 (insert_ident -> simple_ident_nospvar .)
    )               reduce using rule 263 (insert_ident -> simple_ident_nospvar .)


state 340

    (265) fields -> insert_ident .
    (266) fields -> insert_ident . , fields

    )               reduce using rule 265 (fields -> insert_ident .)
    ,               shift and go to state 469


state 341

    (303) insert_values -> ( create_select . ) union_opt

    )               shift and go to state 470


state 342

    (306) insert_field_spec -> ( fields . ) insert_values

    )               shift and go to state 471


state 343

    (264) insert_ident -> table_wild .

    ,               reduce using rule 264 (insert_ident -> table_wild .)
    )               reduce using rule 264 (insert_ident -> table_wild .)


state 344

    (281) create_select -> SELECT select_options . select_item_list opt_select_from
    (432) select_item_list -> . select_item
    (433) select_item_list -> . select_item , select_item_list
    (434) select_item_list -> . *
    (431) select_item -> . select_item2 select_alias
    (429) select_item2 -> . table_wild
    (430) select_item2 -> . expr
    (428) table_wild -> . IDENT *
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    *               shift and go to state 136
    IDENT           shift and go to state 145
    NOT             shift and go to state 159
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    select_item_list               shift and go to state 472
    convert_function               shift and go to state 140
    table_wild                     shift and go to state 135
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    select_item2                   shift and go to state 155
    expr                           shift and go to state 156
    simple_expr                    shift and go to state 131
    select_item                    shift and go to state 160

state 345

    (78) bit_function -> BIT_AND ( expr . )
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    )               shift and go to state 473
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 346

    (83) count_function -> COUNT ( opt_all . * )

    *               shift and go to state 474


state 347

    (81) opt_all -> ALL .

    *               reduce using rule 81 (opt_all -> ALL .)


state 348

    (84) count_function -> COUNT ( expr . )
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    )               shift and go to state 475
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 349

    (85) count_function -> COUNT ( DISTINCT . expr_list )
    (31) expr_list -> . expr
    (32) expr_list -> . expr , expr_list
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    expr_list                      shift and go to state 476
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 272
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 350

    (63) convert_function -> CONVERT ( expr . USING IDENT )
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    USING           shift and go to state 477
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 351

    (76) opt_distinct -> DISTINCT .

    NOT             reduce using rule 76 (opt_distinct -> DISTINCT .)
    IDENT           reduce using rule 76 (opt_distinct -> DISTINCT .)
    @               reduce using rule 76 (opt_distinct -> DISTINCT .)
    (               reduce using rule 76 (opt_distinct -> DISTINCT .)
    EXISTS          reduce using rule 76 (opt_distinct -> DISTINCT .)
    ROW             reduce using rule 76 (opt_distinct -> DISTINCT .)
    STRING          reduce using rule 76 (opt_distinct -> DISTINCT .)
    NUMBER          reduce using rule 76 (opt_distinct -> DISTINCT .)
    FLOAT_LIT       reduce using rule 76 (opt_distinct -> DISTINCT .)
    CONVERT         reduce using rule 76 (opt_distinct -> DISTINCT .)
    CAST            reduce using rule 76 (opt_distinct -> DISTINCT .)
    AVG             reduce using rule 76 (opt_distinct -> DISTINCT .)
    BIT_AND         reduce using rule 76 (opt_distinct -> DISTINCT .)
    BIT_OR          reduce using rule 76 (opt_distinct -> DISTINCT .)
    BIT_XOR         reduce using rule 76 (opt_distinct -> DISTINCT .)
    COUNT           reduce using rule 76 (opt_distinct -> DISTINCT .)
    MAX             reduce using rule 76 (opt_distinct -> DISTINCT .)
    MIN             reduce using rule 76 (opt_distinct -> DISTINCT .)
    SUM             reduce using rule 76 (opt_distinct -> DISTINCT .)


state 352

    (88) sum_function -> SUM ( opt_distinct . expr )
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 478
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 353

    (499) table_ref -> table_factor .

    JOIN            reduce using rule 499 (table_ref -> table_factor .)
    INNER           reduce using rule 499 (table_ref -> table_factor .)
    CROSS           reduce using rule 499 (table_ref -> table_factor .)
    LEFT            reduce using rule 499 (table_ref -> table_factor .)
    RIGHT           reduce using rule 499 (table_ref -> table_factor .)
    NATURAL         reduce using rule 499 (table_ref -> table_factor .)
    ,               reduce using rule 499 (table_ref -> table_factor .)
    WHERE           reduce using rule 499 (table_ref -> table_factor .)
    GROUP           reduce using rule 499 (table_ref -> table_factor .)
    HAVING          reduce using rule 499 (table_ref -> table_factor .)
    ORDER           reduce using rule 499 (table_ref -> table_factor .)
    LIMIT           reduce using rule 499 (table_ref -> table_factor .)
    INTO            reduce using rule 499 (table_ref -> table_factor .)
    FOR             reduce using rule 499 (table_ref -> table_factor .)
    LOCK            reduce using rule 499 (table_ref -> table_factor .)
    UNION           reduce using rule 499 (table_ref -> table_factor .)
    DELIM           reduce using rule 499 (table_ref -> table_factor .)
    ;               reduce using rule 499 (table_ref -> table_factor .)
    )               reduce using rule 499 (table_ref -> table_factor .)
    ON              reduce using rule 499 (table_ref -> table_factor .)


state 354

    (501) esc_table_ref -> table_ref .
    (498) join_table -> table_ref . join_clause table_factor opt_join_condition
    (486) join_clause -> . JOIN
    (487) join_clause -> . INNER JOIN
    (488) join_clause -> . CROSS JOIN
    (489) join_clause -> . LEFT JOIN
    (490) join_clause -> . LEFT OUTER JOIN
    (491) join_clause -> . RIGHT JOIN
    (492) join_clause -> . RIGHT OUTER JOIN
    (493) join_clause -> . NATURAL JOIN

    ,               reduce using rule 501 (esc_table_ref -> table_ref .)
    WHERE           reduce using rule 501 (esc_table_ref -> table_ref .)
    GROUP           reduce using rule 501 (esc_table_ref -> table_ref .)
    HAVING          reduce using rule 501 (esc_table_ref -> table_ref .)
    ORDER           reduce using rule 501 (esc_table_ref -> table_ref .)
    LIMIT           reduce using rule 501 (esc_table_ref -> table_ref .)
    INTO            reduce using rule 501 (esc_table_ref -> table_ref .)
    FOR             reduce using rule 501 (esc_table_ref -> table_ref .)
    LOCK            reduce using rule 501 (esc_table_ref -> table_ref .)
    UNION           reduce using rule 501 (esc_table_ref -> table_ref .)
    DELIM           reduce using rule 501 (esc_table_ref -> table_ref .)
    ;               reduce using rule 501 (esc_table_ref -> table_ref .)
    )               reduce using rule 501 (esc_table_ref -> table_ref .)
    ON              reduce using rule 501 (esc_table_ref -> table_ref .)
    JOIN            shift and go to state 481
    INNER           shift and go to state 484
    CROSS           shift and go to state 482
    LEFT            shift and go to state 485
    RIGHT           shift and go to state 483
    NATURAL         shift and go to state 479

    join_clause                    shift and go to state 480

state 355

    (502) derived_table_list -> esc_table_ref .
    (503) derived_table_list -> esc_table_ref . , derived_table_list

    WHERE           reduce using rule 502 (derived_table_list -> esc_table_ref .)
    GROUP           reduce using rule 502 (derived_table_list -> esc_table_ref .)
    HAVING          reduce using rule 502 (derived_table_list -> esc_table_ref .)
    ORDER           reduce using rule 502 (derived_table_list -> esc_table_ref .)
    LIMIT           reduce using rule 502 (derived_table_list -> esc_table_ref .)
    INTO            reduce using rule 502 (derived_table_list -> esc_table_ref .)
    FOR             reduce using rule 502 (derived_table_list -> esc_table_ref .)
    LOCK            reduce using rule 502 (derived_table_list -> esc_table_ref .)
    UNION           reduce using rule 502 (derived_table_list -> esc_table_ref .)
    DELIM           reduce using rule 502 (derived_table_list -> esc_table_ref .)
    ;               reduce using rule 502 (derived_table_list -> esc_table_ref .)
    )               reduce using rule 502 (derived_table_list -> esc_table_ref .)
    ON              reduce using rule 502 (derived_table_list -> esc_table_ref .)
    ,               shift and go to state 486


state 356

    (485) table_factor -> IDENT . opt_table_alias opt_key_definition
    (464) opt_table_alias -> .
    (465) opt_table_alias -> . table_alias IDENT
    (461) table_alias -> .
    (462) table_alias -> . AS
    (463) table_alias -> . EQ

    FORCE           reduce using rule 464 (opt_table_alias -> .)
    IGNORE          reduce using rule 464 (opt_table_alias -> .)
    USE             reduce using rule 464 (opt_table_alias -> .)
    JOIN            reduce using rule 464 (opt_table_alias -> .)
    INNER           reduce using rule 464 (opt_table_alias -> .)
    CROSS           reduce using rule 464 (opt_table_alias -> .)
    LEFT            reduce using rule 464 (opt_table_alias -> .)
    RIGHT           reduce using rule 464 (opt_table_alias -> .)
    NATURAL         reduce using rule 464 (opt_table_alias -> .)
    ,               reduce using rule 464 (opt_table_alias -> .)
    WHERE           reduce using rule 464 (opt_table_alias -> .)
    GROUP           reduce using rule 464 (opt_table_alias -> .)
    HAVING          reduce using rule 464 (opt_table_alias -> .)
    ORDER           reduce using rule 464 (opt_table_alias -> .)
    LIMIT           reduce using rule 464 (opt_table_alias -> .)
    INTO            reduce using rule 464 (opt_table_alias -> .)
    FOR             reduce using rule 464 (opt_table_alias -> .)
    LOCK            reduce using rule 464 (opt_table_alias -> .)
    UNION           reduce using rule 464 (opt_table_alias -> .)
    DELIM           reduce using rule 464 (opt_table_alias -> .)
    ;               reduce using rule 464 (opt_table_alias -> .)
    )               reduce using rule 464 (opt_table_alias -> .)
    ON              reduce using rule 464 (opt_table_alias -> .)
    USING           reduce using rule 464 (opt_table_alias -> .)
    IDENT           reduce using rule 461 (table_alias -> .)
    AS              shift and go to state 489
    EQ              shift and go to state 490

    opt_table_alias                shift and go to state 487
    table_alias                    shift and go to state 488

state 357

    (518) select_from -> FROM DUAL . where_clause opt_limit_clause
    (505) where_clause -> .
    (506) where_clause -> . WHERE expr

    LIMIT           reduce using rule 505 (where_clause -> .)
    INTO            reduce using rule 505 (where_clause -> .)
    FOR             reduce using rule 505 (where_clause -> .)
    LOCK            reduce using rule 505 (where_clause -> .)
    UNION           reduce using rule 505 (where_clause -> .)
    DELIM           reduce using rule 505 (where_clause -> .)
    ;               reduce using rule 505 (where_clause -> .)
    )               reduce using rule 505 (where_clause -> .)
    ON              reduce using rule 505 (where_clause -> .)
    WHERE           shift and go to state 492

    where_clause                   shift and go to state 491

state 358

    (500) table_ref -> join_table .

    JOIN            reduce using rule 500 (table_ref -> join_table .)
    INNER           reduce using rule 500 (table_ref -> join_table .)
    CROSS           reduce using rule 500 (table_ref -> join_table .)
    LEFT            reduce using rule 500 (table_ref -> join_table .)
    RIGHT           reduce using rule 500 (table_ref -> join_table .)
    NATURAL         reduce using rule 500 (table_ref -> join_table .)
    ,               reduce using rule 500 (table_ref -> join_table .)
    WHERE           reduce using rule 500 (table_ref -> join_table .)
    GROUP           reduce using rule 500 (table_ref -> join_table .)
    HAVING          reduce using rule 500 (table_ref -> join_table .)
    ORDER           reduce using rule 500 (table_ref -> join_table .)
    LIMIT           reduce using rule 500 (table_ref -> join_table .)
    INTO            reduce using rule 500 (table_ref -> join_table .)
    FOR             reduce using rule 500 (table_ref -> join_table .)
    LOCK            reduce using rule 500 (table_ref -> join_table .)
    UNION           reduce using rule 500 (table_ref -> join_table .)
    DELIM           reduce using rule 500 (table_ref -> join_table .)
    ;               reduce using rule 500 (table_ref -> join_table .)
    )               reduce using rule 500 (table_ref -> join_table .)
    ON              reduce using rule 500 (table_ref -> join_table .)


state 359

    (504) join_table_list -> derived_table_list .

    WHERE           reduce using rule 504 (join_table_list -> derived_table_list .)
    GROUP           reduce using rule 504 (join_table_list -> derived_table_list .)
    HAVING          reduce using rule 504 (join_table_list -> derived_table_list .)
    ORDER           reduce using rule 504 (join_table_list -> derived_table_list .)
    LIMIT           reduce using rule 504 (join_table_list -> derived_table_list .)
    INTO            reduce using rule 504 (join_table_list -> derived_table_list .)
    FOR             reduce using rule 504 (join_table_list -> derived_table_list .)
    LOCK            reduce using rule 504 (join_table_list -> derived_table_list .)
    UNION           reduce using rule 504 (join_table_list -> derived_table_list .)
    DELIM           reduce using rule 504 (join_table_list -> derived_table_list .)
    ;               reduce using rule 504 (join_table_list -> derived_table_list .)
    )               reduce using rule 504 (join_table_list -> derived_table_list .)
    ON              reduce using rule 504 (join_table_list -> derived_table_list .)


state 360

    (517) select_from -> FROM join_table_list . where_clause group_clause having_clause opt_order_clause opt_limit_clause
    (505) where_clause -> .
    (506) where_clause -> . WHERE expr

    GROUP           reduce using rule 505 (where_clause -> .)
    HAVING          reduce using rule 505 (where_clause -> .)
    ORDER           reduce using rule 505 (where_clause -> .)
    LIMIT           reduce using rule 505 (where_clause -> .)
    INTO            reduce using rule 505 (where_clause -> .)
    FOR             reduce using rule 505 (where_clause -> .)
    LOCK            reduce using rule 505 (where_clause -> .)
    UNION           reduce using rule 505 (where_clause -> .)
    DELIM           reduce using rule 505 (where_clause -> .)
    ;               reduce using rule 505 (where_clause -> .)
    )               reduce using rule 505 (where_clause -> .)
    ON              reduce using rule 505 (where_clause -> .)
    WHERE           shift and go to state 492

    where_clause                   shift and go to state 493

state 361

    (520) select_into -> into select_from .

    FOR             reduce using rule 520 (select_into -> into select_from .)
    LOCK            reduce using rule 520 (select_into -> into select_from .)
    UNION           reduce using rule 520 (select_into -> into select_from .)
    DELIM           reduce using rule 520 (select_into -> into select_from .)
    ;               reduce using rule 520 (select_into -> into select_from .)
    )               reduce using rule 520 (select_into -> into select_from .)
    ON              reduce using rule 520 (select_into -> into select_from .)


state 362

    (456) select_var_ident -> @ . IDENT

    IDENT           shift and go to state 494


state 363

    (457) select_var_ident -> IDENT .

    ,               reduce using rule 457 (select_var_ident -> IDENT .)
    FROM            reduce using rule 457 (select_var_ident -> IDENT .)
    FOR             reduce using rule 457 (select_var_ident -> IDENT .)
    LOCK            reduce using rule 457 (select_var_ident -> IDENT .)
    UNION           reduce using rule 457 (select_var_ident -> IDENT .)
    DELIM           reduce using rule 457 (select_var_ident -> IDENT .)
    ;               reduce using rule 457 (select_var_ident -> IDENT .)
    )               reduce using rule 457 (select_var_ident -> IDENT .)
    ON              reduce using rule 457 (select_var_ident -> IDENT .)


state 364

    (459) into -> INTO into_destination .

    FROM            reduce using rule 459 (into -> INTO into_destination .)
    FOR             reduce using rule 459 (into -> INTO into_destination .)
    LOCK            reduce using rule 459 (into -> INTO into_destination .)
    UNION           reduce using rule 459 (into -> INTO into_destination .)
    DELIM           reduce using rule 459 (into -> INTO into_destination .)
    ;               reduce using rule 459 (into -> INTO into_destination .)
    )               reduce using rule 459 (into -> INTO into_destination .)
    ON              reduce using rule 459 (into -> INTO into_destination .)


state 365

    (458) into_destination -> select_var_list .

    FROM            reduce using rule 458 (into_destination -> select_var_list .)
    FOR             reduce using rule 458 (into_destination -> select_var_list .)
    LOCK            reduce using rule 458 (into_destination -> select_var_list .)
    UNION           reduce using rule 458 (into_destination -> select_var_list .)
    DELIM           reduce using rule 458 (into_destination -> select_var_list .)
    ;               reduce using rule 458 (into_destination -> select_var_list .)
    )               reduce using rule 458 (into_destination -> select_var_list .)
    ON              reduce using rule 458 (into_destination -> select_var_list .)


state 366

    (454) select_var_list -> select_var_ident .
    (455) select_var_list -> select_var_ident . , select_var_list

    FROM            reduce using rule 454 (select_var_list -> select_var_ident .)
    FOR             reduce using rule 454 (select_var_list -> select_var_ident .)
    LOCK            reduce using rule 454 (select_var_list -> select_var_ident .)
    UNION           reduce using rule 454 (select_var_list -> select_var_ident .)
    DELIM           reduce using rule 454 (select_var_list -> select_var_ident .)
    ;               reduce using rule 454 (select_var_list -> select_var_ident .)
    )               reduce using rule 454 (select_var_list -> select_var_ident .)
    ON              reduce using rule 454 (select_var_list -> select_var_ident .)
    ,               shift and go to state 495


state 367

    (437) order_clause -> ORDER BY . order_list
    (443) order_list -> . order_item
    (444) order_list -> . order_item , order_list
    (442) order_item -> . order_ident order_dir
    (438) order_ident -> . expr
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    order_list                     shift and go to state 496
    order_item                     shift and go to state 497
    cast_function                  shift and go to state 125
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 498
    simple_expr                    shift and go to state 131
    order_ident                    shift and go to state 499

state 368

    (278) select_lock_type -> FOR . UPDATE

    UPDATE          shift and go to state 500


state 369

    (279) select_lock_type -> LOCK . IN SHARE MODE

    IN              shift and go to state 501


state 370

    (285) select_part2 -> select_options select_item_list select_into select_lock_type .

    UNION           reduce using rule 285 (select_part2 -> select_options select_item_list select_into select_lock_type .)
    DELIM           reduce using rule 285 (select_part2 -> select_options select_item_list select_into select_lock_type .)
    ;               reduce using rule 285 (select_part2 -> select_options select_item_list select_into select_lock_type .)
    )               reduce using rule 285 (select_part2 -> select_options select_item_list select_into select_lock_type .)
    ON              reduce using rule 285 (select_part2 -> select_options select_item_list select_into select_lock_type .)


state 371

    (521) select_into -> select_from into .

    FOR             reduce using rule 521 (select_into -> select_from into .)
    LOCK            reduce using rule 521 (select_into -> select_from into .)
    UNION           reduce using rule 521 (select_into -> select_from into .)
    DELIM           reduce using rule 521 (select_into -> select_from into .)
    ;               reduce using rule 521 (select_into -> select_from into .)
    )               reduce using rule 521 (select_into -> select_from into .)
    ON              reduce using rule 521 (select_into -> select_from into .)


state 372

    (447) limit_clause -> LIMIT . limit_options
    (448) limit_options -> . limit_option
    (449) limit_options -> . limit_option , limit_option
    (450) limit_options -> . limit_option OFFSET limit_option
    (451) limit_option -> . IDENT
    (452) limit_option -> . NUMBER

    IDENT           shift and go to state 505
    NUMBER          shift and go to state 503

    limit_option                   shift and go to state 504
    limit_options                  shift and go to state 502

state 373

    (453) select_into -> opt_order_clause opt_limit_clause .

    FOR             reduce using rule 453 (select_into -> opt_order_clause opt_limit_clause .)
    LOCK            reduce using rule 453 (select_into -> opt_order_clause opt_limit_clause .)
    UNION           reduce using rule 453 (select_into -> opt_order_clause opt_limit_clause .)
    DELIM           reduce using rule 453 (select_into -> opt_order_clause opt_limit_clause .)
    ;               reduce using rule 453 (select_into -> opt_order_clause opt_limit_clause .)
    )               reduce using rule 453 (select_into -> opt_order_clause opt_limit_clause .)
    ON              reduce using rule 453 (select_into -> opt_order_clause opt_limit_clause .)


state 374

    (446) opt_limit_clause -> limit_clause .

    INTO            reduce using rule 446 (opt_limit_clause -> limit_clause .)
    FOR             reduce using rule 446 (opt_limit_clause -> limit_clause .)
    LOCK            reduce using rule 446 (opt_limit_clause -> limit_clause .)
    UNION           reduce using rule 446 (opt_limit_clause -> limit_clause .)
    DELIM           reduce using rule 446 (opt_limit_clause -> limit_clause .)
    ;               reduce using rule 446 (opt_limit_clause -> limit_clause .)
    )               reduce using rule 446 (opt_limit_clause -> limit_clause .)
    ON              reduce using rule 446 (opt_limit_clause -> limit_clause .)


state 375

    (80) bit_function -> BIT_XOR ( expr . )
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    )               shift and go to state 506
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 376

    (74) cast_function -> CAST ( expr . AS cast_type )
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    AS              shift and go to state 507
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 377

    (62) simple_expr -> ROW ( expr_list . )

    )               shift and go to state 508


state 378

    (15) expr -> boolean_primary IS not_opt . true_false_or_unknown
    (17) boolean_primary -> boolean_primary IS not_opt . NULL
    (12) true_false_or_unknown -> . TRUE
    (13) true_false_or_unknown -> . FALSE
    (14) true_false_or_unknown -> . UNKNOWN

    NULL            shift and go to state 511
    TRUE            shift and go to state 512
    FALSE           shift and go to state 509
    UNKNOWN         shift and go to state 510

    true_false_or_unknown          shift and go to state 513

state 379

    (22) all_or_any -> SOME .

    (               reduce using rule 22 (all_or_any -> SOME .)


state 380

    (19) boolean_primary -> boolean_primary comparison_operator predicate .

    IS              reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    NULL_SAFE       reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    EQ              reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    GE              reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    GT              reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    LE              reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    LT              reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    NE              reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    OR              reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    AND             reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    XOR             reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    ASC             reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    DESC            reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    ,               reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    LIMIT           reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    FOR             reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    LOCK            reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    UNION           reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    DELIM           reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    ;               reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    )               reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    ON              reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    INTO            reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    THEN            reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    DO              reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    WITH            reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    HAVING          reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    ORDER           reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    GROUP           reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    WHEN            reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    AS              reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    USING           reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    IDENT           reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    FROM            reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    WHERE           reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    JOIN            reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    INNER           reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    CROSS           reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    LEFT            reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    RIGHT           reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    NATURAL         reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)
    END             reduce using rule 19 (boolean_primary -> boolean_primary comparison_operator predicate .)


state 381

    (20) all_or_any -> ALL .

    (               reduce using rule 20 (all_or_any -> ALL .)


state 382

    (23) boolean_primary -> boolean_primary comparison_operator all_or_any . ( subquery )

    (               shift and go to state 514


state 383

    (21) all_or_any -> ANY .

    (               reduce using rule 21 (all_or_any -> ANY .)


state 384

    (18) boolean_primary -> boolean_primary NULL_SAFE predicate .

    IS              reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    NULL_SAFE       reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    EQ              reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    GE              reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    GT              reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    LE              reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    LT              reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    NE              reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    OR              reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    AND             reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    XOR             reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    ASC             reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    DESC            reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    ,               reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    LIMIT           reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    FOR             reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    LOCK            reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    UNION           reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    DELIM           reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    ;               reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    )               reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    ON              reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    INTO            reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    THEN            reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    DO              reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    WITH            reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    HAVING          reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    ORDER           reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    GROUP           reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    WHEN            reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    AS              reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    USING           reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    IDENT           reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    FROM            reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    WHERE           reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    JOIN            reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    INNER           reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    CROSS           reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    LEFT            reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    RIGHT           reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    NATURAL         reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)
    END             reduce using rule 18 (boolean_primary -> boolean_primary NULL_SAFE predicate .)


state 385

    (43) bit_expr -> bit_expr SHR bit_expr .
    (40) bit_expr -> bit_expr . BITWISE_OR bit_expr
    (41) bit_expr -> bit_expr . BITWISE_AND bit_expr
    (42) bit_expr -> bit_expr . SHL bit_expr
    (43) bit_expr -> bit_expr . SHR bit_expr
    (44) bit_expr -> bit_expr . PLUS bit_expr
    (45) bit_expr -> bit_expr . MINUS bit_expr
    (46) bit_expr -> bit_expr . TIMES bit_expr
    (47) bit_expr -> bit_expr . DIV bit_expr
    (48) bit_expr -> bit_expr . MOD bit_expr
    (49) bit_expr -> bit_expr . BITWISE_XOR bit_expr

    SOUNDS          reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    BITWISE_OR      reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    BITWISE_AND     reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    SHL             reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    SHR             reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    BITWISE_XOR     reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    NOT             reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    LOGICAL_NOT     reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    IN              reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    BETWEEN         reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    LIKE            reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    REGEXP          reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    IS              reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    NULL_SAFE       reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    EQ              reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    GE              reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    GT              reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    LE              reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    LT              reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    NE              reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    ,               reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    OR              reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    AND             reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    XOR             reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    )               reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    USING           reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    THEN            reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    AS              reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    IDENT           reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    INTO            reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    FROM            reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    ORDER           reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    FOR             reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    LOCK            reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    LIMIT           reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    UNION           reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    DELIM           reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    ;               reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    ON              reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    ASC             reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    DESC            reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    WHERE           reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    GROUP           reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    HAVING          reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    JOIN            reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    INNER           reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    CROSS           reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    LEFT            reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    RIGHT           reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    NATURAL         reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    WITH            reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    DO              reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    WHEN            reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    END             reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .)
    PLUS            shift and go to state 249
    MINUS           shift and go to state 248
    TIMES           shift and go to state 251
    DIV             shift and go to state 256
    MOD             shift and go to state 257

  ! PLUS            [ reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .) ]
  ! MINUS           [ reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .) ]
  ! TIMES           [ reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .) ]
  ! DIV             [ reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .) ]
  ! MOD             [ reduce using rule 43 (bit_expr -> bit_expr SHR bit_expr .) ]
  ! BITWISE_OR      [ shift and go to state 254 ]
  ! BITWISE_AND     [ shift and go to state 245 ]
  ! SHL             [ shift and go to state 252 ]
  ! SHR             [ shift and go to state 244 ]
  ! BITWISE_XOR     [ shift and go to state 246 ]


state 386

    (41) bit_expr -> bit_expr BITWISE_AND bit_expr .
    (40) bit_expr -> bit_expr . BITWISE_OR bit_expr
    (41) bit_expr -> bit_expr . BITWISE_AND bit_expr
    (42) bit_expr -> bit_expr . SHL bit_expr
    (43) bit_expr -> bit_expr . SHR bit_expr
    (44) bit_expr -> bit_expr . PLUS bit_expr
    (45) bit_expr -> bit_expr . MINUS bit_expr
    (46) bit_expr -> bit_expr . TIMES bit_expr
    (47) bit_expr -> bit_expr . DIV bit_expr
    (48) bit_expr -> bit_expr . MOD bit_expr
    (49) bit_expr -> bit_expr . BITWISE_XOR bit_expr

    SOUNDS          reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    BITWISE_OR      reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    BITWISE_AND     reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    BITWISE_XOR     reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    NOT             reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    LOGICAL_NOT     reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    IN              reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    BETWEEN         reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    LIKE            reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    REGEXP          reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    IS              reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    NULL_SAFE       reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    EQ              reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    GE              reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    GT              reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    LE              reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    LT              reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    NE              reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    ,               reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    OR              reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    AND             reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    XOR             reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    )               reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    USING           reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    THEN            reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    AS              reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    IDENT           reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    INTO            reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    FROM            reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    ORDER           reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    FOR             reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    LOCK            reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    LIMIT           reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    UNION           reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    DELIM           reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    ;               reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    ON              reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    ASC             reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    DESC            reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    WHERE           reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    GROUP           reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    HAVING          reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    JOIN            reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    INNER           reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    CROSS           reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    LEFT            reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    RIGHT           reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    NATURAL         reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    WITH            reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    DO              reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    WHEN            reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    END             reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .)
    SHL             shift and go to state 252
    SHR             shift and go to state 244
    PLUS            shift and go to state 249
    MINUS           shift and go to state 248
    TIMES           shift and go to state 251
    DIV             shift and go to state 256
    MOD             shift and go to state 257

  ! SHL             [ reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .) ]
  ! SHR             [ reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .) ]
  ! PLUS            [ reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .) ]
  ! MINUS           [ reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .) ]
  ! TIMES           [ reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .) ]
  ! DIV             [ reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .) ]
  ! MOD             [ reduce using rule 41 (bit_expr -> bit_expr BITWISE_AND bit_expr .) ]
  ! BITWISE_OR      [ shift and go to state 254 ]
  ! BITWISE_AND     [ shift and go to state 245 ]
  ! BITWISE_XOR     [ shift and go to state 246 ]


state 387

    (49) bit_expr -> bit_expr BITWISE_XOR bit_expr .
    (40) bit_expr -> bit_expr . BITWISE_OR bit_expr
    (41) bit_expr -> bit_expr . BITWISE_AND bit_expr
    (42) bit_expr -> bit_expr . SHL bit_expr
    (43) bit_expr -> bit_expr . SHR bit_expr
    (44) bit_expr -> bit_expr . PLUS bit_expr
    (45) bit_expr -> bit_expr . MINUS bit_expr
    (46) bit_expr -> bit_expr . TIMES bit_expr
    (47) bit_expr -> bit_expr . DIV bit_expr
    (48) bit_expr -> bit_expr . MOD bit_expr
    (49) bit_expr -> bit_expr . BITWISE_XOR bit_expr

    SOUNDS          reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    BITWISE_OR      reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    BITWISE_XOR     reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    NOT             reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    LOGICAL_NOT     reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    IN              reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    BETWEEN         reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    LIKE            reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    REGEXP          reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    IS              reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    NULL_SAFE       reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    EQ              reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    GE              reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    GT              reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    LE              reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    LT              reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    NE              reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    ,               reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    OR              reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    AND             reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    XOR             reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    )               reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    USING           reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    THEN            reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    AS              reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    IDENT           reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    INTO            reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    FROM            reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    ORDER           reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    FOR             reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    LOCK            reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    LIMIT           reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    UNION           reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    DELIM           reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    ;               reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    ON              reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    ASC             reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    DESC            reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    WHERE           reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    GROUP           reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    HAVING          reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    JOIN            reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    INNER           reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    CROSS           reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    LEFT            reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    RIGHT           reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    NATURAL         reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    WITH            reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    DO              reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    WHEN            reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    END             reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .)
    BITWISE_AND     shift and go to state 245
    SHL             shift and go to state 252
    SHR             shift and go to state 244
    PLUS            shift and go to state 249
    MINUS           shift and go to state 248
    TIMES           shift and go to state 251
    DIV             shift and go to state 256
    MOD             shift and go to state 257

  ! BITWISE_AND     [ reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .) ]
  ! SHL             [ reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .) ]
  ! SHR             [ reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .) ]
  ! PLUS            [ reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .) ]
  ! MINUS           [ reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .) ]
  ! TIMES           [ reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .) ]
  ! DIV             [ reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .) ]
  ! MOD             [ reduce using rule 49 (bit_expr -> bit_expr BITWISE_XOR bit_expr .) ]
  ! BITWISE_OR      [ shift and go to state 254 ]
  ! BITWISE_XOR     [ shift and go to state 246 ]


state 388

    (36) predicate -> bit_expr SOUNDS LIKE . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    sum_function                   shift and go to state 132
    bit_expr                       shift and go to state 515
    min_function                   shift and go to state 152
    cast_function                  shift and go to state 125
    convert_function               shift and go to state 140
    function_call                  shift and go to state 128
    simple_expr                    shift and go to state 131
    average_function               shift and go to state 130
    literal                        shift and go to state 138
    other_function                 shift and go to state 154
    count_function                 shift and go to state 139
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153

state 389

    (45) bit_expr -> bit_expr MINUS bit_expr .
    (40) bit_expr -> bit_expr . BITWISE_OR bit_expr
    (41) bit_expr -> bit_expr . BITWISE_AND bit_expr
    (42) bit_expr -> bit_expr . SHL bit_expr
    (43) bit_expr -> bit_expr . SHR bit_expr
    (44) bit_expr -> bit_expr . PLUS bit_expr
    (45) bit_expr -> bit_expr . MINUS bit_expr
    (46) bit_expr -> bit_expr . TIMES bit_expr
    (47) bit_expr -> bit_expr . DIV bit_expr
    (48) bit_expr -> bit_expr . MOD bit_expr
    (49) bit_expr -> bit_expr . BITWISE_XOR bit_expr

    SOUNDS          reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    BITWISE_OR      reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    BITWISE_AND     reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    SHL             reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    SHR             reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    PLUS            reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    MINUS           reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    BITWISE_XOR     reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    NOT             reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    LOGICAL_NOT     reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    IN              reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    BETWEEN         reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    LIKE            reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    REGEXP          reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    IS              reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    NULL_SAFE       reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    EQ              reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    GE              reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    GT              reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    LE              reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    LT              reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    NE              reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    ,               reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    OR              reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    AND             reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    XOR             reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    )               reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    USING           reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    THEN            reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    AS              reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    IDENT           reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    INTO            reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    FROM            reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    ORDER           reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    FOR             reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    LOCK            reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    LIMIT           reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    UNION           reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    DELIM           reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    ;               reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    ON              reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    ASC             reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    DESC            reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    WHERE           reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    GROUP           reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    HAVING          reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    JOIN            reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    INNER           reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    CROSS           reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    LEFT            reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    RIGHT           reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    NATURAL         reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    WITH            reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    DO              reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    WHEN            reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    END             reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .)
    TIMES           shift and go to state 251
    DIV             shift and go to state 256
    MOD             shift and go to state 257

  ! TIMES           [ reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .) ]
  ! DIV             [ reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .) ]
  ! MOD             [ reduce using rule 45 (bit_expr -> bit_expr MINUS bit_expr .) ]
  ! BITWISE_OR      [ shift and go to state 254 ]
  ! BITWISE_AND     [ shift and go to state 245 ]
  ! SHL             [ shift and go to state 252 ]
  ! SHR             [ shift and go to state 244 ]
  ! PLUS            [ shift and go to state 249 ]
  ! MINUS           [ shift and go to state 248 ]
  ! BITWISE_XOR     [ shift and go to state 246 ]


state 390

    (44) bit_expr -> bit_expr PLUS bit_expr .
    (40) bit_expr -> bit_expr . BITWISE_OR bit_expr
    (41) bit_expr -> bit_expr . BITWISE_AND bit_expr
    (42) bit_expr -> bit_expr . SHL bit_expr
    (43) bit_expr -> bit_expr . SHR bit_expr
    (44) bit_expr -> bit_expr . PLUS bit_expr
    (45) bit_expr -> bit_expr . MINUS bit_expr
    (46) bit_expr -> bit_expr . TIMES bit_expr
    (47) bit_expr -> bit_expr . DIV bit_expr
    (48) bit_expr -> bit_expr . MOD bit_expr
    (49) bit_expr -> bit_expr . BITWISE_XOR bit_expr

    SOUNDS          reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    BITWISE_OR      reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    BITWISE_AND     reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    SHL             reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    SHR             reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    PLUS            reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    MINUS           reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    BITWISE_XOR     reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    NOT             reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    LOGICAL_NOT     reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    IN              reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    BETWEEN         reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    LIKE            reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    REGEXP          reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    IS              reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    NULL_SAFE       reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    EQ              reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    GE              reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    GT              reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    LE              reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    LT              reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    NE              reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    ,               reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    OR              reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    AND             reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    XOR             reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    )               reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    USING           reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    THEN            reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    AS              reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    IDENT           reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    INTO            reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    FROM            reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    ORDER           reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    FOR             reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    LOCK            reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    LIMIT           reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    UNION           reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    DELIM           reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    ;               reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    ON              reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    ASC             reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    DESC            reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    WHERE           reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    GROUP           reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    HAVING          reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    JOIN            reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    INNER           reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    CROSS           reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    LEFT            reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    RIGHT           reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    NATURAL         reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    WITH            reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    DO              reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    WHEN            reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    END             reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .)
    TIMES           shift and go to state 251
    DIV             shift and go to state 256
    MOD             shift and go to state 257

  ! TIMES           [ reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .) ]
  ! DIV             [ reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .) ]
  ! MOD             [ reduce using rule 44 (bit_expr -> bit_expr PLUS bit_expr .) ]
  ! BITWISE_OR      [ shift and go to state 254 ]
  ! BITWISE_AND     [ shift and go to state 245 ]
  ! SHL             [ shift and go to state 252 ]
  ! SHR             [ shift and go to state 244 ]
  ! PLUS            [ shift and go to state 249 ]
  ! MINUS           [ shift and go to state 248 ]
  ! BITWISE_XOR     [ shift and go to state 246 ]


state 391

    (37) predicate -> bit_expr not_opt LIKE . simple_expr escape_opt
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    sum_function                   shift and go to state 132
    min_function                   shift and go to state 152
    cast_function                  shift and go to state 125
    convert_function               shift and go to state 140
    function_call                  shift and go to state 128
    simple_expr                    shift and go to state 516
    average_function               shift and go to state 130
    literal                        shift and go to state 138
    other_function                 shift and go to state 154
    count_function                 shift and go to state 139
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153

state 392

    (35) predicate -> bit_expr not_opt BETWEEN . bit_expr AND predicate
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    sum_function                   shift and go to state 132
    bit_expr                       shift and go to state 517
    min_function                   shift and go to state 152
    cast_function                  shift and go to state 125
    convert_function               shift and go to state 140
    function_call                  shift and go to state 128
    simple_expr                    shift and go to state 131
    average_function               shift and go to state 130
    literal                        shift and go to state 138
    other_function                 shift and go to state 154
    count_function                 shift and go to state 139
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153

state 393

    (33) predicate -> bit_expr not_opt IN . ( subquery )
    (34) predicate -> bit_expr not_opt IN . ( expr_list )

    (               shift and go to state 518


state 394

    (38) predicate -> bit_expr not_opt REGEXP . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    sum_function                   shift and go to state 132
    bit_expr                       shift and go to state 519
    min_function                   shift and go to state 152
    cast_function                  shift and go to state 125
    convert_function               shift and go to state 140
    function_call                  shift and go to state 128
    simple_expr                    shift and go to state 131
    average_function               shift and go to state 130
    literal                        shift and go to state 138
    other_function                 shift and go to state 154
    count_function                 shift and go to state 139
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153

state 395

    (46) bit_expr -> bit_expr TIMES bit_expr .
    (40) bit_expr -> bit_expr . BITWISE_OR bit_expr
    (41) bit_expr -> bit_expr . BITWISE_AND bit_expr
    (42) bit_expr -> bit_expr . SHL bit_expr
    (43) bit_expr -> bit_expr . SHR bit_expr
    (44) bit_expr -> bit_expr . PLUS bit_expr
    (45) bit_expr -> bit_expr . MINUS bit_expr
    (46) bit_expr -> bit_expr . TIMES bit_expr
    (47) bit_expr -> bit_expr . DIV bit_expr
    (48) bit_expr -> bit_expr . MOD bit_expr
    (49) bit_expr -> bit_expr . BITWISE_XOR bit_expr

    SOUNDS          reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    BITWISE_OR      reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    BITWISE_AND     reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    SHL             reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    SHR             reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    PLUS            reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    MINUS           reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    TIMES           reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    DIV             reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    MOD             reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    BITWISE_XOR     reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    NOT             reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    LOGICAL_NOT     reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    IN              reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    BETWEEN         reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    LIKE            reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    REGEXP          reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    IS              reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    NULL_SAFE       reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    EQ              reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    GE              reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    GT              reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    LE              reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    LT              reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    NE              reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    ,               reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    OR              reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    AND             reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    XOR             reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    )               reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    USING           reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    THEN            reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    AS              reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    IDENT           reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    INTO            reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    FROM            reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    ORDER           reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    FOR             reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    LOCK            reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    LIMIT           reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    UNION           reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    DELIM           reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    ;               reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    ON              reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    ASC             reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    DESC            reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    WHERE           reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    GROUP           reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    HAVING          reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    JOIN            reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    INNER           reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    CROSS           reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    LEFT            reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    RIGHT           reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    NATURAL         reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    WITH            reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    DO              reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    WHEN            reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)
    END             reduce using rule 46 (bit_expr -> bit_expr TIMES bit_expr .)

  ! BITWISE_OR      [ shift and go to state 254 ]
  ! BITWISE_AND     [ shift and go to state 245 ]
  ! SHL             [ shift and go to state 252 ]
  ! SHR             [ shift and go to state 244 ]
  ! PLUS            [ shift and go to state 249 ]
  ! MINUS           [ shift and go to state 248 ]
  ! TIMES           [ shift and go to state 251 ]
  ! DIV             [ shift and go to state 256 ]
  ! MOD             [ shift and go to state 257 ]
  ! BITWISE_XOR     [ shift and go to state 246 ]


state 396

    (42) bit_expr -> bit_expr SHL bit_expr .
    (40) bit_expr -> bit_expr . BITWISE_OR bit_expr
    (41) bit_expr -> bit_expr . BITWISE_AND bit_expr
    (42) bit_expr -> bit_expr . SHL bit_expr
    (43) bit_expr -> bit_expr . SHR bit_expr
    (44) bit_expr -> bit_expr . PLUS bit_expr
    (45) bit_expr -> bit_expr . MINUS bit_expr
    (46) bit_expr -> bit_expr . TIMES bit_expr
    (47) bit_expr -> bit_expr . DIV bit_expr
    (48) bit_expr -> bit_expr . MOD bit_expr
    (49) bit_expr -> bit_expr . BITWISE_XOR bit_expr

    SOUNDS          reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    BITWISE_OR      reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    BITWISE_AND     reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    SHL             reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    SHR             reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    BITWISE_XOR     reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    NOT             reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    LOGICAL_NOT     reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    IN              reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    BETWEEN         reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    LIKE            reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    REGEXP          reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    IS              reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    NULL_SAFE       reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    EQ              reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    GE              reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    GT              reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    LE              reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    LT              reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    NE              reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    ,               reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    OR              reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    AND             reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    XOR             reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    )               reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    USING           reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    THEN            reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    AS              reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    IDENT           reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    INTO            reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    FROM            reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    ORDER           reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    FOR             reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    LOCK            reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    LIMIT           reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    UNION           reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    DELIM           reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    ;               reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    ON              reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    ASC             reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    DESC            reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    WHERE           reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    GROUP           reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    HAVING          reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    JOIN            reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    INNER           reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    CROSS           reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    LEFT            reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    RIGHT           reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    NATURAL         reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    WITH            reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    DO              reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    WHEN            reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    END             reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .)
    PLUS            shift and go to state 249
    MINUS           shift and go to state 248
    TIMES           shift and go to state 251
    DIV             shift and go to state 256
    MOD             shift and go to state 257

  ! PLUS            [ reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .) ]
  ! MINUS           [ reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .) ]
  ! TIMES           [ reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .) ]
  ! DIV             [ reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .) ]
  ! MOD             [ reduce using rule 42 (bit_expr -> bit_expr SHL bit_expr .) ]
  ! BITWISE_OR      [ shift and go to state 254 ]
  ! BITWISE_AND     [ shift and go to state 245 ]
  ! SHL             [ shift and go to state 252 ]
  ! SHR             [ shift and go to state 244 ]
  ! BITWISE_XOR     [ shift and go to state 246 ]


state 397

    (40) bit_expr -> bit_expr BITWISE_OR bit_expr .
    (40) bit_expr -> bit_expr . BITWISE_OR bit_expr
    (41) bit_expr -> bit_expr . BITWISE_AND bit_expr
    (42) bit_expr -> bit_expr . SHL bit_expr
    (43) bit_expr -> bit_expr . SHR bit_expr
    (44) bit_expr -> bit_expr . PLUS bit_expr
    (45) bit_expr -> bit_expr . MINUS bit_expr
    (46) bit_expr -> bit_expr . TIMES bit_expr
    (47) bit_expr -> bit_expr . DIV bit_expr
    (48) bit_expr -> bit_expr . MOD bit_expr
    (49) bit_expr -> bit_expr . BITWISE_XOR bit_expr

    SOUNDS          reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    BITWISE_OR      reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    NOT             reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    LOGICAL_NOT     reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    IN              reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    BETWEEN         reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    LIKE            reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    REGEXP          reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    IS              reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    NULL_SAFE       reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    EQ              reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    GE              reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    GT              reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    LE              reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    LT              reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    NE              reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    ,               reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    OR              reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    AND             reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    XOR             reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    )               reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    USING           reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    THEN            reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    AS              reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    IDENT           reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    INTO            reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    FROM            reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    ORDER           reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    FOR             reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    LOCK            reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    LIMIT           reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    UNION           reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    DELIM           reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    ;               reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    ON              reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    ASC             reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    DESC            reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    WHERE           reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    GROUP           reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    HAVING          reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    JOIN            reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    INNER           reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    CROSS           reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    LEFT            reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    RIGHT           reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    NATURAL         reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    WITH            reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    DO              reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    WHEN            reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    END             reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .)
    BITWISE_AND     shift and go to state 245
    SHL             shift and go to state 252
    SHR             shift and go to state 244
    PLUS            shift and go to state 249
    MINUS           shift and go to state 248
    TIMES           shift and go to state 251
    DIV             shift and go to state 256
    MOD             shift and go to state 257
    BITWISE_XOR     shift and go to state 246

  ! BITWISE_AND     [ reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .) ]
  ! SHL             [ reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .) ]
  ! SHR             [ reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .) ]
  ! PLUS            [ reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .) ]
  ! MINUS           [ reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .) ]
  ! TIMES           [ reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .) ]
  ! DIV             [ reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .) ]
  ! MOD             [ reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .) ]
  ! BITWISE_XOR     [ reduce using rule 40 (bit_expr -> bit_expr BITWISE_OR bit_expr .) ]
  ! BITWISE_OR      [ shift and go to state 254 ]


state 398

    (47) bit_expr -> bit_expr DIV bit_expr .
    (40) bit_expr -> bit_expr . BITWISE_OR bit_expr
    (41) bit_expr -> bit_expr . BITWISE_AND bit_expr
    (42) bit_expr -> bit_expr . SHL bit_expr
    (43) bit_expr -> bit_expr . SHR bit_expr
    (44) bit_expr -> bit_expr . PLUS bit_expr
    (45) bit_expr -> bit_expr . MINUS bit_expr
    (46) bit_expr -> bit_expr . TIMES bit_expr
    (47) bit_expr -> bit_expr . DIV bit_expr
    (48) bit_expr -> bit_expr . MOD bit_expr
    (49) bit_expr -> bit_expr . BITWISE_XOR bit_expr

    SOUNDS          reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    BITWISE_OR      reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    BITWISE_AND     reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    SHL             reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    SHR             reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    PLUS            reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    MINUS           reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    TIMES           reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    DIV             reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    MOD             reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    BITWISE_XOR     reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    NOT             reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    LOGICAL_NOT     reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    IN              reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    BETWEEN         reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    LIKE            reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    REGEXP          reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    IS              reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    NULL_SAFE       reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    EQ              reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    GE              reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    GT              reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    LE              reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    LT              reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    NE              reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    ,               reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    OR              reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    AND             reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    XOR             reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    )               reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    USING           reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    THEN            reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    AS              reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    IDENT           reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    INTO            reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    FROM            reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    ORDER           reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    FOR             reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    LOCK            reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    LIMIT           reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    UNION           reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    DELIM           reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    ;               reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    ON              reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    ASC             reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    DESC            reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    WHERE           reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    GROUP           reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    HAVING          reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    JOIN            reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    INNER           reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    CROSS           reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    LEFT            reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    RIGHT           reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    NATURAL         reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    WITH            reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    DO              reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    WHEN            reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)
    END             reduce using rule 47 (bit_expr -> bit_expr DIV bit_expr .)

  ! BITWISE_OR      [ shift and go to state 254 ]
  ! BITWISE_AND     [ shift and go to state 245 ]
  ! SHL             [ shift and go to state 252 ]
  ! SHR             [ shift and go to state 244 ]
  ! PLUS            [ shift and go to state 249 ]
  ! MINUS           [ shift and go to state 248 ]
  ! TIMES           [ shift and go to state 251 ]
  ! DIV             [ shift and go to state 256 ]
  ! MOD             [ shift and go to state 257 ]
  ! BITWISE_XOR     [ shift and go to state 246 ]


state 399

    (48) bit_expr -> bit_expr MOD bit_expr .
    (40) bit_expr -> bit_expr . BITWISE_OR bit_expr
    (41) bit_expr -> bit_expr . BITWISE_AND bit_expr
    (42) bit_expr -> bit_expr . SHL bit_expr
    (43) bit_expr -> bit_expr . SHR bit_expr
    (44) bit_expr -> bit_expr . PLUS bit_expr
    (45) bit_expr -> bit_expr . MINUS bit_expr
    (46) bit_expr -> bit_expr . TIMES bit_expr
    (47) bit_expr -> bit_expr . DIV bit_expr
    (48) bit_expr -> bit_expr . MOD bit_expr
    (49) bit_expr -> bit_expr . BITWISE_XOR bit_expr

    SOUNDS          reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    BITWISE_OR      reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    BITWISE_AND     reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    SHL             reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    SHR             reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    PLUS            reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    MINUS           reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    TIMES           reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    DIV             reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    MOD             reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    BITWISE_XOR     reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    NOT             reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    LOGICAL_NOT     reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    IN              reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    BETWEEN         reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    LIKE            reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    REGEXP          reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    IS              reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    NULL_SAFE       reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    EQ              reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    GE              reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    GT              reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    LE              reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    LT              reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    NE              reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    ,               reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    OR              reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    AND             reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    XOR             reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    )               reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    USING           reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    THEN            reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    AS              reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    IDENT           reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    INTO            reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    FROM            reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    ORDER           reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    FOR             reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    LOCK            reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    LIMIT           reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    UNION           reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    DELIM           reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    ;               reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    ON              reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    ASC             reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    DESC            reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    WHERE           reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    GROUP           reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    HAVING          reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    JOIN            reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    INNER           reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    CROSS           reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    LEFT            reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    RIGHT           reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    NATURAL         reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    WITH            reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    DO              reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    WHEN            reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)
    END             reduce using rule 48 (bit_expr -> bit_expr MOD bit_expr .)

  ! BITWISE_OR      [ shift and go to state 254 ]
  ! BITWISE_AND     [ shift and go to state 245 ]
  ! SHL             [ shift and go to state 252 ]
  ! SHR             [ shift and go to state 244 ]
  ! PLUS            [ shift and go to state 249 ]
  ! MINUS           [ shift and go to state 248 ]
  ! TIMES           [ shift and go to state 251 ]
  ! DIV             [ shift and go to state 256 ]
  ! MOD             [ shift and go to state 257 ]
  ! BITWISE_XOR     [ shift and go to state 246 ]


state 400

    (90) other_function -> IDENT ( expr_list . )

    )               shift and go to state 520


state 401

    (89) other_function -> IDENT ( ) .

    SOUNDS          reduce using rule 89 (other_function -> IDENT ( ) .)
    BITWISE_OR      reduce using rule 89 (other_function -> IDENT ( ) .)
    BITWISE_AND     reduce using rule 89 (other_function -> IDENT ( ) .)
    SHL             reduce using rule 89 (other_function -> IDENT ( ) .)
    SHR             reduce using rule 89 (other_function -> IDENT ( ) .)
    PLUS            reduce using rule 89 (other_function -> IDENT ( ) .)
    MINUS           reduce using rule 89 (other_function -> IDENT ( ) .)
    TIMES           reduce using rule 89 (other_function -> IDENT ( ) .)
    DIV             reduce using rule 89 (other_function -> IDENT ( ) .)
    MOD             reduce using rule 89 (other_function -> IDENT ( ) .)
    BITWISE_XOR     reduce using rule 89 (other_function -> IDENT ( ) .)
    NOT             reduce using rule 89 (other_function -> IDENT ( ) .)
    LOGICAL_NOT     reduce using rule 89 (other_function -> IDENT ( ) .)
    IN              reduce using rule 89 (other_function -> IDENT ( ) .)
    BETWEEN         reduce using rule 89 (other_function -> IDENT ( ) .)
    LIKE            reduce using rule 89 (other_function -> IDENT ( ) .)
    REGEXP          reduce using rule 89 (other_function -> IDENT ( ) .)
    IS              reduce using rule 89 (other_function -> IDENT ( ) .)
    NULL_SAFE       reduce using rule 89 (other_function -> IDENT ( ) .)
    EQ              reduce using rule 89 (other_function -> IDENT ( ) .)
    GE              reduce using rule 89 (other_function -> IDENT ( ) .)
    GT              reduce using rule 89 (other_function -> IDENT ( ) .)
    LE              reduce using rule 89 (other_function -> IDENT ( ) .)
    LT              reduce using rule 89 (other_function -> IDENT ( ) .)
    NE              reduce using rule 89 (other_function -> IDENT ( ) .)
    THEN            reduce using rule 89 (other_function -> IDENT ( ) .)
    OR              reduce using rule 89 (other_function -> IDENT ( ) .)
    AND             reduce using rule 89 (other_function -> IDENT ( ) .)
    XOR             reduce using rule 89 (other_function -> IDENT ( ) .)
    AS              reduce using rule 89 (other_function -> IDENT ( ) .)
    IDENT           reduce using rule 89 (other_function -> IDENT ( ) .)
    ,               reduce using rule 89 (other_function -> IDENT ( ) .)
    INTO            reduce using rule 89 (other_function -> IDENT ( ) .)
    FROM            reduce using rule 89 (other_function -> IDENT ( ) .)
    ORDER           reduce using rule 89 (other_function -> IDENT ( ) .)
    FOR             reduce using rule 89 (other_function -> IDENT ( ) .)
    LOCK            reduce using rule 89 (other_function -> IDENT ( ) .)
    LIMIT           reduce using rule 89 (other_function -> IDENT ( ) .)
    UNION           reduce using rule 89 (other_function -> IDENT ( ) .)
    DELIM           reduce using rule 89 (other_function -> IDENT ( ) .)
    ;               reduce using rule 89 (other_function -> IDENT ( ) .)
    )               reduce using rule 89 (other_function -> IDENT ( ) .)
    ON              reduce using rule 89 (other_function -> IDENT ( ) .)
    USING           reduce using rule 89 (other_function -> IDENT ( ) .)
    ASC             reduce using rule 89 (other_function -> IDENT ( ) .)
    DESC            reduce using rule 89 (other_function -> IDENT ( ) .)
    WHERE           reduce using rule 89 (other_function -> IDENT ( ) .)
    GROUP           reduce using rule 89 (other_function -> IDENT ( ) .)
    HAVING          reduce using rule 89 (other_function -> IDENT ( ) .)
    JOIN            reduce using rule 89 (other_function -> IDENT ( ) .)
    INNER           reduce using rule 89 (other_function -> IDENT ( ) .)
    CROSS           reduce using rule 89 (other_function -> IDENT ( ) .)
    LEFT            reduce using rule 89 (other_function -> IDENT ( ) .)
    RIGHT           reduce using rule 89 (other_function -> IDENT ( ) .)
    NATURAL         reduce using rule 89 (other_function -> IDENT ( ) .)
    WITH            reduce using rule 89 (other_function -> IDENT ( ) .)
    DO              reduce using rule 89 (other_function -> IDENT ( ) .)
    WHEN            reduce using rule 89 (other_function -> IDENT ( ) .)
    END             reduce using rule 89 (other_function -> IDENT ( ) .)
    ESCAPE          reduce using rule 89 (other_function -> IDENT ( ) .)


state 402

    (60) simple_expr -> EXISTS ( subquery . )

    )               shift and go to state 521


state 403

    (86) max_function -> MAX ( opt_distinct . expr )
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 522
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 404

    (79) bit_function -> BIT_OR ( expr . )
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    )               shift and go to state 523
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 405

    (426) select_alias -> AS IDENT .

    ,               reduce using rule 426 (select_alias -> AS IDENT .)
    INTO            reduce using rule 426 (select_alias -> AS IDENT .)
    FROM            reduce using rule 426 (select_alias -> AS IDENT .)
    ORDER           reduce using rule 426 (select_alias -> AS IDENT .)
    FOR             reduce using rule 426 (select_alias -> AS IDENT .)
    LOCK            reduce using rule 426 (select_alias -> AS IDENT .)
    LIMIT           reduce using rule 426 (select_alias -> AS IDENT .)
    UNION           reduce using rule 426 (select_alias -> AS IDENT .)
    DELIM           reduce using rule 426 (select_alias -> AS IDENT .)
    ;               reduce using rule 426 (select_alias -> AS IDENT .)
    )               reduce using rule 426 (select_alias -> AS IDENT .)
    ON              reduce using rule 426 (select_alias -> AS IDENT .)


state 406

    (9) expr -> expr AND expr .
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    OR              reduce using rule 9 (expr -> expr AND expr .)
    AND             reduce using rule 9 (expr -> expr AND expr .)
    XOR             reduce using rule 9 (expr -> expr AND expr .)
    AS              reduce using rule 9 (expr -> expr AND expr .)
    IDENT           reduce using rule 9 (expr -> expr AND expr .)
    ,               reduce using rule 9 (expr -> expr AND expr .)
    INTO            reduce using rule 9 (expr -> expr AND expr .)
    FROM            reduce using rule 9 (expr -> expr AND expr .)
    ORDER           reduce using rule 9 (expr -> expr AND expr .)
    FOR             reduce using rule 9 (expr -> expr AND expr .)
    LOCK            reduce using rule 9 (expr -> expr AND expr .)
    LIMIT           reduce using rule 9 (expr -> expr AND expr .)
    UNION           reduce using rule 9 (expr -> expr AND expr .)
    DELIM           reduce using rule 9 (expr -> expr AND expr .)
    ;               reduce using rule 9 (expr -> expr AND expr .)
    )               reduce using rule 9 (expr -> expr AND expr .)
    ON              reduce using rule 9 (expr -> expr AND expr .)
    ASC             reduce using rule 9 (expr -> expr AND expr .)
    DESC            reduce using rule 9 (expr -> expr AND expr .)
    THEN            reduce using rule 9 (expr -> expr AND expr .)
    USING           reduce using rule 9 (expr -> expr AND expr .)
    WHERE           reduce using rule 9 (expr -> expr AND expr .)
    GROUP           reduce using rule 9 (expr -> expr AND expr .)
    HAVING          reduce using rule 9 (expr -> expr AND expr .)
    JOIN            reduce using rule 9 (expr -> expr AND expr .)
    INNER           reduce using rule 9 (expr -> expr AND expr .)
    CROSS           reduce using rule 9 (expr -> expr AND expr .)
    LEFT            reduce using rule 9 (expr -> expr AND expr .)
    RIGHT           reduce using rule 9 (expr -> expr AND expr .)
    NATURAL         reduce using rule 9 (expr -> expr AND expr .)
    WITH            reduce using rule 9 (expr -> expr AND expr .)
    DO              reduce using rule 9 (expr -> expr AND expr .)
    WHEN            reduce using rule 9 (expr -> expr AND expr .)
    END             reduce using rule 9 (expr -> expr AND expr .)

  ! OR              [ shift and go to state 268 ]
  ! AND             [ shift and go to state 266 ]
  ! XOR             [ shift and go to state 267 ]


state 407

    (10) expr -> expr XOR expr .
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    OR              reduce using rule 10 (expr -> expr XOR expr .)
    AND             reduce using rule 10 (expr -> expr XOR expr .)
    XOR             reduce using rule 10 (expr -> expr XOR expr .)
    AS              reduce using rule 10 (expr -> expr XOR expr .)
    IDENT           reduce using rule 10 (expr -> expr XOR expr .)
    ,               reduce using rule 10 (expr -> expr XOR expr .)
    INTO            reduce using rule 10 (expr -> expr XOR expr .)
    FROM            reduce using rule 10 (expr -> expr XOR expr .)
    ORDER           reduce using rule 10 (expr -> expr XOR expr .)
    FOR             reduce using rule 10 (expr -> expr XOR expr .)
    LOCK            reduce using rule 10 (expr -> expr XOR expr .)
    LIMIT           reduce using rule 10 (expr -> expr XOR expr .)
    UNION           reduce using rule 10 (expr -> expr XOR expr .)
    DELIM           reduce using rule 10 (expr -> expr XOR expr .)
    ;               reduce using rule 10 (expr -> expr XOR expr .)
    )               reduce using rule 10 (expr -> expr XOR expr .)
    ON              reduce using rule 10 (expr -> expr XOR expr .)
    ASC             reduce using rule 10 (expr -> expr XOR expr .)
    DESC            reduce using rule 10 (expr -> expr XOR expr .)
    THEN            reduce using rule 10 (expr -> expr XOR expr .)
    USING           reduce using rule 10 (expr -> expr XOR expr .)
    WHERE           reduce using rule 10 (expr -> expr XOR expr .)
    GROUP           reduce using rule 10 (expr -> expr XOR expr .)
    HAVING          reduce using rule 10 (expr -> expr XOR expr .)
    JOIN            reduce using rule 10 (expr -> expr XOR expr .)
    INNER           reduce using rule 10 (expr -> expr XOR expr .)
    CROSS           reduce using rule 10 (expr -> expr XOR expr .)
    LEFT            reduce using rule 10 (expr -> expr XOR expr .)
    RIGHT           reduce using rule 10 (expr -> expr XOR expr .)
    NATURAL         reduce using rule 10 (expr -> expr XOR expr .)
    WITH            reduce using rule 10 (expr -> expr XOR expr .)
    DO              reduce using rule 10 (expr -> expr XOR expr .)
    WHEN            reduce using rule 10 (expr -> expr XOR expr .)
    END             reduce using rule 10 (expr -> expr XOR expr .)

  ! OR              [ shift and go to state 268 ]
  ! AND             [ shift and go to state 266 ]
  ! XOR             [ shift and go to state 267 ]


state 408

    (8) expr -> expr OR expr .
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    OR              reduce using rule 8 (expr -> expr OR expr .)
    AS              reduce using rule 8 (expr -> expr OR expr .)
    IDENT           reduce using rule 8 (expr -> expr OR expr .)
    ,               reduce using rule 8 (expr -> expr OR expr .)
    INTO            reduce using rule 8 (expr -> expr OR expr .)
    FROM            reduce using rule 8 (expr -> expr OR expr .)
    ORDER           reduce using rule 8 (expr -> expr OR expr .)
    FOR             reduce using rule 8 (expr -> expr OR expr .)
    LOCK            reduce using rule 8 (expr -> expr OR expr .)
    LIMIT           reduce using rule 8 (expr -> expr OR expr .)
    UNION           reduce using rule 8 (expr -> expr OR expr .)
    DELIM           reduce using rule 8 (expr -> expr OR expr .)
    ;               reduce using rule 8 (expr -> expr OR expr .)
    )               reduce using rule 8 (expr -> expr OR expr .)
    ON              reduce using rule 8 (expr -> expr OR expr .)
    ASC             reduce using rule 8 (expr -> expr OR expr .)
    DESC            reduce using rule 8 (expr -> expr OR expr .)
    THEN            reduce using rule 8 (expr -> expr OR expr .)
    USING           reduce using rule 8 (expr -> expr OR expr .)
    WHERE           reduce using rule 8 (expr -> expr OR expr .)
    GROUP           reduce using rule 8 (expr -> expr OR expr .)
    HAVING          reduce using rule 8 (expr -> expr OR expr .)
    JOIN            reduce using rule 8 (expr -> expr OR expr .)
    INNER           reduce using rule 8 (expr -> expr OR expr .)
    CROSS           reduce using rule 8 (expr -> expr OR expr .)
    LEFT            reduce using rule 8 (expr -> expr OR expr .)
    RIGHT           reduce using rule 8 (expr -> expr OR expr .)
    NATURAL         reduce using rule 8 (expr -> expr OR expr .)
    WITH            reduce using rule 8 (expr -> expr OR expr .)
    DO              reduce using rule 8 (expr -> expr OR expr .)
    WHEN            reduce using rule 8 (expr -> expr OR expr .)
    END             reduce using rule 8 (expr -> expr OR expr .)
    AND             shift and go to state 266
    XOR             shift and go to state 267

  ! AND             [ reduce using rule 8 (expr -> expr OR expr .) ]
  ! XOR             [ reduce using rule 8 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 268 ]


state 409

    (87) min_function -> MIN ( opt_distinct . expr )
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 524
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 410

    (61) simple_expr -> ( expr_list ) .

    BITWISE_OR      reduce using rule 61 (simple_expr -> ( expr_list ) .)
    BITWISE_AND     reduce using rule 61 (simple_expr -> ( expr_list ) .)
    SHL             reduce using rule 61 (simple_expr -> ( expr_list ) .)
    SHR             reduce using rule 61 (simple_expr -> ( expr_list ) .)
    PLUS            reduce using rule 61 (simple_expr -> ( expr_list ) .)
    MINUS           reduce using rule 61 (simple_expr -> ( expr_list ) .)
    TIMES           reduce using rule 61 (simple_expr -> ( expr_list ) .)
    DIV             reduce using rule 61 (simple_expr -> ( expr_list ) .)
    MOD             reduce using rule 61 (simple_expr -> ( expr_list ) .)
    BITWISE_XOR     reduce using rule 61 (simple_expr -> ( expr_list ) .)
    SOUNDS          reduce using rule 61 (simple_expr -> ( expr_list ) .)
    NOT             reduce using rule 61 (simple_expr -> ( expr_list ) .)
    LOGICAL_NOT     reduce using rule 61 (simple_expr -> ( expr_list ) .)
    IN              reduce using rule 61 (simple_expr -> ( expr_list ) .)
    BETWEEN         reduce using rule 61 (simple_expr -> ( expr_list ) .)
    LIKE            reduce using rule 61 (simple_expr -> ( expr_list ) .)
    REGEXP          reduce using rule 61 (simple_expr -> ( expr_list ) .)
    IS              reduce using rule 61 (simple_expr -> ( expr_list ) .)
    NULL_SAFE       reduce using rule 61 (simple_expr -> ( expr_list ) .)
    EQ              reduce using rule 61 (simple_expr -> ( expr_list ) .)
    GE              reduce using rule 61 (simple_expr -> ( expr_list ) .)
    GT              reduce using rule 61 (simple_expr -> ( expr_list ) .)
    LE              reduce using rule 61 (simple_expr -> ( expr_list ) .)
    LT              reduce using rule 61 (simple_expr -> ( expr_list ) .)
    NE              reduce using rule 61 (simple_expr -> ( expr_list ) .)
    OR              reduce using rule 61 (simple_expr -> ( expr_list ) .)
    AND             reduce using rule 61 (simple_expr -> ( expr_list ) .)
    XOR             reduce using rule 61 (simple_expr -> ( expr_list ) .)
    AS              reduce using rule 61 (simple_expr -> ( expr_list ) .)
    IDENT           reduce using rule 61 (simple_expr -> ( expr_list ) .)
    ,               reduce using rule 61 (simple_expr -> ( expr_list ) .)
    INTO            reduce using rule 61 (simple_expr -> ( expr_list ) .)
    FROM            reduce using rule 61 (simple_expr -> ( expr_list ) .)
    ORDER           reduce using rule 61 (simple_expr -> ( expr_list ) .)
    FOR             reduce using rule 61 (simple_expr -> ( expr_list ) .)
    LOCK            reduce using rule 61 (simple_expr -> ( expr_list ) .)
    LIMIT           reduce using rule 61 (simple_expr -> ( expr_list ) .)
    UNION           reduce using rule 61 (simple_expr -> ( expr_list ) .)
    DELIM           reduce using rule 61 (simple_expr -> ( expr_list ) .)
    ;               reduce using rule 61 (simple_expr -> ( expr_list ) .)
    )               reduce using rule 61 (simple_expr -> ( expr_list ) .)
    ON              reduce using rule 61 (simple_expr -> ( expr_list ) .)
    USING           reduce using rule 61 (simple_expr -> ( expr_list ) .)
    ASC             reduce using rule 61 (simple_expr -> ( expr_list ) .)
    DESC            reduce using rule 61 (simple_expr -> ( expr_list ) .)
    WHERE           reduce using rule 61 (simple_expr -> ( expr_list ) .)
    GROUP           reduce using rule 61 (simple_expr -> ( expr_list ) .)
    HAVING          reduce using rule 61 (simple_expr -> ( expr_list ) .)
    JOIN            reduce using rule 61 (simple_expr -> ( expr_list ) .)
    INNER           reduce using rule 61 (simple_expr -> ( expr_list ) .)
    CROSS           reduce using rule 61 (simple_expr -> ( expr_list ) .)
    LEFT            reduce using rule 61 (simple_expr -> ( expr_list ) .)
    RIGHT           reduce using rule 61 (simple_expr -> ( expr_list ) .)
    NATURAL         reduce using rule 61 (simple_expr -> ( expr_list ) .)
    WITH            reduce using rule 61 (simple_expr -> ( expr_list ) .)
    DO              reduce using rule 61 (simple_expr -> ( expr_list ) .)
    WHEN            reduce using rule 61 (simple_expr -> ( expr_list ) .)
    THEN            reduce using rule 61 (simple_expr -> ( expr_list ) .)
    END             reduce using rule 61 (simple_expr -> ( expr_list ) .)
    ESCAPE          reduce using rule 61 (simple_expr -> ( expr_list ) .)


state 411

    (32) expr_list -> expr , . expr_list
    (31) expr_list -> . expr
    (32) expr_list -> . expr , expr_list
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    expr_list                      shift and go to state 525
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 272
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 412

    (59) simple_expr -> ( subquery ) .

    BITWISE_OR      reduce using rule 59 (simple_expr -> ( subquery ) .)
    BITWISE_AND     reduce using rule 59 (simple_expr -> ( subquery ) .)
    SHL             reduce using rule 59 (simple_expr -> ( subquery ) .)
    SHR             reduce using rule 59 (simple_expr -> ( subquery ) .)
    PLUS            reduce using rule 59 (simple_expr -> ( subquery ) .)
    MINUS           reduce using rule 59 (simple_expr -> ( subquery ) .)
    TIMES           reduce using rule 59 (simple_expr -> ( subquery ) .)
    DIV             reduce using rule 59 (simple_expr -> ( subquery ) .)
    MOD             reduce using rule 59 (simple_expr -> ( subquery ) .)
    BITWISE_XOR     reduce using rule 59 (simple_expr -> ( subquery ) .)
    SOUNDS          reduce using rule 59 (simple_expr -> ( subquery ) .)
    NOT             reduce using rule 59 (simple_expr -> ( subquery ) .)
    LOGICAL_NOT     reduce using rule 59 (simple_expr -> ( subquery ) .)
    IN              reduce using rule 59 (simple_expr -> ( subquery ) .)
    BETWEEN         reduce using rule 59 (simple_expr -> ( subquery ) .)
    LIKE            reduce using rule 59 (simple_expr -> ( subquery ) .)
    REGEXP          reduce using rule 59 (simple_expr -> ( subquery ) .)
    IS              reduce using rule 59 (simple_expr -> ( subquery ) .)
    NULL_SAFE       reduce using rule 59 (simple_expr -> ( subquery ) .)
    EQ              reduce using rule 59 (simple_expr -> ( subquery ) .)
    GE              reduce using rule 59 (simple_expr -> ( subquery ) .)
    GT              reduce using rule 59 (simple_expr -> ( subquery ) .)
    LE              reduce using rule 59 (simple_expr -> ( subquery ) .)
    LT              reduce using rule 59 (simple_expr -> ( subquery ) .)
    NE              reduce using rule 59 (simple_expr -> ( subquery ) .)
    OR              reduce using rule 59 (simple_expr -> ( subquery ) .)
    AND             reduce using rule 59 (simple_expr -> ( subquery ) .)
    XOR             reduce using rule 59 (simple_expr -> ( subquery ) .)
    AS              reduce using rule 59 (simple_expr -> ( subquery ) .)
    IDENT           reduce using rule 59 (simple_expr -> ( subquery ) .)
    ,               reduce using rule 59 (simple_expr -> ( subquery ) .)
    INTO            reduce using rule 59 (simple_expr -> ( subquery ) .)
    FROM            reduce using rule 59 (simple_expr -> ( subquery ) .)
    ORDER           reduce using rule 59 (simple_expr -> ( subquery ) .)
    FOR             reduce using rule 59 (simple_expr -> ( subquery ) .)
    LOCK            reduce using rule 59 (simple_expr -> ( subquery ) .)
    LIMIT           reduce using rule 59 (simple_expr -> ( subquery ) .)
    UNION           reduce using rule 59 (simple_expr -> ( subquery ) .)
    DELIM           reduce using rule 59 (simple_expr -> ( subquery ) .)
    ;               reduce using rule 59 (simple_expr -> ( subquery ) .)
    )               reduce using rule 59 (simple_expr -> ( subquery ) .)
    ON              reduce using rule 59 (simple_expr -> ( subquery ) .)
    USING           reduce using rule 59 (simple_expr -> ( subquery ) .)
    ASC             reduce using rule 59 (simple_expr -> ( subquery ) .)
    DESC            reduce using rule 59 (simple_expr -> ( subquery ) .)
    WHERE           reduce using rule 59 (simple_expr -> ( subquery ) .)
    GROUP           reduce using rule 59 (simple_expr -> ( subquery ) .)
    HAVING          reduce using rule 59 (simple_expr -> ( subquery ) .)
    JOIN            reduce using rule 59 (simple_expr -> ( subquery ) .)
    INNER           reduce using rule 59 (simple_expr -> ( subquery ) .)
    CROSS           reduce using rule 59 (simple_expr -> ( subquery ) .)
    LEFT            reduce using rule 59 (simple_expr -> ( subquery ) .)
    RIGHT           reduce using rule 59 (simple_expr -> ( subquery ) .)
    NATURAL         reduce using rule 59 (simple_expr -> ( subquery ) .)
    WITH            reduce using rule 59 (simple_expr -> ( subquery ) .)
    DO              reduce using rule 59 (simple_expr -> ( subquery ) .)
    WHEN            reduce using rule 59 (simple_expr -> ( subquery ) .)
    THEN            reduce using rule 59 (simple_expr -> ( subquery ) .)
    END             reduce using rule 59 (simple_expr -> ( subquery ) .)
    ESCAPE          reduce using rule 59 (simple_expr -> ( subquery ) .)


state 413

    (433) select_item_list -> select_item , select_item_list .

    INTO            reduce using rule 433 (select_item_list -> select_item , select_item_list .)
    FROM            reduce using rule 433 (select_item_list -> select_item , select_item_list .)
    ORDER           reduce using rule 433 (select_item_list -> select_item , select_item_list .)
    FOR             reduce using rule 433 (select_item_list -> select_item , select_item_list .)
    LOCK            reduce using rule 433 (select_item_list -> select_item , select_item_list .)
    LIMIT           reduce using rule 433 (select_item_list -> select_item , select_item_list .)
    UNION           reduce using rule 433 (select_item_list -> select_item , select_item_list .)
    DELIM           reduce using rule 433 (select_item_list -> select_item , select_item_list .)
    ;               reduce using rule 433 (select_item_list -> select_item , select_item_list .)
    )               reduce using rule 433 (select_item_list -> select_item , select_item_list .)
    ON              reduce using rule 433 (select_item_list -> select_item , select_item_list .)


state 414

    (77) average_function -> AVG ( opt_distinct . expr )
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 526
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 415

    (297) union_select_init -> ( . select_paren ) union_opt
    (294) select_paren -> . SELECT select_init2
    (295) select_paren -> . ( select_paren )

    SELECT          shift and go to state 529
    (               shift and go to state 527

    select_paren                   shift and go to state 528

state 416

    (298) union_list -> UNION union_option union_select_init .

    DELIM           reduce using rule 298 (union_list -> UNION union_option union_select_init .)
    ;               reduce using rule 298 (union_list -> UNION union_option union_select_init .)
    )               reduce using rule 298 (union_list -> UNION union_option union_select_init .)
    ON              reduce using rule 298 (union_list -> UNION union_option union_select_init .)


state 417

    (296) union_select_init -> SELECT . select_init2
    (301) select_init2 -> . select_part2 union_clause
    (285) select_part2 -> . select_options select_item_list select_into select_lock_type
    (419) select_options -> .
    (420) select_options -> . select_option_list
    (423) select_option_list -> . select_option
    (424) select_option_list -> . select_option select_option_list
    (421) select_option -> . DISTINCT
    (422) select_option -> . ALL

    *               reduce using rule 419 (select_options -> .)
    IDENT           reduce using rule 419 (select_options -> .)
    NOT             reduce using rule 419 (select_options -> .)
    @               reduce using rule 419 (select_options -> .)
    (               reduce using rule 419 (select_options -> .)
    EXISTS          reduce using rule 419 (select_options -> .)
    ROW             reduce using rule 419 (select_options -> .)
    STRING          reduce using rule 419 (select_options -> .)
    NUMBER          reduce using rule 419 (select_options -> .)
    FLOAT_LIT       reduce using rule 419 (select_options -> .)
    CONVERT         reduce using rule 419 (select_options -> .)
    CAST            reduce using rule 419 (select_options -> .)
    AVG             reduce using rule 419 (select_options -> .)
    BIT_AND         reduce using rule 419 (select_options -> .)
    BIT_OR          reduce using rule 419 (select_options -> .)
    BIT_XOR         reduce using rule 419 (select_options -> .)
    COUNT           reduce using rule 419 (select_options -> .)
    MAX             reduce using rule 419 (select_options -> .)
    MIN             reduce using rule 419 (select_options -> .)
    SUM             reduce using rule 419 (select_options -> .)
    DISTINCT        shift and go to state 81
    ALL             shift and go to state 79

    select_option                  shift and go to state 80
    select_init2                   shift and go to state 530
    select_option_list             shift and go to state 83
    select_options                 shift and go to state 84
    select_part2                   shift and go to state 85

state 418

    (327) key_values -> key_value , . key_values
    (326) key_values -> . key_value
    (327) key_values -> . key_value , key_values
    (325) key_value -> . IDENT EQ expr_or_default

    IDENT           shift and go to state 282

    key_values                     shift and go to state 531
    key_value                      shift and go to state 281

state 419

    (325) key_value -> IDENT EQ . expr_or_default
    (254) expr_or_default -> . expr
    (255) expr_or_default -> . DEFAULT
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    DEFAULT         shift and go to state 462
    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    bit_function                   shift and go to state 153
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    average_function               shift and go to state 130
    other_function                 shift and go to state 154
    expr                           shift and go to state 464
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149
    expr_or_default                shift and go to state 532

state 420

    (334) update -> UPDATE ident_list SET key_values where . rows_limit
    (332) rows_limit -> .
    (333) rows_limit -> . LIMIT NUMBER

    DELIM           reduce using rule 332 (rows_limit -> .)
    ;               reduce using rule 332 (rows_limit -> .)
    LIMIT           shift and go to state 425

    rows_limit                     shift and go to state 533

state 421

    (540) opt_with_consistent_snapshot -> WITH CONSISTENT SNAPSHOT .

    DELIM           reduce using rule 540 (opt_with_consistent_snapshot -> WITH CONSISTENT SNAPSHOT .)
    ;               reduce using rule 540 (opt_with_consistent_snapshot -> WITH CONSISTENT SNAPSHOT .)


state 422

    (544) opt_chain -> AND NO CHAIN .

    NO              reduce using rule 544 (opt_chain -> AND NO CHAIN .)
    RELEASE         reduce using rule 544 (opt_chain -> AND NO CHAIN .)
    DELIM           reduce using rule 544 (opt_chain -> AND NO CHAIN .)
    ;               reduce using rule 544 (opt_chain -> AND NO CHAIN .)


state 423

    (547) opt_release -> NO RELEASE .

    DELIM           reduce using rule 547 (opt_release -> NO RELEASE .)
    ;               reduce using rule 547 (opt_release -> NO RELEASE .)


state 424

    (329) where -> WHERE expr .
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    LIMIT           reduce using rule 329 (where -> WHERE expr .)
    DELIM           reduce using rule 329 (where -> WHERE expr .)
    ;               reduce using rule 329 (where -> WHERE expr .)
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 425

    (333) rows_limit -> LIMIT . NUMBER

    NUMBER          shift and go to state 534


state 426

    (340) delete -> DELETE delete_options FROM IDENT where rows_limit .

    DELIM           reduce using rule 340 (delete -> DELETE delete_options FROM IDENT where rows_limit .)
    ;               reduce using rule 340 (delete -> DELETE delete_options FROM IDENT where rows_limit .)


state 427

    (237) alter_rename_table -> RENAME ignore_to_or_as IDENT .

    ,               reduce using rule 237 (alter_rename_table -> RENAME ignore_to_or_as IDENT .)
    DELIM           reduce using rule 237 (alter_rename_table -> RENAME ignore_to_or_as IDENT .)
    ;               reduce using rule 237 (alter_rename_table -> RENAME ignore_to_or_as IDENT .)


state 428

    (120) column_name -> IDENT .

    IDENT           reduce using rule 120 (column_name -> IDENT .)
    ,               reduce using rule 120 (column_name -> IDENT .)
    )               reduce using rule 120 (column_name -> IDENT .)
    VARCHAR         reduce using rule 120 (column_name -> IDENT .)
    DATE            reduce using rule 120 (column_name -> IDENT .)
    TIME            reduce using rule 120 (column_name -> IDENT .)
    TIMESTAMP       reduce using rule 120 (column_name -> IDENT .)
    DATETIME        reduce using rule 120 (column_name -> IDENT .)
    TINYBLOB        reduce using rule 120 (column_name -> IDENT .)
    BLOB            reduce using rule 120 (column_name -> IDENT .)
    MEDIUMBLOB      reduce using rule 120 (column_name -> IDENT .)
    LONGBLOB        reduce using rule 120 (column_name -> IDENT .)
    TINYINT         reduce using rule 120 (column_name -> IDENT .)
    SMALLINT        reduce using rule 120 (column_name -> IDENT .)
    MEDIUMINT       reduce using rule 120 (column_name -> IDENT .)
    INT             reduce using rule 120 (column_name -> IDENT .)
    INTEGER         reduce using rule 120 (column_name -> IDENT .)
    BIGINT          reduce using rule 120 (column_name -> IDENT .)
    FLOAT           reduce using rule 120 (column_name -> IDENT .)
    DECIMAL         reduce using rule 120 (column_name -> IDENT .)
    NUMERIC         reduce using rule 120 (column_name -> IDENT .)
    CHAR            reduce using rule 120 (column_name -> IDENT .)
    CHARACTER       reduce using rule 120 (column_name -> IDENT .)
    TINYTEXT        reduce using rule 120 (column_name -> IDENT .)
    TEXT            reduce using rule 120 (column_name -> IDENT .)
    MEDIUMTEXT      reduce using rule 120 (column_name -> IDENT .)
    LONGTEXT        reduce using rule 120 (column_name -> IDENT .)


state 429

    (231) change_column -> MODIFY ignore_column column_name . column_statement position_opt
    (195) column_statement -> . data_type column_options
    (180) data_type -> . integer_statement
    (181) data_type -> . double_precision_statement
    (182) data_type -> . character_statement
    (183) data_type -> . string_statement
    (184) data_type -> . text_statement
    (185) data_type -> . simple_statement
    (186) data_type -> . binary_statement
    (161) integer_statement -> . integer_type limit_opt unsigned_opt
    (162) double_precision_statement -> . double_precision_type bidimensional_limit_opt unsigned_opt
    (165) character_statement -> . check_char_or_character limit_opt
    (166) string_statement -> . VARCHAR limit
    (171) text_statement -> . text_type
    (172) simple_statement -> . DATE
    (173) simple_statement -> . TIME
    (174) simple_statement -> . TIMESTAMP
    (175) simple_statement -> . DATETIME
    (176) binary_statement -> . TINYBLOB
    (177) binary_statement -> . BLOB
    (178) binary_statement -> . MEDIUMBLOB
    (179) binary_statement -> . LONGBLOB
    (130) integer_type -> . TINYINT
    (131) integer_type -> . SMALLINT
    (132) integer_type -> . MEDIUMINT
    (133) integer_type -> . INT
    (134) integer_type -> . INTEGER
    (135) integer_type -> . BIGINT
    (136) double_precision_type -> . FLOAT
    (137) double_precision_type -> . DECIMAL
    (138) double_precision_type -> . NUMERIC
    (163) check_char_or_character -> . CHAR
    (164) check_char_or_character -> . CHARACTER
    (167) text_type -> . TINYTEXT
    (168) text_type -> . TEXT
    (169) text_type -> . MEDIUMTEXT
    (170) text_type -> . LONGTEXT

    VARCHAR         shift and go to state 545
    DATE            shift and go to state 541
    TIME            shift and go to state 569
    TIMESTAMP       shift and go to state 564
    DATETIME        shift and go to state 558
    TINYBLOB        shift and go to state 571
    BLOB            shift and go to state 567
    MEDIUMBLOB      shift and go to state 544
    LONGBLOB        shift and go to state 570
    TINYINT         shift and go to state 539
    SMALLINT        shift and go to state 543
    MEDIUMINT       shift and go to state 536
    INT             shift and go to state 563
    INTEGER         shift and go to state 554
    BIGINT          shift and go to state 540
    FLOAT           shift and go to state 565
    DECIMAL         shift and go to state 557
    NUMERIC         shift and go to state 550
    CHAR            shift and go to state 537
    CHARACTER       shift and go to state 548
    TINYTEXT        shift and go to state 562
    TEXT            shift and go to state 559
    MEDIUMTEXT      shift and go to state 566
    LONGTEXT        shift and go to state 535

    check_char_or_character        shift and go to state 568
    data_type                      shift and go to state 555
    double_precision_type          shift and go to state 546
    string_statement               shift and go to state 547
    simple_statement               shift and go to state 556
    column_statement               shift and go to state 549
    binary_statement               shift and go to state 542
    integer_type                   shift and go to state 538
    double_precision_statement     shift and go to state 552
    text_statement                 shift and go to state 553
    character_statement            shift and go to state 560
    integer_statement              shift and go to state 551
    text_type                      shift and go to state 561

state 430

    (232) change_default -> ALTER ignore_column IDENT . SET DEFAULT literal
    (233) change_default -> ALTER ignore_column IDENT . DROP DEFAULT

    SET             shift and go to state 572
    DROP            shift and go to state 573


state 431

    (230) change_column -> CHANGE ignore_column column_name . column_name column_statement position_opt
    (120) column_name -> . IDENT

    IDENT           shift and go to state 428

    column_name                    shift and go to state 574

state 432

    (236) remove_index -> DROP check_index_or_key IDENT .

    ,               reduce using rule 236 (remove_index -> DROP check_index_or_key IDENT .)
    DELIM           reduce using rule 236 (remove_index -> DROP check_index_or_key IDENT .)
    ;               reduce using rule 236 (remove_index -> DROP check_index_or_key IDENT .)


state 433

    (235) remove_primary_key -> DROP PRIMARY KEY .

    ,               reduce using rule 235 (remove_primary_key -> DROP PRIMARY KEY .)
    DELIM           reduce using rule 235 (remove_primary_key -> DROP PRIMARY KEY .)
    ;               reduce using rule 235 (remove_primary_key -> DROP PRIMARY KEY .)


state 434

    (234) remove_column -> DROP ignore_column IDENT .

    ,               reduce using rule 234 (remove_column -> DROP ignore_column IDENT .)
    DELIM           reduce using rule 234 (remove_column -> DROP ignore_column IDENT .)
    ;               reduce using rule 234 (remove_column -> DROP ignore_column IDENT .)


state 435

    (248) alter_specifications -> alter_specification , alter_specifications .

    DELIM           reduce using rule 248 (alter_specifications -> alter_specification , alter_specifications .)
    ;               reduce using rule 248 (alter_specifications -> alter_specification , alter_specifications .)


state 436

    (119) constraint_opt -> CONSTRAINT IDENT .

    UNIQUE          reduce using rule 119 (constraint_opt -> CONSTRAINT IDENT .)
    PRIMARY         reduce using rule 119 (constraint_opt -> CONSTRAINT IDENT .)


state 437

    (227) add_index -> ADD check_index_or_key index_name_opt . ( column_names )

    (               shift and go to state 575


state 438

    (127) index_name_opt -> IDENT .

    (               reduce using rule 127 (index_name_opt -> IDENT .)


state 439

    (229) add_primary_key -> ADD constraint_opt PRIMARY . KEY ( column_names )

    KEY             shift and go to state 576


state 440

    (228) add_index -> ADD constraint_opt UNIQUE . ignore_index_or_key index_name_opt ( column_names )
    (104) ignore_index_or_key -> . KEY
    (105) ignore_index_or_key -> . INDEX
    (106) ignore_index_or_key -> .

    KEY             shift and go to state 578
    INDEX           shift and go to state 577
    IDENT           reduce using rule 106 (ignore_index_or_key -> .)
    (               reduce using rule 106 (ignore_index_or_key -> .)

    ignore_index_or_key            shift and go to state 579

state 441

    (226) add_column -> ADD ignore_column column_name . column_statement position_opt
    (195) column_statement -> . data_type column_options
    (180) data_type -> . integer_statement
    (181) data_type -> . double_precision_statement
    (182) data_type -> . character_statement
    (183) data_type -> . string_statement
    (184) data_type -> . text_statement
    (185) data_type -> . simple_statement
    (186) data_type -> . binary_statement
    (161) integer_statement -> . integer_type limit_opt unsigned_opt
    (162) double_precision_statement -> . double_precision_type bidimensional_limit_opt unsigned_opt
    (165) character_statement -> . check_char_or_character limit_opt
    (166) string_statement -> . VARCHAR limit
    (171) text_statement -> . text_type
    (172) simple_statement -> . DATE
    (173) simple_statement -> . TIME
    (174) simple_statement -> . TIMESTAMP
    (175) simple_statement -> . DATETIME
    (176) binary_statement -> . TINYBLOB
    (177) binary_statement -> . BLOB
    (178) binary_statement -> . MEDIUMBLOB
    (179) binary_statement -> . LONGBLOB
    (130) integer_type -> . TINYINT
    (131) integer_type -> . SMALLINT
    (132) integer_type -> . MEDIUMINT
    (133) integer_type -> . INT
    (134) integer_type -> . INTEGER
    (135) integer_type -> . BIGINT
    (136) double_precision_type -> . FLOAT
    (137) double_precision_type -> . DECIMAL
    (138) double_precision_type -> . NUMERIC
    (163) check_char_or_character -> . CHAR
    (164) check_char_or_character -> . CHARACTER
    (167) text_type -> . TINYTEXT
    (168) text_type -> . TEXT
    (169) text_type -> . MEDIUMTEXT
    (170) text_type -> . LONGTEXT

    VARCHAR         shift and go to state 545
    DATE            shift and go to state 541
    TIME            shift and go to state 569
    TIMESTAMP       shift and go to state 564
    DATETIME        shift and go to state 558
    TINYBLOB        shift and go to state 571
    BLOB            shift and go to state 567
    MEDIUMBLOB      shift and go to state 544
    LONGBLOB        shift and go to state 570
    TINYINT         shift and go to state 539
    SMALLINT        shift and go to state 543
    MEDIUMINT       shift and go to state 536
    INT             shift and go to state 563
    INTEGER         shift and go to state 554
    BIGINT          shift and go to state 540
    FLOAT           shift and go to state 565
    DECIMAL         shift and go to state 557
    NUMERIC         shift and go to state 550
    CHAR            shift and go to state 537
    CHARACTER       shift and go to state 548
    TINYTEXT        shift and go to state 562
    TEXT            shift and go to state 559
    MEDIUMTEXT      shift and go to state 566
    LONGTEXT        shift and go to state 535

    check_char_or_character        shift and go to state 568
    data_type                      shift and go to state 555
    double_precision_type          shift and go to state 546
    string_statement               shift and go to state 547
    simple_statement               shift and go to state 556
    column_statement               shift and go to state 580
    binary_statement               shift and go to state 542
    integer_type                   shift and go to state 538
    double_precision_statement     shift and go to state 552
    text_statement                 shift and go to state 553
    character_statement            shift and go to state 560
    integer_statement              shift and go to state 551
    text_type                      shift and go to state 561

state 442

    (262) opt_insert_update -> ON . DUPLICATE KEY UPDATE insert_update_list

    DUPLICATE       shift and go to state 581


state 443

    (319) insert -> INSERT insert_lock_option opt_ignore insert2 insert_field_spec opt_insert_update .

    DELIM           reduce using rule 319 (insert -> INSERT insert_lock_option opt_ignore insert2 insert_field_spec opt_insert_update .)
    ;               reduce using rule 319 (insert -> INSERT insert_lock_option opt_ignore insert2 insert_field_spec opt_insert_update .)


state 444

    (124) index_statement -> INDEX . IDENT ( column_names )

    IDENT           shift and go to state 582


state 445

    (198) create_statement -> index_statement .

    ,               reduce using rule 198 (create_statement -> index_statement .)
    )               reduce using rule 198 (create_statement -> index_statement .)


state 446

    (123) primary_key_statement -> constraint_opt . PRIMARY KEY ( column_names )
    (128) unique_statement -> constraint_opt . UNIQUE ignore_index_or_key index_name_opt ( column_names )

    PRIMARY         shift and go to state 583
    UNIQUE          shift and go to state 584


state 447

    (129) col_name -> IDENT .

    VARCHAR         reduce using rule 129 (col_name -> IDENT .)
    DATE            reduce using rule 129 (col_name -> IDENT .)
    TIME            reduce using rule 129 (col_name -> IDENT .)
    TIMESTAMP       reduce using rule 129 (col_name -> IDENT .)
    DATETIME        reduce using rule 129 (col_name -> IDENT .)
    TINYBLOB        reduce using rule 129 (col_name -> IDENT .)
    BLOB            reduce using rule 129 (col_name -> IDENT .)
    MEDIUMBLOB      reduce using rule 129 (col_name -> IDENT .)
    LONGBLOB        reduce using rule 129 (col_name -> IDENT .)
    TINYINT         reduce using rule 129 (col_name -> IDENT .)
    SMALLINT        reduce using rule 129 (col_name -> IDENT .)
    MEDIUMINT       reduce using rule 129 (col_name -> IDENT .)
    INT             reduce using rule 129 (col_name -> IDENT .)
    INTEGER         reduce using rule 129 (col_name -> IDENT .)
    BIGINT          reduce using rule 129 (col_name -> IDENT .)
    FLOAT           reduce using rule 129 (col_name -> IDENT .)
    DECIMAL         reduce using rule 129 (col_name -> IDENT .)
    NUMERIC         reduce using rule 129 (col_name -> IDENT .)
    CHAR            reduce using rule 129 (col_name -> IDENT .)
    CHARACTER       reduce using rule 129 (col_name -> IDENT .)
    TINYTEXT        reduce using rule 129 (col_name -> IDENT .)
    TEXT            reduce using rule 129 (col_name -> IDENT .)
    MEDIUMTEXT      reduce using rule 129 (col_name -> IDENT .)
    LONGTEXT        reduce using rule 129 (col_name -> IDENT .)


state 448

    (200) create_statements -> create_statement .
    (201) create_statements -> create_statement . , create_statements

    )               reduce using rule 200 (create_statements -> create_statement .)
    ,               shift and go to state 585


state 449

    (196) create_statement -> col_name . column_statement
    (195) column_statement -> . data_type column_options
    (180) data_type -> . integer_statement
    (181) data_type -> . double_precision_statement
    (182) data_type -> . character_statement
    (183) data_type -> . string_statement
    (184) data_type -> . text_statement
    (185) data_type -> . simple_statement
    (186) data_type -> . binary_statement
    (161) integer_statement -> . integer_type limit_opt unsigned_opt
    (162) double_precision_statement -> . double_precision_type bidimensional_limit_opt unsigned_opt
    (165) character_statement -> . check_char_or_character limit_opt
    (166) string_statement -> . VARCHAR limit
    (171) text_statement -> . text_type
    (172) simple_statement -> . DATE
    (173) simple_statement -> . TIME
    (174) simple_statement -> . TIMESTAMP
    (175) simple_statement -> . DATETIME
    (176) binary_statement -> . TINYBLOB
    (177) binary_statement -> . BLOB
    (178) binary_statement -> . MEDIUMBLOB
    (179) binary_statement -> . LONGBLOB
    (130) integer_type -> . TINYINT
    (131) integer_type -> . SMALLINT
    (132) integer_type -> . MEDIUMINT
    (133) integer_type -> . INT
    (134) integer_type -> . INTEGER
    (135) integer_type -> . BIGINT
    (136) double_precision_type -> . FLOAT
    (137) double_precision_type -> . DECIMAL
    (138) double_precision_type -> . NUMERIC
    (163) check_char_or_character -> . CHAR
    (164) check_char_or_character -> . CHARACTER
    (167) text_type -> . TINYTEXT
    (168) text_type -> . TEXT
    (169) text_type -> . MEDIUMTEXT
    (170) text_type -> . LONGTEXT

    VARCHAR         shift and go to state 545
    DATE            shift and go to state 541
    TIME            shift and go to state 569
    TIMESTAMP       shift and go to state 564
    DATETIME        shift and go to state 558
    TINYBLOB        shift and go to state 571
    BLOB            shift and go to state 567
    MEDIUMBLOB      shift and go to state 544
    LONGBLOB        shift and go to state 570
    TINYINT         shift and go to state 539
    SMALLINT        shift and go to state 543
    MEDIUMINT       shift and go to state 536
    INT             shift and go to state 563
    INTEGER         shift and go to state 554
    BIGINT          shift and go to state 540
    FLOAT           shift and go to state 565
    DECIMAL         shift and go to state 557
    NUMERIC         shift and go to state 550
    CHAR            shift and go to state 537
    CHARACTER       shift and go to state 548
    TINYTEXT        shift and go to state 562
    TEXT            shift and go to state 559
    MEDIUMTEXT      shift and go to state 566
    LONGTEXT        shift and go to state 535

    check_char_or_character        shift and go to state 568
    data_type                      shift and go to state 555
    double_precision_type          shift and go to state 546
    simple_statement               shift and go to state 556
    column_statement               shift and go to state 586
    binary_statement               shift and go to state 542
    integer_type                   shift and go to state 538
    text_statement                 shift and go to state 553
    double_precision_statement     shift and go to state 552
    string_statement               shift and go to state 547
    character_statement            shift and go to state 560
    integer_statement              shift and go to state 551
    text_type                      shift and go to state 561

state 450

    (213) create_table -> CREATE TABLE if_not_exists IDENT ( create_statements . ) table_options_opt

    )               shift and go to state 587


state 451

    (199) create_statement -> unique_statement .

    ,               reduce using rule 199 (create_statement -> unique_statement .)
    )               reduce using rule 199 (create_statement -> unique_statement .)


state 452

    (197) create_statement -> primary_key_statement .

    ,               reduce using rule 197 (create_statement -> primary_key_statement .)
    )               reduce using rule 197 (create_statement -> primary_key_statement .)


state 453

    (125) index_statement -> KEY . IDENT ( column_names )

    IDENT           shift and go to state 588


state 454

    (535) create_index -> CREATE unique_opt INDEX IDENT ON IDENT . ( ident_list )

    (               shift and go to state 589


state 455

    (418) create_trigger -> CREATE TRIGGER IDENT trigger_time trigger_event ON . IDENT FOR EACH ROW sp_proc_stmt

    IDENT           shift and go to state 590


state 456

    (221) drop_table -> DROP temporary TABLE if_exists ident_list opt_restrict_cascade .

    DELIM           reduce using rule 221 (drop_table -> DROP temporary TABLE if_exists ident_list opt_restrict_cascade .)
    ;               reduce using rule 221 (drop_table -> DROP temporary TABLE if_exists ident_list opt_restrict_cascade .)


state 457

    (256) equal -> EQ .

    DEFAULT         reduce using rule 256 (equal -> EQ .)
    NOT             reduce using rule 256 (equal -> EQ .)
    IDENT           reduce using rule 256 (equal -> EQ .)
    @               reduce using rule 256 (equal -> EQ .)
    (               reduce using rule 256 (equal -> EQ .)
    EXISTS          reduce using rule 256 (equal -> EQ .)
    ROW             reduce using rule 256 (equal -> EQ .)
    STRING          reduce using rule 256 (equal -> EQ .)
    NUMBER          reduce using rule 256 (equal -> EQ .)
    FLOAT_LIT       reduce using rule 256 (equal -> EQ .)
    CONVERT         reduce using rule 256 (equal -> EQ .)
    CAST            reduce using rule 256 (equal -> EQ .)
    AVG             reduce using rule 256 (equal -> EQ .)
    BIT_AND         reduce using rule 256 (equal -> EQ .)
    BIT_OR          reduce using rule 256 (equal -> EQ .)
    BIT_XOR         reduce using rule 256 (equal -> EQ .)
    COUNT           reduce using rule 256 (equal -> EQ .)
    MAX             reduce using rule 256 (equal -> EQ .)
    MIN             reduce using rule 256 (equal -> EQ .)
    SUM             reduce using rule 256 (equal -> EQ .)


state 458

    (307) ident_eq_value -> simple_ident_nospvar equal . expr_or_default
    (254) expr_or_default -> . expr
    (255) expr_or_default -> . DEFAULT
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    DEFAULT         shift and go to state 462
    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    bit_function                   shift and go to state 153
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    average_function               shift and go to state 130
    other_function                 shift and go to state 154
    expr                           shift and go to state 464
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149
    expr_or_default                shift and go to state 591

state 459

    (257) equal -> SET_VAR .

    DEFAULT         reduce using rule 257 (equal -> SET_VAR .)
    NOT             reduce using rule 257 (equal -> SET_VAR .)
    IDENT           reduce using rule 257 (equal -> SET_VAR .)
    @               reduce using rule 257 (equal -> SET_VAR .)
    (               reduce using rule 257 (equal -> SET_VAR .)
    EXISTS          reduce using rule 257 (equal -> SET_VAR .)
    ROW             reduce using rule 257 (equal -> SET_VAR .)
    STRING          reduce using rule 257 (equal -> SET_VAR .)
    NUMBER          reduce using rule 257 (equal -> SET_VAR .)
    FLOAT_LIT       reduce using rule 257 (equal -> SET_VAR .)
    CONVERT         reduce using rule 257 (equal -> SET_VAR .)
    CAST            reduce using rule 257 (equal -> SET_VAR .)
    AVG             reduce using rule 257 (equal -> SET_VAR .)
    BIT_AND         reduce using rule 257 (equal -> SET_VAR .)
    BIT_OR          reduce using rule 257 (equal -> SET_VAR .)
    BIT_XOR         reduce using rule 257 (equal -> SET_VAR .)
    COUNT           reduce using rule 257 (equal -> SET_VAR .)
    MAX             reduce using rule 257 (equal -> SET_VAR .)
    MIN             reduce using rule 257 (equal -> SET_VAR .)
    SUM             reduce using rule 257 (equal -> SET_VAR .)


state 460

    (309) ident_eq_list -> ident_eq_value , . ident_eq_list
    (308) ident_eq_list -> . ident_eq_value
    (309) ident_eq_list -> . ident_eq_value , ident_eq_list
    (307) ident_eq_value -> . simple_ident_nospvar equal expr_or_default
    (258) simple_ident_nospvar -> . IDENT

    IDENT           shift and go to state 330

    ident_eq_list                  shift and go to state 592
    simple_ident_nospvar           shift and go to state 329
    ident_eq_value                 shift and go to state 331

state 461

    (273) values_list -> no_braces , . values_list
    (272) values_list -> . no_braces
    (273) values_list -> . no_braces , values_list
    (271) no_braces -> . ( opt_values )

    (               shift and go to state 333

    no_braces                      shift and go to state 332
    values_list                    shift and go to state 593

state 462

    (255) expr_or_default -> DEFAULT .

    ,               reduce using rule 255 (expr_or_default -> DEFAULT .)
    )               reduce using rule 255 (expr_or_default -> DEFAULT .)
    WHERE           reduce using rule 255 (expr_or_default -> DEFAULT .)
    LIMIT           reduce using rule 255 (expr_or_default -> DEFAULT .)
    DELIM           reduce using rule 255 (expr_or_default -> DEFAULT .)
    ;               reduce using rule 255 (expr_or_default -> DEFAULT .)
    ON              reduce using rule 255 (expr_or_default -> DEFAULT .)


state 463

    (271) no_braces -> ( opt_values . )

    )               shift and go to state 594


state 464

    (254) expr_or_default -> expr .
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    ,               reduce using rule 254 (expr_or_default -> expr .)
    )               reduce using rule 254 (expr_or_default -> expr .)
    WHERE           reduce using rule 254 (expr_or_default -> expr .)
    LIMIT           reduce using rule 254 (expr_or_default -> expr .)
    DELIM           reduce using rule 254 (expr_or_default -> expr .)
    ;               reduce using rule 254 (expr_or_default -> expr .)
    ON              reduce using rule 254 (expr_or_default -> expr .)
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 465

    (268) opt_values -> values .

    )               reduce using rule 268 (opt_values -> values .)


state 466

    (269) values -> expr_or_default .
    (270) values -> expr_or_default . , values

    )               reduce using rule 269 (values -> expr_or_default .)
    ,               shift and go to state 595


state 467

    (303) insert_values -> ( . create_select ) union_opt
    (281) create_select -> . SELECT select_options select_item_list opt_select_from

    SELECT          shift and go to state 217

    create_select                  shift and go to state 341

state 468

    (305) insert_field_spec -> ( ) insert_values .

    DELIM           reduce using rule 305 (insert_field_spec -> ( ) insert_values .)
    ;               reduce using rule 305 (insert_field_spec -> ( ) insert_values .)
    ON              reduce using rule 305 (insert_field_spec -> ( ) insert_values .)


state 469

    (266) fields -> insert_ident , . fields
    (265) fields -> . insert_ident
    (266) fields -> . insert_ident , fields
    (263) insert_ident -> . simple_ident_nospvar
    (264) insert_ident -> . table_wild
    (258) simple_ident_nospvar -> . IDENT
    (428) table_wild -> . IDENT *

    IDENT           shift and go to state 337

    fields                         shift and go to state 596
    simple_ident_nospvar           shift and go to state 339
    insert_ident                   shift and go to state 340
    table_wild                     shift and go to state 343

state 470

    (303) insert_values -> ( create_select ) . union_opt
    (286) union_opt -> .
    (287) union_opt -> . union_list
    (293) union_opt -> . union_order_or_limit
    (298) union_list -> . UNION union_option union_select_init
    (292) union_order_or_limit -> . order_or_limit
    (290) order_or_limit -> . order_clause opt_limit_clause_init
    (291) order_or_limit -> . limit_clause
    (437) order_clause -> . ORDER BY order_list
    (447) limit_clause -> . LIMIT limit_options

    DELIM           reduce using rule 286 (union_opt -> .)
    ;               reduce using rule 286 (union_opt -> .)
    ON              reduce using rule 286 (union_opt -> .)
    UNION           shift and go to state 162
    ORDER           shift and go to state 228
    LIMIT           shift and go to state 372

    union_list                     shift and go to state 597
    union_opt                      shift and go to state 598
    order_clause                   shift and go to state 599
    union_order_or_limit           shift and go to state 600
    order_or_limit                 shift and go to state 601
    limit_clause                   shift and go to state 602

state 471

    (306) insert_field_spec -> ( fields ) . insert_values
    (274) insert_values -> . VALUES values_list
    (275) insert_values -> . VALUE values_list
    (302) insert_values -> . create_select union_clause
    (303) insert_values -> . ( create_select ) union_opt
    (281) create_select -> . SELECT select_options select_item_list opt_select_from

    VALUES          shift and go to state 214
    VALUE           shift and go to state 212
    (               shift and go to state 467
    SELECT          shift and go to state 217

    create_select                  shift and go to state 215
    insert_values                  shift and go to state 603

state 472

    (281) create_select -> SELECT select_options select_item_list . opt_select_from
    (276) opt_select_from -> . opt_limit_clause
    (280) opt_select_from -> . select_from select_lock_type
    (445) opt_limit_clause -> .
    (446) opt_limit_clause -> . limit_clause
    (517) select_from -> . FROM join_table_list where_clause group_clause having_clause opt_order_clause opt_limit_clause
    (518) select_from -> . FROM DUAL where_clause opt_limit_clause
    (447) limit_clause -> . LIMIT limit_options

    UNION           reduce using rule 445 (opt_limit_clause -> .)
    DELIM           reduce using rule 445 (opt_limit_clause -> .)
    ;               reduce using rule 445 (opt_limit_clause -> .)
    ON              reduce using rule 445 (opt_limit_clause -> .)
    )               reduce using rule 445 (opt_limit_clause -> .)
    FROM            shift and go to state 224
    LIMIT           shift and go to state 372

    select_from                    shift and go to state 604
    opt_limit_clause               shift and go to state 605
    opt_select_from                shift and go to state 606
    limit_clause                   shift and go to state 374

state 473

    (78) bit_function -> BIT_AND ( expr ) .

    BITWISE_OR      reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    BITWISE_AND     reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    SHL             reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    SHR             reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    PLUS            reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    MINUS           reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    TIMES           reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    DIV             reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    MOD             reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    BITWISE_XOR     reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    SOUNDS          reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    NOT             reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    LOGICAL_NOT     reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    IN              reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    BETWEEN         reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    LIKE            reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    REGEXP          reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    IS              reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    NULL_SAFE       reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    EQ              reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    GE              reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    GT              reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    LE              reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    LT              reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    NE              reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    OR              reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    AND             reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    XOR             reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    AS              reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    IDENT           reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    ,               reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    INTO            reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    FROM            reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    ORDER           reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    FOR             reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    LOCK            reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    LIMIT           reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    UNION           reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    DELIM           reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    ;               reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    )               reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    ON              reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    USING           reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    ASC             reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    DESC            reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    WHERE           reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    GROUP           reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    HAVING          reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    JOIN            reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    INNER           reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    CROSS           reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    LEFT            reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    RIGHT           reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    NATURAL         reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    WITH            reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    DO              reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    WHEN            reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    THEN            reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    END             reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)
    ESCAPE          reduce using rule 78 (bit_function -> BIT_AND ( expr ) .)


state 474

    (83) count_function -> COUNT ( opt_all * . )

    )               shift and go to state 607


state 475

    (84) count_function -> COUNT ( expr ) .

    BITWISE_OR      reduce using rule 84 (count_function -> COUNT ( expr ) .)
    BITWISE_AND     reduce using rule 84 (count_function -> COUNT ( expr ) .)
    SHL             reduce using rule 84 (count_function -> COUNT ( expr ) .)
    SHR             reduce using rule 84 (count_function -> COUNT ( expr ) .)
    PLUS            reduce using rule 84 (count_function -> COUNT ( expr ) .)
    MINUS           reduce using rule 84 (count_function -> COUNT ( expr ) .)
    TIMES           reduce using rule 84 (count_function -> COUNT ( expr ) .)
    DIV             reduce using rule 84 (count_function -> COUNT ( expr ) .)
    MOD             reduce using rule 84 (count_function -> COUNT ( expr ) .)
    BITWISE_XOR     reduce using rule 84 (count_function -> COUNT ( expr ) .)
    SOUNDS          reduce using rule 84 (count_function -> COUNT ( expr ) .)
    NOT             reduce using rule 84 (count_function -> COUNT ( expr ) .)
    LOGICAL_NOT     reduce using rule 84 (count_function -> COUNT ( expr ) .)
    IN              reduce using rule 84 (count_function -> COUNT ( expr ) .)
    BETWEEN         reduce using rule 84 (count_function -> COUNT ( expr ) .)
    LIKE            reduce using rule 84 (count_function -> COUNT ( expr ) .)
    REGEXP          reduce using rule 84 (count_function -> COUNT ( expr ) .)
    IS              reduce using rule 84 (count_function -> COUNT ( expr ) .)
    NULL_SAFE       reduce using rule 84 (count_function -> COUNT ( expr ) .)
    EQ              reduce using rule 84 (count_function -> COUNT ( expr ) .)
    GE              reduce using rule 84 (count_function -> COUNT ( expr ) .)
    GT              reduce using rule 84 (count_function -> COUNT ( expr ) .)
    LE              reduce using rule 84 (count_function -> COUNT ( expr ) .)
    LT              reduce using rule 84 (count_function -> COUNT ( expr ) .)
    NE              reduce using rule 84 (count_function -> COUNT ( expr ) .)
    OR              reduce using rule 84 (count_function -> COUNT ( expr ) .)
    AND             reduce using rule 84 (count_function -> COUNT ( expr ) .)
    XOR             reduce using rule 84 (count_function -> COUNT ( expr ) .)
    AS              reduce using rule 84 (count_function -> COUNT ( expr ) .)
    IDENT           reduce using rule 84 (count_function -> COUNT ( expr ) .)
    ,               reduce using rule 84 (count_function -> COUNT ( expr ) .)
    INTO            reduce using rule 84 (count_function -> COUNT ( expr ) .)
    FROM            reduce using rule 84 (count_function -> COUNT ( expr ) .)
    ORDER           reduce using rule 84 (count_function -> COUNT ( expr ) .)
    FOR             reduce using rule 84 (count_function -> COUNT ( expr ) .)
    LOCK            reduce using rule 84 (count_function -> COUNT ( expr ) .)
    LIMIT           reduce using rule 84 (count_function -> COUNT ( expr ) .)
    UNION           reduce using rule 84 (count_function -> COUNT ( expr ) .)
    DELIM           reduce using rule 84 (count_function -> COUNT ( expr ) .)
    ;               reduce using rule 84 (count_function -> COUNT ( expr ) .)
    )               reduce using rule 84 (count_function -> COUNT ( expr ) .)
    ON              reduce using rule 84 (count_function -> COUNT ( expr ) .)
    USING           reduce using rule 84 (count_function -> COUNT ( expr ) .)
    ASC             reduce using rule 84 (count_function -> COUNT ( expr ) .)
    DESC            reduce using rule 84 (count_function -> COUNT ( expr ) .)
    WHERE           reduce using rule 84 (count_function -> COUNT ( expr ) .)
    GROUP           reduce using rule 84 (count_function -> COUNT ( expr ) .)
    HAVING          reduce using rule 84 (count_function -> COUNT ( expr ) .)
    JOIN            reduce using rule 84 (count_function -> COUNT ( expr ) .)
    INNER           reduce using rule 84 (count_function -> COUNT ( expr ) .)
    CROSS           reduce using rule 84 (count_function -> COUNT ( expr ) .)
    LEFT            reduce using rule 84 (count_function -> COUNT ( expr ) .)
    RIGHT           reduce using rule 84 (count_function -> COUNT ( expr ) .)
    NATURAL         reduce using rule 84 (count_function -> COUNT ( expr ) .)
    WITH            reduce using rule 84 (count_function -> COUNT ( expr ) .)
    DO              reduce using rule 84 (count_function -> COUNT ( expr ) .)
    WHEN            reduce using rule 84 (count_function -> COUNT ( expr ) .)
    THEN            reduce using rule 84 (count_function -> COUNT ( expr ) .)
    END             reduce using rule 84 (count_function -> COUNT ( expr ) .)
    ESCAPE          reduce using rule 84 (count_function -> COUNT ( expr ) .)


state 476

    (85) count_function -> COUNT ( DISTINCT expr_list . )

    )               shift and go to state 608


state 477

    (63) convert_function -> CONVERT ( expr USING . IDENT )

    IDENT           shift and go to state 609


state 478

    (88) sum_function -> SUM ( opt_distinct expr . )
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    )               shift and go to state 610
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 479

    (493) join_clause -> NATURAL . JOIN

    JOIN            shift and go to state 611


state 480

    (498) join_table -> table_ref join_clause . table_factor opt_join_condition
    (485) table_factor -> . IDENT opt_table_alias opt_key_definition

    IDENT           shift and go to state 356

    table_factor                   shift and go to state 612

state 481

    (486) join_clause -> JOIN .

    IDENT           reduce using rule 486 (join_clause -> JOIN .)


state 482

    (488) join_clause -> CROSS . JOIN

    JOIN            shift and go to state 613


state 483

    (491) join_clause -> RIGHT . JOIN
    (492) join_clause -> RIGHT . OUTER JOIN

    JOIN            shift and go to state 615
    OUTER           shift and go to state 614


state 484

    (487) join_clause -> INNER . JOIN

    JOIN            shift and go to state 616


state 485

    (489) join_clause -> LEFT . JOIN
    (490) join_clause -> LEFT . OUTER JOIN

    JOIN            shift and go to state 618
    OUTER           shift and go to state 617


state 486

    (503) derived_table_list -> esc_table_ref , . derived_table_list
    (502) derived_table_list -> . esc_table_ref
    (503) derived_table_list -> . esc_table_ref , derived_table_list
    (501) esc_table_ref -> . table_ref
    (499) table_ref -> . table_factor
    (500) table_ref -> . join_table
    (485) table_factor -> . IDENT opt_table_alias opt_key_definition
    (498) join_table -> . table_ref join_clause table_factor opt_join_condition

    IDENT           shift and go to state 356

    table_factor                   shift and go to state 353
    derived_table_list             shift and go to state 619
    esc_table_ref                  shift and go to state 355
    join_table                     shift and go to state 358
    table_ref                      shift and go to state 354

state 487

    (485) table_factor -> IDENT opt_table_alias . opt_key_definition
    (484) opt_key_definition -> . opt_index_hints_list
    (482) opt_index_hints_list -> .
    (483) opt_index_hints_list -> . index_hints_list
    (480) index_hints_list -> . index_hint_definition
    (481) index_hints_list -> . index_hint_definition index_hints_list
    (479) index_hint_definition -> . index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list )
    (470) index_hint_type -> . FORCE
    (471) index_hint_type -> . IGNORE
    (472) index_hint_type -> . USE

    JOIN            reduce using rule 482 (opt_index_hints_list -> .)
    INNER           reduce using rule 482 (opt_index_hints_list -> .)
    CROSS           reduce using rule 482 (opt_index_hints_list -> .)
    LEFT            reduce using rule 482 (opt_index_hints_list -> .)
    RIGHT           reduce using rule 482 (opt_index_hints_list -> .)
    NATURAL         reduce using rule 482 (opt_index_hints_list -> .)
    ,               reduce using rule 482 (opt_index_hints_list -> .)
    WHERE           reduce using rule 482 (opt_index_hints_list -> .)
    GROUP           reduce using rule 482 (opt_index_hints_list -> .)
    HAVING          reduce using rule 482 (opt_index_hints_list -> .)
    ORDER           reduce using rule 482 (opt_index_hints_list -> .)
    LIMIT           reduce using rule 482 (opt_index_hints_list -> .)
    INTO            reduce using rule 482 (opt_index_hints_list -> .)
    FOR             reduce using rule 482 (opt_index_hints_list -> .)
    LOCK            reduce using rule 482 (opt_index_hints_list -> .)
    UNION           reduce using rule 482 (opt_index_hints_list -> .)
    DELIM           reduce using rule 482 (opt_index_hints_list -> .)
    ;               reduce using rule 482 (opt_index_hints_list -> .)
    )               reduce using rule 482 (opt_index_hints_list -> .)
    ON              reduce using rule 482 (opt_index_hints_list -> .)
    USING           reduce using rule 482 (opt_index_hints_list -> .)
    FORCE           shift and go to state 627
    IGNORE          shift and go to state 623
    USE             shift and go to state 620

    opt_key_definition             shift and go to state 621
    index_hint_type                shift and go to state 622
    index_hint_definition          shift and go to state 624
    index_hints_list               shift and go to state 625
    opt_index_hints_list           shift and go to state 626

state 488

    (465) opt_table_alias -> table_alias . IDENT

    IDENT           shift and go to state 628


state 489

    (462) table_alias -> AS .

    IDENT           reduce using rule 462 (table_alias -> AS .)


state 490

    (463) table_alias -> EQ .

    IDENT           reduce using rule 463 (table_alias -> EQ .)


state 491

    (518) select_from -> FROM DUAL where_clause . opt_limit_clause
    (445) opt_limit_clause -> .
    (446) opt_limit_clause -> . limit_clause
    (447) limit_clause -> . LIMIT limit_options

    INTO            reduce using rule 445 (opt_limit_clause -> .)
    FOR             reduce using rule 445 (opt_limit_clause -> .)
    LOCK            reduce using rule 445 (opt_limit_clause -> .)
    UNION           reduce using rule 445 (opt_limit_clause -> .)
    DELIM           reduce using rule 445 (opt_limit_clause -> .)
    ;               reduce using rule 445 (opt_limit_clause -> .)
    )               reduce using rule 445 (opt_limit_clause -> .)
    ON              reduce using rule 445 (opt_limit_clause -> .)
    LIMIT           shift and go to state 372

    limit_clause                   shift and go to state 374
    opt_limit_clause               shift and go to state 629

state 492

    (506) where_clause -> WHERE . expr
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 630
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 493

    (517) select_from -> FROM join_table_list where_clause . group_clause having_clause opt_order_clause opt_limit_clause
    (507) group_clause -> .
    (514) group_clause -> . GROUP BY group_list olap_opt

    HAVING          reduce using rule 507 (group_clause -> .)
    ORDER           reduce using rule 507 (group_clause -> .)
    LIMIT           reduce using rule 507 (group_clause -> .)
    INTO            reduce using rule 507 (group_clause -> .)
    FOR             reduce using rule 507 (group_clause -> .)
    LOCK            reduce using rule 507 (group_clause -> .)
    UNION           reduce using rule 507 (group_clause -> .)
    DELIM           reduce using rule 507 (group_clause -> .)
    ;               reduce using rule 507 (group_clause -> .)
    )               reduce using rule 507 (group_clause -> .)
    ON              reduce using rule 507 (group_clause -> .)
    GROUP           shift and go to state 632

    group_clause                   shift and go to state 631

state 494

    (456) select_var_ident -> @ IDENT .

    ,               reduce using rule 456 (select_var_ident -> @ IDENT .)
    FROM            reduce using rule 456 (select_var_ident -> @ IDENT .)
    FOR             reduce using rule 456 (select_var_ident -> @ IDENT .)
    LOCK            reduce using rule 456 (select_var_ident -> @ IDENT .)
    UNION           reduce using rule 456 (select_var_ident -> @ IDENT .)
    DELIM           reduce using rule 456 (select_var_ident -> @ IDENT .)
    ;               reduce using rule 456 (select_var_ident -> @ IDENT .)
    )               reduce using rule 456 (select_var_ident -> @ IDENT .)
    ON              reduce using rule 456 (select_var_ident -> @ IDENT .)


state 495

    (455) select_var_list -> select_var_ident , . select_var_list
    (454) select_var_list -> . select_var_ident
    (455) select_var_list -> . select_var_ident , select_var_list
    (456) select_var_ident -> . @ IDENT
    (457) select_var_ident -> . IDENT

    @               shift and go to state 362
    IDENT           shift and go to state 363

    select_var_ident               shift and go to state 366
    select_var_list                shift and go to state 633

state 496

    (437) order_clause -> ORDER BY order_list .

    LIMIT           reduce using rule 437 (order_clause -> ORDER BY order_list .)
    DELIM           reduce using rule 437 (order_clause -> ORDER BY order_list .)
    ;               reduce using rule 437 (order_clause -> ORDER BY order_list .)
    ON              reduce using rule 437 (order_clause -> ORDER BY order_list .)
    INTO            reduce using rule 437 (order_clause -> ORDER BY order_list .)
    FOR             reduce using rule 437 (order_clause -> ORDER BY order_list .)
    LOCK            reduce using rule 437 (order_clause -> ORDER BY order_list .)
    UNION           reduce using rule 437 (order_clause -> ORDER BY order_list .)
    )               reduce using rule 437 (order_clause -> ORDER BY order_list .)


state 497

    (443) order_list -> order_item .
    (444) order_list -> order_item . , order_list

    LIMIT           reduce using rule 443 (order_list -> order_item .)
    FOR             reduce using rule 443 (order_list -> order_item .)
    LOCK            reduce using rule 443 (order_list -> order_item .)
    UNION           reduce using rule 443 (order_list -> order_item .)
    DELIM           reduce using rule 443 (order_list -> order_item .)
    ;               reduce using rule 443 (order_list -> order_item .)
    )               reduce using rule 443 (order_list -> order_item .)
    ON              reduce using rule 443 (order_list -> order_item .)
    INTO            reduce using rule 443 (order_list -> order_item .)
    ,               shift and go to state 634


state 498

    (438) order_ident -> expr .
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    ASC             reduce using rule 438 (order_ident -> expr .)
    DESC            reduce using rule 438 (order_ident -> expr .)
    ,               reduce using rule 438 (order_ident -> expr .)
    LIMIT           reduce using rule 438 (order_ident -> expr .)
    FOR             reduce using rule 438 (order_ident -> expr .)
    LOCK            reduce using rule 438 (order_ident -> expr .)
    UNION           reduce using rule 438 (order_ident -> expr .)
    DELIM           reduce using rule 438 (order_ident -> expr .)
    ;               reduce using rule 438 (order_ident -> expr .)
    )               reduce using rule 438 (order_ident -> expr .)
    ON              reduce using rule 438 (order_ident -> expr .)
    INTO            reduce using rule 438 (order_ident -> expr .)
    WITH            reduce using rule 438 (order_ident -> expr .)
    HAVING          reduce using rule 438 (order_ident -> expr .)
    ORDER           reduce using rule 438 (order_ident -> expr .)
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 499

    (442) order_item -> order_ident . order_dir
    (439) order_dir -> .
    (440) order_dir -> . ASC
    (441) order_dir -> . DESC

    ,               reduce using rule 439 (order_dir -> .)
    LIMIT           reduce using rule 439 (order_dir -> .)
    FOR             reduce using rule 439 (order_dir -> .)
    LOCK            reduce using rule 439 (order_dir -> .)
    UNION           reduce using rule 439 (order_dir -> .)
    DELIM           reduce using rule 439 (order_dir -> .)
    ;               reduce using rule 439 (order_dir -> .)
    )               reduce using rule 439 (order_dir -> .)
    ON              reduce using rule 439 (order_dir -> .)
    INTO            reduce using rule 439 (order_dir -> .)
    WITH            reduce using rule 439 (order_dir -> .)
    HAVING          reduce using rule 439 (order_dir -> .)
    ORDER           reduce using rule 439 (order_dir -> .)
    ASC             shift and go to state 635
    DESC            shift and go to state 637

    order_dir                      shift and go to state 636

state 500

    (278) select_lock_type -> FOR UPDATE .

    UNION           reduce using rule 278 (select_lock_type -> FOR UPDATE .)
    DELIM           reduce using rule 278 (select_lock_type -> FOR UPDATE .)
    ;               reduce using rule 278 (select_lock_type -> FOR UPDATE .)
    ON              reduce using rule 278 (select_lock_type -> FOR UPDATE .)
    )               reduce using rule 278 (select_lock_type -> FOR UPDATE .)


state 501

    (279) select_lock_type -> LOCK IN . SHARE MODE

    SHARE           shift and go to state 638


state 502

    (447) limit_clause -> LIMIT limit_options .

    DELIM           reduce using rule 447 (limit_clause -> LIMIT limit_options .)
    ;               reduce using rule 447 (limit_clause -> LIMIT limit_options .)
    ON              reduce using rule 447 (limit_clause -> LIMIT limit_options .)
    )               reduce using rule 447 (limit_clause -> LIMIT limit_options .)
    INTO            reduce using rule 447 (limit_clause -> LIMIT limit_options .)
    FOR             reduce using rule 447 (limit_clause -> LIMIT limit_options .)
    LOCK            reduce using rule 447 (limit_clause -> LIMIT limit_options .)
    UNION           reduce using rule 447 (limit_clause -> LIMIT limit_options .)


state 503

    (452) limit_option -> NUMBER .

    FOR             reduce using rule 452 (limit_option -> NUMBER .)
    LOCK            reduce using rule 452 (limit_option -> NUMBER .)
    UNION           reduce using rule 452 (limit_option -> NUMBER .)
    DELIM           reduce using rule 452 (limit_option -> NUMBER .)
    ;               reduce using rule 452 (limit_option -> NUMBER .)
    )               reduce using rule 452 (limit_option -> NUMBER .)
    ON              reduce using rule 452 (limit_option -> NUMBER .)
    INTO            reduce using rule 452 (limit_option -> NUMBER .)
    ,               reduce using rule 452 (limit_option -> NUMBER .)
    OFFSET          reduce using rule 452 (limit_option -> NUMBER .)


state 504

    (448) limit_options -> limit_option .
    (449) limit_options -> limit_option . , limit_option
    (450) limit_options -> limit_option . OFFSET limit_option

    FOR             reduce using rule 448 (limit_options -> limit_option .)
    LOCK            reduce using rule 448 (limit_options -> limit_option .)
    UNION           reduce using rule 448 (limit_options -> limit_option .)
    DELIM           reduce using rule 448 (limit_options -> limit_option .)
    ;               reduce using rule 448 (limit_options -> limit_option .)
    )               reduce using rule 448 (limit_options -> limit_option .)
    ON              reduce using rule 448 (limit_options -> limit_option .)
    INTO            reduce using rule 448 (limit_options -> limit_option .)
    ,               shift and go to state 639
    OFFSET          shift and go to state 640


state 505

    (451) limit_option -> IDENT .

    FOR             reduce using rule 451 (limit_option -> IDENT .)
    LOCK            reduce using rule 451 (limit_option -> IDENT .)
    UNION           reduce using rule 451 (limit_option -> IDENT .)
    DELIM           reduce using rule 451 (limit_option -> IDENT .)
    ;               reduce using rule 451 (limit_option -> IDENT .)
    )               reduce using rule 451 (limit_option -> IDENT .)
    ON              reduce using rule 451 (limit_option -> IDENT .)
    INTO            reduce using rule 451 (limit_option -> IDENT .)
    ,               reduce using rule 451 (limit_option -> IDENT .)
    OFFSET          reduce using rule 451 (limit_option -> IDENT .)


state 506

    (80) bit_function -> BIT_XOR ( expr ) .

    BITWISE_OR      reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    BITWISE_AND     reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    SHL             reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    SHR             reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    PLUS            reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    MINUS           reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    TIMES           reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    DIV             reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    MOD             reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    BITWISE_XOR     reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    SOUNDS          reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    NOT             reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    LOGICAL_NOT     reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    IN              reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    BETWEEN         reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    LIKE            reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    REGEXP          reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    IS              reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    NULL_SAFE       reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    EQ              reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    GE              reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    GT              reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    LE              reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    LT              reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    NE              reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    OR              reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    AND             reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    XOR             reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    AS              reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    IDENT           reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    ,               reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    INTO            reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    FROM            reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    ORDER           reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    FOR             reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    LOCK            reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    LIMIT           reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    UNION           reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    DELIM           reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    ;               reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    )               reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    ON              reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    USING           reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    ASC             reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    DESC            reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    WHERE           reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    GROUP           reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    HAVING          reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    JOIN            reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    INNER           reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    CROSS           reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    LEFT            reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    RIGHT           reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    NATURAL         reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    WITH            reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    DO              reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    WHEN            reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    THEN            reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    END             reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)
    ESCAPE          reduce using rule 80 (bit_function -> BIT_XOR ( expr ) .)


state 507

    (74) cast_function -> CAST ( expr AS . cast_type )
    (64) cast_type -> . character_statement
    (65) cast_type -> . DATE
    (66) cast_type -> . DATETIME
    (67) cast_type -> . DECIMAL bidimensional_limit_opt
    (72) cast_type -> . signed_or_unsigned ignore_integer
    (73) cast_type -> . TIME
    (165) character_statement -> . check_char_or_character limit_opt
    (68) signed_or_unsigned -> . SIGNED
    (69) signed_or_unsigned -> . UNSIGNED
    (163) check_char_or_character -> . CHAR
    (164) check_char_or_character -> . CHARACTER

    DATE            shift and go to state 648
    DATETIME        shift and go to state 645
    DECIMAL         shift and go to state 643
    TIME            shift and go to state 641
    SIGNED          shift and go to state 647
    UNSIGNED        shift and go to state 644
    CHAR            shift and go to state 537
    CHARACTER       shift and go to state 548

    cast_type                      shift and go to state 642
    signed_or_unsigned             shift and go to state 646
    check_char_or_character        shift and go to state 568
    character_statement            shift and go to state 649

state 508

    (62) simple_expr -> ROW ( expr_list ) .

    BITWISE_OR      reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    BITWISE_AND     reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    SHL             reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    SHR             reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    PLUS            reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    MINUS           reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    TIMES           reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    DIV             reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    MOD             reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    BITWISE_XOR     reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    SOUNDS          reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    NOT             reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    LOGICAL_NOT     reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    IN              reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    BETWEEN         reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    LIKE            reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    REGEXP          reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    IS              reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    NULL_SAFE       reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    EQ              reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    GE              reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    GT              reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    LE              reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    LT              reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    NE              reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    OR              reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    AND             reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    XOR             reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    AS              reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    IDENT           reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    ,               reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    INTO            reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    FROM            reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    ORDER           reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    FOR             reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    LOCK            reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    LIMIT           reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    UNION           reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    DELIM           reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    ;               reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    )               reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    ON              reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    USING           reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    ASC             reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    DESC            reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    WHERE           reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    GROUP           reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    HAVING          reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    JOIN            reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    INNER           reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    CROSS           reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    LEFT            reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    RIGHT           reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    NATURAL         reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    WITH            reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    DO              reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    WHEN            reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    THEN            reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    END             reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)
    ESCAPE          reduce using rule 62 (simple_expr -> ROW ( expr_list ) .)


state 509

    (13) true_false_or_unknown -> FALSE .

    OR              reduce using rule 13 (true_false_or_unknown -> FALSE .)
    AND             reduce using rule 13 (true_false_or_unknown -> FALSE .)
    XOR             reduce using rule 13 (true_false_or_unknown -> FALSE .)
    AS              reduce using rule 13 (true_false_or_unknown -> FALSE .)
    IDENT           reduce using rule 13 (true_false_or_unknown -> FALSE .)
    ,               reduce using rule 13 (true_false_or_unknown -> FALSE .)
    INTO            reduce using rule 13 (true_false_or_unknown -> FALSE .)
    FROM            reduce using rule 13 (true_false_or_unknown -> FALSE .)
    ORDER           reduce using rule 13 (true_false_or_unknown -> FALSE .)
    FOR             reduce using rule 13 (true_false_or_unknown -> FALSE .)
    LOCK            reduce using rule 13 (true_false_or_unknown -> FALSE .)
    LIMIT           reduce using rule 13 (true_false_or_unknown -> FALSE .)
    UNION           reduce using rule 13 (true_false_or_unknown -> FALSE .)
    DELIM           reduce using rule 13 (true_false_or_unknown -> FALSE .)
    ;               reduce using rule 13 (true_false_or_unknown -> FALSE .)
    )               reduce using rule 13 (true_false_or_unknown -> FALSE .)
    ON              reduce using rule 13 (true_false_or_unknown -> FALSE .)
    USING           reduce using rule 13 (true_false_or_unknown -> FALSE .)
    ASC             reduce using rule 13 (true_false_or_unknown -> FALSE .)
    DESC            reduce using rule 13 (true_false_or_unknown -> FALSE .)
    WHERE           reduce using rule 13 (true_false_or_unknown -> FALSE .)
    GROUP           reduce using rule 13 (true_false_or_unknown -> FALSE .)
    HAVING          reduce using rule 13 (true_false_or_unknown -> FALSE .)
    JOIN            reduce using rule 13 (true_false_or_unknown -> FALSE .)
    INNER           reduce using rule 13 (true_false_or_unknown -> FALSE .)
    CROSS           reduce using rule 13 (true_false_or_unknown -> FALSE .)
    LEFT            reduce using rule 13 (true_false_or_unknown -> FALSE .)
    RIGHT           reduce using rule 13 (true_false_or_unknown -> FALSE .)
    NATURAL         reduce using rule 13 (true_false_or_unknown -> FALSE .)
    WITH            reduce using rule 13 (true_false_or_unknown -> FALSE .)
    DO              reduce using rule 13 (true_false_or_unknown -> FALSE .)
    WHEN            reduce using rule 13 (true_false_or_unknown -> FALSE .)
    THEN            reduce using rule 13 (true_false_or_unknown -> FALSE .)
    END             reduce using rule 13 (true_false_or_unknown -> FALSE .)


state 510

    (14) true_false_or_unknown -> UNKNOWN .

    OR              reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    AND             reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    XOR             reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    AS              reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    IDENT           reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    ,               reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    INTO            reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    FROM            reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    ORDER           reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    FOR             reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    LOCK            reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    LIMIT           reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    UNION           reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    DELIM           reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    ;               reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    )               reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    ON              reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    USING           reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    ASC             reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    DESC            reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    WHERE           reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    GROUP           reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    HAVING          reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    JOIN            reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    INNER           reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    CROSS           reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    LEFT            reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    RIGHT           reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    NATURAL         reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    WITH            reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    DO              reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    WHEN            reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    THEN            reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)
    END             reduce using rule 14 (true_false_or_unknown -> UNKNOWN .)


state 511

    (17) boolean_primary -> boolean_primary IS not_opt NULL .

    IS              reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    NULL_SAFE       reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    EQ              reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    GE              reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    GT              reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    LE              reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    LT              reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    NE              reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    OR              reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    AND             reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    XOR             reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    ASC             reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    DESC            reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    ,               reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    LIMIT           reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    FOR             reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    LOCK            reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    UNION           reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    DELIM           reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    ;               reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    )               reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    ON              reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    INTO            reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    THEN            reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    DO              reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    WITH            reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    HAVING          reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    ORDER           reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    GROUP           reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    WHEN            reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    AS              reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    USING           reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    IDENT           reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    FROM            reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    WHERE           reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    JOIN            reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    INNER           reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    CROSS           reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    LEFT            reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    RIGHT           reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    NATURAL         reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)
    END             reduce using rule 17 (boolean_primary -> boolean_primary IS not_opt NULL .)


state 512

    (12) true_false_or_unknown -> TRUE .

    OR              reduce using rule 12 (true_false_or_unknown -> TRUE .)
    AND             reduce using rule 12 (true_false_or_unknown -> TRUE .)
    XOR             reduce using rule 12 (true_false_or_unknown -> TRUE .)
    AS              reduce using rule 12 (true_false_or_unknown -> TRUE .)
    IDENT           reduce using rule 12 (true_false_or_unknown -> TRUE .)
    ,               reduce using rule 12 (true_false_or_unknown -> TRUE .)
    INTO            reduce using rule 12 (true_false_or_unknown -> TRUE .)
    FROM            reduce using rule 12 (true_false_or_unknown -> TRUE .)
    ORDER           reduce using rule 12 (true_false_or_unknown -> TRUE .)
    FOR             reduce using rule 12 (true_false_or_unknown -> TRUE .)
    LOCK            reduce using rule 12 (true_false_or_unknown -> TRUE .)
    LIMIT           reduce using rule 12 (true_false_or_unknown -> TRUE .)
    UNION           reduce using rule 12 (true_false_or_unknown -> TRUE .)
    DELIM           reduce using rule 12 (true_false_or_unknown -> TRUE .)
    ;               reduce using rule 12 (true_false_or_unknown -> TRUE .)
    )               reduce using rule 12 (true_false_or_unknown -> TRUE .)
    ON              reduce using rule 12 (true_false_or_unknown -> TRUE .)
    USING           reduce using rule 12 (true_false_or_unknown -> TRUE .)
    ASC             reduce using rule 12 (true_false_or_unknown -> TRUE .)
    DESC            reduce using rule 12 (true_false_or_unknown -> TRUE .)
    WHERE           reduce using rule 12 (true_false_or_unknown -> TRUE .)
    GROUP           reduce using rule 12 (true_false_or_unknown -> TRUE .)
    HAVING          reduce using rule 12 (true_false_or_unknown -> TRUE .)
    JOIN            reduce using rule 12 (true_false_or_unknown -> TRUE .)
    INNER           reduce using rule 12 (true_false_or_unknown -> TRUE .)
    CROSS           reduce using rule 12 (true_false_or_unknown -> TRUE .)
    LEFT            reduce using rule 12 (true_false_or_unknown -> TRUE .)
    RIGHT           reduce using rule 12 (true_false_or_unknown -> TRUE .)
    NATURAL         reduce using rule 12 (true_false_or_unknown -> TRUE .)
    WITH            reduce using rule 12 (true_false_or_unknown -> TRUE .)
    DO              reduce using rule 12 (true_false_or_unknown -> TRUE .)
    WHEN            reduce using rule 12 (true_false_or_unknown -> TRUE .)
    THEN            reduce using rule 12 (true_false_or_unknown -> TRUE .)
    END             reduce using rule 12 (true_false_or_unknown -> TRUE .)


state 513

    (15) expr -> boolean_primary IS not_opt true_false_or_unknown .

    OR              reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    AND             reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    XOR             reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    AS              reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    IDENT           reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    ,               reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    INTO            reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    FROM            reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    ORDER           reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    FOR             reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    LOCK            reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    LIMIT           reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    UNION           reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    DELIM           reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    ;               reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    )               reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    ON              reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    ASC             reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    DESC            reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    THEN            reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    USING           reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    WHERE           reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    GROUP           reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    HAVING          reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    JOIN            reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    INNER           reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    CROSS           reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    LEFT            reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    RIGHT           reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    NATURAL         reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    WITH            reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    DO              reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    WHEN            reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)
    END             reduce using rule 15 (expr -> boolean_primary IS not_opt true_false_or_unknown .)


state 514

    (23) boolean_primary -> boolean_primary comparison_operator all_or_any ( . subquery )
    (58) subquery -> . select
    (523) select -> . top_level_select_init
    (522) top_level_select_init -> . SELECT select_init2

    SELECT          shift and go to state 24

    top_level_select_init          shift and go to state 27
    subquery                       shift and go to state 650
    select                         shift and go to state 271

state 515

    (36) predicate -> bit_expr SOUNDS LIKE bit_expr .
    (40) bit_expr -> bit_expr . BITWISE_OR bit_expr
    (41) bit_expr -> bit_expr . BITWISE_AND bit_expr
    (42) bit_expr -> bit_expr . SHL bit_expr
    (43) bit_expr -> bit_expr . SHR bit_expr
    (44) bit_expr -> bit_expr . PLUS bit_expr
    (45) bit_expr -> bit_expr . MINUS bit_expr
    (46) bit_expr -> bit_expr . TIMES bit_expr
    (47) bit_expr -> bit_expr . DIV bit_expr
    (48) bit_expr -> bit_expr . MOD bit_expr
    (49) bit_expr -> bit_expr . BITWISE_XOR bit_expr

    IS              reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    NULL_SAFE       reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    EQ              reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    GE              reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    GT              reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    LE              reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    LT              reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    NE              reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    OR              reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    AND             reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    XOR             reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    AS              reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    IDENT           reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    ,               reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    INTO            reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    FROM            reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    ORDER           reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    FOR             reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    LOCK            reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    LIMIT           reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    UNION           reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    DELIM           reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    ;               reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    )               reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    ON              reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    USING           reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    ASC             reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    DESC            reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    WHERE           reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    GROUP           reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    HAVING          reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    JOIN            reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    INNER           reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    CROSS           reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    LEFT            reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    RIGHT           reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    NATURAL         reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    WITH            reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    DO              reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    WHEN            reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    THEN            reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    END             reduce using rule 36 (predicate -> bit_expr SOUNDS LIKE bit_expr .)
    BITWISE_OR      shift and go to state 254
    BITWISE_AND     shift and go to state 245
    SHL             shift and go to state 252
    SHR             shift and go to state 244
    PLUS            shift and go to state 249
    MINUS           shift and go to state 248
    TIMES           shift and go to state 251
    DIV             shift and go to state 256
    MOD             shift and go to state 257
    BITWISE_XOR     shift and go to state 246


state 516

    (37) predicate -> bit_expr not_opt LIKE simple_expr . escape_opt
    (6) escape_opt -> .
    (7) escape_opt -> . ESCAPE simple_expr

    IS              reduce using rule 6 (escape_opt -> .)
    NULL_SAFE       reduce using rule 6 (escape_opt -> .)
    EQ              reduce using rule 6 (escape_opt -> .)
    GE              reduce using rule 6 (escape_opt -> .)
    GT              reduce using rule 6 (escape_opt -> .)
    LE              reduce using rule 6 (escape_opt -> .)
    LT              reduce using rule 6 (escape_opt -> .)
    NE              reduce using rule 6 (escape_opt -> .)
    OR              reduce using rule 6 (escape_opt -> .)
    AND             reduce using rule 6 (escape_opt -> .)
    XOR             reduce using rule 6 (escape_opt -> .)
    AS              reduce using rule 6 (escape_opt -> .)
    IDENT           reduce using rule 6 (escape_opt -> .)
    ,               reduce using rule 6 (escape_opt -> .)
    INTO            reduce using rule 6 (escape_opt -> .)
    FROM            reduce using rule 6 (escape_opt -> .)
    ORDER           reduce using rule 6 (escape_opt -> .)
    FOR             reduce using rule 6 (escape_opt -> .)
    LOCK            reduce using rule 6 (escape_opt -> .)
    LIMIT           reduce using rule 6 (escape_opt -> .)
    UNION           reduce using rule 6 (escape_opt -> .)
    DELIM           reduce using rule 6 (escape_opt -> .)
    ;               reduce using rule 6 (escape_opt -> .)
    )               reduce using rule 6 (escape_opt -> .)
    ON              reduce using rule 6 (escape_opt -> .)
    USING           reduce using rule 6 (escape_opt -> .)
    ASC             reduce using rule 6 (escape_opt -> .)
    DESC            reduce using rule 6 (escape_opt -> .)
    WHERE           reduce using rule 6 (escape_opt -> .)
    GROUP           reduce using rule 6 (escape_opt -> .)
    HAVING          reduce using rule 6 (escape_opt -> .)
    JOIN            reduce using rule 6 (escape_opt -> .)
    INNER           reduce using rule 6 (escape_opt -> .)
    CROSS           reduce using rule 6 (escape_opt -> .)
    LEFT            reduce using rule 6 (escape_opt -> .)
    RIGHT           reduce using rule 6 (escape_opt -> .)
    NATURAL         reduce using rule 6 (escape_opt -> .)
    WITH            reduce using rule 6 (escape_opt -> .)
    DO              reduce using rule 6 (escape_opt -> .)
    WHEN            reduce using rule 6 (escape_opt -> .)
    THEN            reduce using rule 6 (escape_opt -> .)
    END             reduce using rule 6 (escape_opt -> .)
    ESCAPE          shift and go to state 652

    escape_opt                     shift and go to state 651

state 517

    (35) predicate -> bit_expr not_opt BETWEEN bit_expr . AND predicate
    (40) bit_expr -> bit_expr . BITWISE_OR bit_expr
    (41) bit_expr -> bit_expr . BITWISE_AND bit_expr
    (42) bit_expr -> bit_expr . SHL bit_expr
    (43) bit_expr -> bit_expr . SHR bit_expr
    (44) bit_expr -> bit_expr . PLUS bit_expr
    (45) bit_expr -> bit_expr . MINUS bit_expr
    (46) bit_expr -> bit_expr . TIMES bit_expr
    (47) bit_expr -> bit_expr . DIV bit_expr
    (48) bit_expr -> bit_expr . MOD bit_expr
    (49) bit_expr -> bit_expr . BITWISE_XOR bit_expr

    AND             shift and go to state 653
    BITWISE_OR      shift and go to state 254
    BITWISE_AND     shift and go to state 245
    SHL             shift and go to state 252
    SHR             shift and go to state 244
    PLUS            shift and go to state 249
    MINUS           shift and go to state 248
    TIMES           shift and go to state 251
    DIV             shift and go to state 256
    MOD             shift and go to state 257
    BITWISE_XOR     shift and go to state 246


state 518

    (33) predicate -> bit_expr not_opt IN ( . subquery )
    (34) predicate -> bit_expr not_opt IN ( . expr_list )
    (58) subquery -> . select
    (31) expr_list -> . expr
    (32) expr_list -> . expr , expr_list
    (523) select -> . top_level_select_init
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (522) top_level_select_init -> . SELECT select_init2
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    SELECT          shift and go to state 24
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    expr_list                      shift and go to state 654
    function_call                  shift and go to state 128
    bit_function                   shift and go to state 153
    select                         shift and go to state 271
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    top_level_select_init          shift and go to state 27
    average_function               shift and go to state 130
    other_function                 shift and go to state 154
    expr                           shift and go to state 272
    simple_expr                    shift and go to state 131
    subquery                       shift and go to state 655
    max_function                   shift and go to state 149

state 519

    (38) predicate -> bit_expr not_opt REGEXP bit_expr .
    (40) bit_expr -> bit_expr . BITWISE_OR bit_expr
    (41) bit_expr -> bit_expr . BITWISE_AND bit_expr
    (42) bit_expr -> bit_expr . SHL bit_expr
    (43) bit_expr -> bit_expr . SHR bit_expr
    (44) bit_expr -> bit_expr . PLUS bit_expr
    (45) bit_expr -> bit_expr . MINUS bit_expr
    (46) bit_expr -> bit_expr . TIMES bit_expr
    (47) bit_expr -> bit_expr . DIV bit_expr
    (48) bit_expr -> bit_expr . MOD bit_expr
    (49) bit_expr -> bit_expr . BITWISE_XOR bit_expr

    IS              reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    NULL_SAFE       reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    EQ              reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    GE              reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    GT              reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    LE              reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    LT              reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    NE              reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    OR              reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    AND             reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    XOR             reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    AS              reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    IDENT           reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    ,               reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    INTO            reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    FROM            reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    ORDER           reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    FOR             reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    LOCK            reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    LIMIT           reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    UNION           reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    DELIM           reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    ;               reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    )               reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    ON              reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    USING           reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    ASC             reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    DESC            reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    WHERE           reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    GROUP           reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    HAVING          reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    JOIN            reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    INNER           reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    CROSS           reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    LEFT            reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    RIGHT           reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    NATURAL         reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    WITH            reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    DO              reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    WHEN            reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    THEN            reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    END             reduce using rule 38 (predicate -> bit_expr not_opt REGEXP bit_expr .)
    BITWISE_OR      shift and go to state 254
    BITWISE_AND     shift and go to state 245
    SHL             shift and go to state 252
    SHR             shift and go to state 244
    PLUS            shift and go to state 249
    MINUS           shift and go to state 248
    TIMES           shift and go to state 251
    DIV             shift and go to state 256
    MOD             shift and go to state 257
    BITWISE_XOR     shift and go to state 246


state 520

    (90) other_function -> IDENT ( expr_list ) .

    SOUNDS          reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    BITWISE_OR      reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    BITWISE_AND     reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    SHL             reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    SHR             reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    PLUS            reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    MINUS           reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    TIMES           reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    DIV             reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    MOD             reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    BITWISE_XOR     reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    NOT             reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    LOGICAL_NOT     reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    IN              reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    BETWEEN         reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    LIKE            reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    REGEXP          reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    IS              reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    NULL_SAFE       reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    EQ              reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    GE              reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    GT              reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    LE              reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    LT              reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    NE              reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    THEN            reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    OR              reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    AND             reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    XOR             reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    AS              reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    IDENT           reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    ,               reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    INTO            reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    FROM            reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    ORDER           reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    FOR             reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    LOCK            reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    LIMIT           reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    UNION           reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    DELIM           reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    ;               reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    )               reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    ON              reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    USING           reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    ASC             reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    DESC            reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    WHERE           reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    GROUP           reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    HAVING          reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    JOIN            reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    INNER           reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    CROSS           reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    LEFT            reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    RIGHT           reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    NATURAL         reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    WITH            reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    DO              reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    WHEN            reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    END             reduce using rule 90 (other_function -> IDENT ( expr_list ) .)
    ESCAPE          reduce using rule 90 (other_function -> IDENT ( expr_list ) .)


state 521

    (60) simple_expr -> EXISTS ( subquery ) .

    BITWISE_OR      reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    BITWISE_AND     reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    SHL             reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    SHR             reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    PLUS            reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    MINUS           reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    TIMES           reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    DIV             reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    MOD             reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    BITWISE_XOR     reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    SOUNDS          reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    NOT             reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    LOGICAL_NOT     reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    IN              reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    BETWEEN         reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    LIKE            reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    REGEXP          reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    IS              reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    NULL_SAFE       reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    EQ              reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    GE              reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    GT              reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    LE              reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    LT              reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    NE              reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    OR              reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    AND             reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    XOR             reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    AS              reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    IDENT           reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    ,               reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    INTO            reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    FROM            reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    ORDER           reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    FOR             reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    LOCK            reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    LIMIT           reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    UNION           reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    DELIM           reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    ;               reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    )               reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    ON              reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    USING           reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    ASC             reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    DESC            reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    WHERE           reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    GROUP           reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    HAVING          reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    JOIN            reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    INNER           reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    CROSS           reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    LEFT            reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    RIGHT           reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    NATURAL         reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    WITH            reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    DO              reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    WHEN            reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    THEN            reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    END             reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)
    ESCAPE          reduce using rule 60 (simple_expr -> EXISTS ( subquery ) .)


state 522

    (86) max_function -> MAX ( opt_distinct expr . )
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    )               shift and go to state 656
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 523

    (79) bit_function -> BIT_OR ( expr ) .

    BITWISE_OR      reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    BITWISE_AND     reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    SHL             reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    SHR             reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    PLUS            reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    MINUS           reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    TIMES           reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    DIV             reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    MOD             reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    BITWISE_XOR     reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    SOUNDS          reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    NOT             reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    LOGICAL_NOT     reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    IN              reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    BETWEEN         reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    LIKE            reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    REGEXP          reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    IS              reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    NULL_SAFE       reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    EQ              reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    GE              reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    GT              reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    LE              reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    LT              reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    NE              reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    OR              reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    AND             reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    XOR             reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    AS              reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    IDENT           reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    ,               reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    INTO            reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    FROM            reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    ORDER           reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    FOR             reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    LOCK            reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    LIMIT           reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    UNION           reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    DELIM           reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    ;               reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    )               reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    ON              reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    USING           reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    ASC             reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    DESC            reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    WHERE           reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    GROUP           reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    HAVING          reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    JOIN            reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    INNER           reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    CROSS           reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    LEFT            reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    RIGHT           reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    NATURAL         reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    WITH            reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    DO              reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    WHEN            reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    THEN            reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    END             reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)
    ESCAPE          reduce using rule 79 (bit_function -> BIT_OR ( expr ) .)


state 524

    (87) min_function -> MIN ( opt_distinct expr . )
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    )               shift and go to state 657
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 525

    (32) expr_list -> expr , expr_list .

    )               reduce using rule 32 (expr_list -> expr , expr_list .)


state 526

    (77) average_function -> AVG ( opt_distinct expr . )
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    )               shift and go to state 658
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 527

    (295) select_paren -> ( . select_paren )
    (294) select_paren -> . SELECT select_init2
    (295) select_paren -> . ( select_paren )

    SELECT          shift and go to state 529
    (               shift and go to state 527

    select_paren                   shift and go to state 659

state 528

    (297) union_select_init -> ( select_paren . ) union_opt

    )               shift and go to state 660


state 529

    (294) select_paren -> SELECT . select_init2
    (301) select_init2 -> . select_part2 union_clause
    (285) select_part2 -> . select_options select_item_list select_into select_lock_type
    (419) select_options -> .
    (420) select_options -> . select_option_list
    (423) select_option_list -> . select_option
    (424) select_option_list -> . select_option select_option_list
    (421) select_option -> . DISTINCT
    (422) select_option -> . ALL

    *               reduce using rule 419 (select_options -> .)
    IDENT           reduce using rule 419 (select_options -> .)
    NOT             reduce using rule 419 (select_options -> .)
    @               reduce using rule 419 (select_options -> .)
    (               reduce using rule 419 (select_options -> .)
    EXISTS          reduce using rule 419 (select_options -> .)
    ROW             reduce using rule 419 (select_options -> .)
    STRING          reduce using rule 419 (select_options -> .)
    NUMBER          reduce using rule 419 (select_options -> .)
    FLOAT_LIT       reduce using rule 419 (select_options -> .)
    CONVERT         reduce using rule 419 (select_options -> .)
    CAST            reduce using rule 419 (select_options -> .)
    AVG             reduce using rule 419 (select_options -> .)
    BIT_AND         reduce using rule 419 (select_options -> .)
    BIT_OR          reduce using rule 419 (select_options -> .)
    BIT_XOR         reduce using rule 419 (select_options -> .)
    COUNT           reduce using rule 419 (select_options -> .)
    MAX             reduce using rule 419 (select_options -> .)
    MIN             reduce using rule 419 (select_options -> .)
    SUM             reduce using rule 419 (select_options -> .)
    DISTINCT        shift and go to state 81
    ALL             shift and go to state 79

    select_option                  shift and go to state 80
    select_init2                   shift and go to state 661
    select_option_list             shift and go to state 83
    select_options                 shift and go to state 84
    select_part2                   shift and go to state 85

state 530

    (296) union_select_init -> SELECT select_init2 .

    DELIM           reduce using rule 296 (union_select_init -> SELECT select_init2 .)
    ;               reduce using rule 296 (union_select_init -> SELECT select_init2 .)
    )               reduce using rule 296 (union_select_init -> SELECT select_init2 .)
    ON              reduce using rule 296 (union_select_init -> SELECT select_init2 .)


state 531

    (327) key_values -> key_value , key_values .

    WHERE           reduce using rule 327 (key_values -> key_value , key_values .)
    LIMIT           reduce using rule 327 (key_values -> key_value , key_values .)
    DELIM           reduce using rule 327 (key_values -> key_value , key_values .)
    ;               reduce using rule 327 (key_values -> key_value , key_values .)


state 532

    (325) key_value -> IDENT EQ expr_or_default .

    ,               reduce using rule 325 (key_value -> IDENT EQ expr_or_default .)
    WHERE           reduce using rule 325 (key_value -> IDENT EQ expr_or_default .)
    LIMIT           reduce using rule 325 (key_value -> IDENT EQ expr_or_default .)
    DELIM           reduce using rule 325 (key_value -> IDENT EQ expr_or_default .)
    ;               reduce using rule 325 (key_value -> IDENT EQ expr_or_default .)


state 533

    (334) update -> UPDATE ident_list SET key_values where rows_limit .

    DELIM           reduce using rule 334 (update -> UPDATE ident_list SET key_values where rows_limit .)
    ;               reduce using rule 334 (update -> UPDATE ident_list SET key_values where rows_limit .)


state 534

    (333) rows_limit -> LIMIT NUMBER .

    DELIM           reduce using rule 333 (rows_limit -> LIMIT NUMBER .)
    ;               reduce using rule 333 (rows_limit -> LIMIT NUMBER .)


state 535

    (170) text_type -> LONGTEXT .

    NULL            reduce using rule 170 (text_type -> LONGTEXT .)
    NOT             reduce using rule 170 (text_type -> LONGTEXT .)
    DEFAULT         reduce using rule 170 (text_type -> LONGTEXT .)
    AUTO_INCREMENT  reduce using rule 170 (text_type -> LONGTEXT .)
    UNIQUE          reduce using rule 170 (text_type -> LONGTEXT .)
    KEY             reduce using rule 170 (text_type -> LONGTEXT .)
    PRIMARY         reduce using rule 170 (text_type -> LONGTEXT .)
    CHARACTER       reduce using rule 170 (text_type -> LONGTEXT .)
    COLLATE         reduce using rule 170 (text_type -> LONGTEXT .)
    FIRST           reduce using rule 170 (text_type -> LONGTEXT .)
    AFTER           reduce using rule 170 (text_type -> LONGTEXT .)
    ,               reduce using rule 170 (text_type -> LONGTEXT .)
    DELIM           reduce using rule 170 (text_type -> LONGTEXT .)
    ;               reduce using rule 170 (text_type -> LONGTEXT .)
    )               reduce using rule 170 (text_type -> LONGTEXT .)


state 536

    (132) integer_type -> MEDIUMINT .

    (               reduce using rule 132 (integer_type -> MEDIUMINT .)
    UNSIGNED        reduce using rule 132 (integer_type -> MEDIUMINT .)
    NULL            reduce using rule 132 (integer_type -> MEDIUMINT .)
    NOT             reduce using rule 132 (integer_type -> MEDIUMINT .)
    DEFAULT         reduce using rule 132 (integer_type -> MEDIUMINT .)
    AUTO_INCREMENT  reduce using rule 132 (integer_type -> MEDIUMINT .)
    UNIQUE          reduce using rule 132 (integer_type -> MEDIUMINT .)
    KEY             reduce using rule 132 (integer_type -> MEDIUMINT .)
    PRIMARY         reduce using rule 132 (integer_type -> MEDIUMINT .)
    CHARACTER       reduce using rule 132 (integer_type -> MEDIUMINT .)
    COLLATE         reduce using rule 132 (integer_type -> MEDIUMINT .)
    FIRST           reduce using rule 132 (integer_type -> MEDIUMINT .)
    AFTER           reduce using rule 132 (integer_type -> MEDIUMINT .)
    ,               reduce using rule 132 (integer_type -> MEDIUMINT .)
    DELIM           reduce using rule 132 (integer_type -> MEDIUMINT .)
    ;               reduce using rule 132 (integer_type -> MEDIUMINT .)
    )               reduce using rule 132 (integer_type -> MEDIUMINT .)


state 537

    (163) check_char_or_character -> CHAR .

    (               reduce using rule 163 (check_char_or_character -> CHAR .)
    NULL            reduce using rule 163 (check_char_or_character -> CHAR .)
    NOT             reduce using rule 163 (check_char_or_character -> CHAR .)
    DEFAULT         reduce using rule 163 (check_char_or_character -> CHAR .)
    AUTO_INCREMENT  reduce using rule 163 (check_char_or_character -> CHAR .)
    UNIQUE          reduce using rule 163 (check_char_or_character -> CHAR .)
    KEY             reduce using rule 163 (check_char_or_character -> CHAR .)
    PRIMARY         reduce using rule 163 (check_char_or_character -> CHAR .)
    CHARACTER       reduce using rule 163 (check_char_or_character -> CHAR .)
    COLLATE         reduce using rule 163 (check_char_or_character -> CHAR .)
    FIRST           reduce using rule 163 (check_char_or_character -> CHAR .)
    AFTER           reduce using rule 163 (check_char_or_character -> CHAR .)
    ,               reduce using rule 163 (check_char_or_character -> CHAR .)
    DELIM           reduce using rule 163 (check_char_or_character -> CHAR .)
    ;               reduce using rule 163 (check_char_or_character -> CHAR .)
    )               reduce using rule 163 (check_char_or_character -> CHAR .)


state 538

    (161) integer_statement -> integer_type . limit_opt unsigned_opt
    (139) limit_opt -> .
    (140) limit_opt -> . limit
    (141) limit -> . ( NUMBER )

    UNSIGNED        reduce using rule 139 (limit_opt -> .)
    NULL            reduce using rule 139 (limit_opt -> .)
    NOT             reduce using rule 139 (limit_opt -> .)
    DEFAULT         reduce using rule 139 (limit_opt -> .)
    AUTO_INCREMENT  reduce using rule 139 (limit_opt -> .)
    UNIQUE          reduce using rule 139 (limit_opt -> .)
    KEY             reduce using rule 139 (limit_opt -> .)
    PRIMARY         reduce using rule 139 (limit_opt -> .)
    CHARACTER       reduce using rule 139 (limit_opt -> .)
    COLLATE         reduce using rule 139 (limit_opt -> .)
    FIRST           reduce using rule 139 (limit_opt -> .)
    AFTER           reduce using rule 139 (limit_opt -> .)
    ,               reduce using rule 139 (limit_opt -> .)
    DELIM           reduce using rule 139 (limit_opt -> .)
    ;               reduce using rule 139 (limit_opt -> .)
    )               reduce using rule 139 (limit_opt -> .)
    (               shift and go to state 662

    limit                          shift and go to state 664
    limit_opt                      shift and go to state 663

state 539

    (130) integer_type -> TINYINT .

    (               reduce using rule 130 (integer_type -> TINYINT .)
    UNSIGNED        reduce using rule 130 (integer_type -> TINYINT .)
    NULL            reduce using rule 130 (integer_type -> TINYINT .)
    NOT             reduce using rule 130 (integer_type -> TINYINT .)
    DEFAULT         reduce using rule 130 (integer_type -> TINYINT .)
    AUTO_INCREMENT  reduce using rule 130 (integer_type -> TINYINT .)
    UNIQUE          reduce using rule 130 (integer_type -> TINYINT .)
    KEY             reduce using rule 130 (integer_type -> TINYINT .)
    PRIMARY         reduce using rule 130 (integer_type -> TINYINT .)
    CHARACTER       reduce using rule 130 (integer_type -> TINYINT .)
    COLLATE         reduce using rule 130 (integer_type -> TINYINT .)
    FIRST           reduce using rule 130 (integer_type -> TINYINT .)
    AFTER           reduce using rule 130 (integer_type -> TINYINT .)
    ,               reduce using rule 130 (integer_type -> TINYINT .)
    DELIM           reduce using rule 130 (integer_type -> TINYINT .)
    ;               reduce using rule 130 (integer_type -> TINYINT .)
    )               reduce using rule 130 (integer_type -> TINYINT .)


state 540

    (135) integer_type -> BIGINT .

    (               reduce using rule 135 (integer_type -> BIGINT .)
    UNSIGNED        reduce using rule 135 (integer_type -> BIGINT .)
    NULL            reduce using rule 135 (integer_type -> BIGINT .)
    NOT             reduce using rule 135 (integer_type -> BIGINT .)
    DEFAULT         reduce using rule 135 (integer_type -> BIGINT .)
    AUTO_INCREMENT  reduce using rule 135 (integer_type -> BIGINT .)
    UNIQUE          reduce using rule 135 (integer_type -> BIGINT .)
    KEY             reduce using rule 135 (integer_type -> BIGINT .)
    PRIMARY         reduce using rule 135 (integer_type -> BIGINT .)
    CHARACTER       reduce using rule 135 (integer_type -> BIGINT .)
    COLLATE         reduce using rule 135 (integer_type -> BIGINT .)
    FIRST           reduce using rule 135 (integer_type -> BIGINT .)
    AFTER           reduce using rule 135 (integer_type -> BIGINT .)
    ,               reduce using rule 135 (integer_type -> BIGINT .)
    DELIM           reduce using rule 135 (integer_type -> BIGINT .)
    ;               reduce using rule 135 (integer_type -> BIGINT .)
    )               reduce using rule 135 (integer_type -> BIGINT .)


state 541

    (172) simple_statement -> DATE .

    NULL            reduce using rule 172 (simple_statement -> DATE .)
    NOT             reduce using rule 172 (simple_statement -> DATE .)
    DEFAULT         reduce using rule 172 (simple_statement -> DATE .)
    AUTO_INCREMENT  reduce using rule 172 (simple_statement -> DATE .)
    UNIQUE          reduce using rule 172 (simple_statement -> DATE .)
    KEY             reduce using rule 172 (simple_statement -> DATE .)
    PRIMARY         reduce using rule 172 (simple_statement -> DATE .)
    CHARACTER       reduce using rule 172 (simple_statement -> DATE .)
    COLLATE         reduce using rule 172 (simple_statement -> DATE .)
    FIRST           reduce using rule 172 (simple_statement -> DATE .)
    AFTER           reduce using rule 172 (simple_statement -> DATE .)
    ,               reduce using rule 172 (simple_statement -> DATE .)
    DELIM           reduce using rule 172 (simple_statement -> DATE .)
    ;               reduce using rule 172 (simple_statement -> DATE .)
    )               reduce using rule 172 (simple_statement -> DATE .)


state 542

    (186) data_type -> binary_statement .

    NULL            reduce using rule 186 (data_type -> binary_statement .)
    NOT             reduce using rule 186 (data_type -> binary_statement .)
    DEFAULT         reduce using rule 186 (data_type -> binary_statement .)
    AUTO_INCREMENT  reduce using rule 186 (data_type -> binary_statement .)
    UNIQUE          reduce using rule 186 (data_type -> binary_statement .)
    KEY             reduce using rule 186 (data_type -> binary_statement .)
    PRIMARY         reduce using rule 186 (data_type -> binary_statement .)
    CHARACTER       reduce using rule 186 (data_type -> binary_statement .)
    COLLATE         reduce using rule 186 (data_type -> binary_statement .)
    FIRST           reduce using rule 186 (data_type -> binary_statement .)
    AFTER           reduce using rule 186 (data_type -> binary_statement .)
    ,               reduce using rule 186 (data_type -> binary_statement .)
    DELIM           reduce using rule 186 (data_type -> binary_statement .)
    ;               reduce using rule 186 (data_type -> binary_statement .)
    )               reduce using rule 186 (data_type -> binary_statement .)


state 543

    (131) integer_type -> SMALLINT .

    (               reduce using rule 131 (integer_type -> SMALLINT .)
    UNSIGNED        reduce using rule 131 (integer_type -> SMALLINT .)
    NULL            reduce using rule 131 (integer_type -> SMALLINT .)
    NOT             reduce using rule 131 (integer_type -> SMALLINT .)
    DEFAULT         reduce using rule 131 (integer_type -> SMALLINT .)
    AUTO_INCREMENT  reduce using rule 131 (integer_type -> SMALLINT .)
    UNIQUE          reduce using rule 131 (integer_type -> SMALLINT .)
    KEY             reduce using rule 131 (integer_type -> SMALLINT .)
    PRIMARY         reduce using rule 131 (integer_type -> SMALLINT .)
    CHARACTER       reduce using rule 131 (integer_type -> SMALLINT .)
    COLLATE         reduce using rule 131 (integer_type -> SMALLINT .)
    FIRST           reduce using rule 131 (integer_type -> SMALLINT .)
    AFTER           reduce using rule 131 (integer_type -> SMALLINT .)
    ,               reduce using rule 131 (integer_type -> SMALLINT .)
    DELIM           reduce using rule 131 (integer_type -> SMALLINT .)
    ;               reduce using rule 131 (integer_type -> SMALLINT .)
    )               reduce using rule 131 (integer_type -> SMALLINT .)


state 544

    (178) binary_statement -> MEDIUMBLOB .

    NULL            reduce using rule 178 (binary_statement -> MEDIUMBLOB .)
    NOT             reduce using rule 178 (binary_statement -> MEDIUMBLOB .)
    DEFAULT         reduce using rule 178 (binary_statement -> MEDIUMBLOB .)
    AUTO_INCREMENT  reduce using rule 178 (binary_statement -> MEDIUMBLOB .)
    UNIQUE          reduce using rule 178 (binary_statement -> MEDIUMBLOB .)
    KEY             reduce using rule 178 (binary_statement -> MEDIUMBLOB .)
    PRIMARY         reduce using rule 178 (binary_statement -> MEDIUMBLOB .)
    CHARACTER       reduce using rule 178 (binary_statement -> MEDIUMBLOB .)
    COLLATE         reduce using rule 178 (binary_statement -> MEDIUMBLOB .)
    FIRST           reduce using rule 178 (binary_statement -> MEDIUMBLOB .)
    AFTER           reduce using rule 178 (binary_statement -> MEDIUMBLOB .)
    ,               reduce using rule 178 (binary_statement -> MEDIUMBLOB .)
    DELIM           reduce using rule 178 (binary_statement -> MEDIUMBLOB .)
    ;               reduce using rule 178 (binary_statement -> MEDIUMBLOB .)
    )               reduce using rule 178 (binary_statement -> MEDIUMBLOB .)


state 545

    (166) string_statement -> VARCHAR . limit
    (141) limit -> . ( NUMBER )

    (               shift and go to state 662

    limit                          shift and go to state 665

state 546

    (162) double_precision_statement -> double_precision_type . bidimensional_limit_opt unsigned_opt
    (142) bidimensional_limit_opt -> .
    (143) bidimensional_limit_opt -> . bidimensional_limit
    (144) bidimensional_limit -> . ( NUMBER , NUMBER )

    UNSIGNED        reduce using rule 142 (bidimensional_limit_opt -> .)
    NULL            reduce using rule 142 (bidimensional_limit_opt -> .)
    NOT             reduce using rule 142 (bidimensional_limit_opt -> .)
    DEFAULT         reduce using rule 142 (bidimensional_limit_opt -> .)
    AUTO_INCREMENT  reduce using rule 142 (bidimensional_limit_opt -> .)
    UNIQUE          reduce using rule 142 (bidimensional_limit_opt -> .)
    KEY             reduce using rule 142 (bidimensional_limit_opt -> .)
    PRIMARY         reduce using rule 142 (bidimensional_limit_opt -> .)
    CHARACTER       reduce using rule 142 (bidimensional_limit_opt -> .)
    COLLATE         reduce using rule 142 (bidimensional_limit_opt -> .)
    FIRST           reduce using rule 142 (bidimensional_limit_opt -> .)
    AFTER           reduce using rule 142 (bidimensional_limit_opt -> .)
    ,               reduce using rule 142 (bidimensional_limit_opt -> .)
    DELIM           reduce using rule 142 (bidimensional_limit_opt -> .)
    ;               reduce using rule 142 (bidimensional_limit_opt -> .)
    )               reduce using rule 142 (bidimensional_limit_opt -> .)
    (               shift and go to state 666

    bidimensional_limit            shift and go to state 667
    bidimensional_limit_opt        shift and go to state 668

state 547

    (183) data_type -> string_statement .

    NULL            reduce using rule 183 (data_type -> string_statement .)
    NOT             reduce using rule 183 (data_type -> string_statement .)
    DEFAULT         reduce using rule 183 (data_type -> string_statement .)
    AUTO_INCREMENT  reduce using rule 183 (data_type -> string_statement .)
    UNIQUE          reduce using rule 183 (data_type -> string_statement .)
    KEY             reduce using rule 183 (data_type -> string_statement .)
    PRIMARY         reduce using rule 183 (data_type -> string_statement .)
    CHARACTER       reduce using rule 183 (data_type -> string_statement .)
    COLLATE         reduce using rule 183 (data_type -> string_statement .)
    FIRST           reduce using rule 183 (data_type -> string_statement .)
    AFTER           reduce using rule 183 (data_type -> string_statement .)
    ,               reduce using rule 183 (data_type -> string_statement .)
    DELIM           reduce using rule 183 (data_type -> string_statement .)
    ;               reduce using rule 183 (data_type -> string_statement .)
    )               reduce using rule 183 (data_type -> string_statement .)


state 548

    (164) check_char_or_character -> CHARACTER .

    (               reduce using rule 164 (check_char_or_character -> CHARACTER .)
    NULL            reduce using rule 164 (check_char_or_character -> CHARACTER .)
    NOT             reduce using rule 164 (check_char_or_character -> CHARACTER .)
    DEFAULT         reduce using rule 164 (check_char_or_character -> CHARACTER .)
    AUTO_INCREMENT  reduce using rule 164 (check_char_or_character -> CHARACTER .)
    UNIQUE          reduce using rule 164 (check_char_or_character -> CHARACTER .)
    KEY             reduce using rule 164 (check_char_or_character -> CHARACTER .)
    PRIMARY         reduce using rule 164 (check_char_or_character -> CHARACTER .)
    CHARACTER       reduce using rule 164 (check_char_or_character -> CHARACTER .)
    COLLATE         reduce using rule 164 (check_char_or_character -> CHARACTER .)
    FIRST           reduce using rule 164 (check_char_or_character -> CHARACTER .)
    AFTER           reduce using rule 164 (check_char_or_character -> CHARACTER .)
    ,               reduce using rule 164 (check_char_or_character -> CHARACTER .)
    DELIM           reduce using rule 164 (check_char_or_character -> CHARACTER .)
    ;               reduce using rule 164 (check_char_or_character -> CHARACTER .)
    )               reduce using rule 164 (check_char_or_character -> CHARACTER .)


state 549

    (231) change_column -> MODIFY ignore_column column_name column_statement . position_opt
    (222) position_opt -> .
    (223) position_opt -> . position
    (224) position -> . FIRST
    (225) position -> . AFTER IDENT

    ,               reduce using rule 222 (position_opt -> .)
    DELIM           reduce using rule 222 (position_opt -> .)
    ;               reduce using rule 222 (position_opt -> .)
    FIRST           shift and go to state 672
    AFTER           shift and go to state 669

    position                       shift and go to state 671
    position_opt                   shift and go to state 670

state 550

    (138) double_precision_type -> NUMERIC .

    (               reduce using rule 138 (double_precision_type -> NUMERIC .)
    UNSIGNED        reduce using rule 138 (double_precision_type -> NUMERIC .)
    NULL            reduce using rule 138 (double_precision_type -> NUMERIC .)
    NOT             reduce using rule 138 (double_precision_type -> NUMERIC .)
    DEFAULT         reduce using rule 138 (double_precision_type -> NUMERIC .)
    AUTO_INCREMENT  reduce using rule 138 (double_precision_type -> NUMERIC .)
    UNIQUE          reduce using rule 138 (double_precision_type -> NUMERIC .)
    KEY             reduce using rule 138 (double_precision_type -> NUMERIC .)
    PRIMARY         reduce using rule 138 (double_precision_type -> NUMERIC .)
    CHARACTER       reduce using rule 138 (double_precision_type -> NUMERIC .)
    COLLATE         reduce using rule 138 (double_precision_type -> NUMERIC .)
    FIRST           reduce using rule 138 (double_precision_type -> NUMERIC .)
    AFTER           reduce using rule 138 (double_precision_type -> NUMERIC .)
    ,               reduce using rule 138 (double_precision_type -> NUMERIC .)
    DELIM           reduce using rule 138 (double_precision_type -> NUMERIC .)
    ;               reduce using rule 138 (double_precision_type -> NUMERIC .)
    )               reduce using rule 138 (double_precision_type -> NUMERIC .)


state 551

    (180) data_type -> integer_statement .

    NULL            reduce using rule 180 (data_type -> integer_statement .)
    NOT             reduce using rule 180 (data_type -> integer_statement .)
    DEFAULT         reduce using rule 180 (data_type -> integer_statement .)
    AUTO_INCREMENT  reduce using rule 180 (data_type -> integer_statement .)
    UNIQUE          reduce using rule 180 (data_type -> integer_statement .)
    KEY             reduce using rule 180 (data_type -> integer_statement .)
    PRIMARY         reduce using rule 180 (data_type -> integer_statement .)
    CHARACTER       reduce using rule 180 (data_type -> integer_statement .)
    COLLATE         reduce using rule 180 (data_type -> integer_statement .)
    FIRST           reduce using rule 180 (data_type -> integer_statement .)
    AFTER           reduce using rule 180 (data_type -> integer_statement .)
    ,               reduce using rule 180 (data_type -> integer_statement .)
    DELIM           reduce using rule 180 (data_type -> integer_statement .)
    ;               reduce using rule 180 (data_type -> integer_statement .)
    )               reduce using rule 180 (data_type -> integer_statement .)


state 552

    (181) data_type -> double_precision_statement .

    NULL            reduce using rule 181 (data_type -> double_precision_statement .)
    NOT             reduce using rule 181 (data_type -> double_precision_statement .)
    DEFAULT         reduce using rule 181 (data_type -> double_precision_statement .)
    AUTO_INCREMENT  reduce using rule 181 (data_type -> double_precision_statement .)
    UNIQUE          reduce using rule 181 (data_type -> double_precision_statement .)
    KEY             reduce using rule 181 (data_type -> double_precision_statement .)
    PRIMARY         reduce using rule 181 (data_type -> double_precision_statement .)
    CHARACTER       reduce using rule 181 (data_type -> double_precision_statement .)
    COLLATE         reduce using rule 181 (data_type -> double_precision_statement .)
    FIRST           reduce using rule 181 (data_type -> double_precision_statement .)
    AFTER           reduce using rule 181 (data_type -> double_precision_statement .)
    ,               reduce using rule 181 (data_type -> double_precision_statement .)
    DELIM           reduce using rule 181 (data_type -> double_precision_statement .)
    ;               reduce using rule 181 (data_type -> double_precision_statement .)
    )               reduce using rule 181 (data_type -> double_precision_statement .)


state 553

    (184) data_type -> text_statement .

    NULL            reduce using rule 184 (data_type -> text_statement .)
    NOT             reduce using rule 184 (data_type -> text_statement .)
    DEFAULT         reduce using rule 184 (data_type -> text_statement .)
    AUTO_INCREMENT  reduce using rule 184 (data_type -> text_statement .)
    UNIQUE          reduce using rule 184 (data_type -> text_statement .)
    KEY             reduce using rule 184 (data_type -> text_statement .)
    PRIMARY         reduce using rule 184 (data_type -> text_statement .)
    CHARACTER       reduce using rule 184 (data_type -> text_statement .)
    COLLATE         reduce using rule 184 (data_type -> text_statement .)
    FIRST           reduce using rule 184 (data_type -> text_statement .)
    AFTER           reduce using rule 184 (data_type -> text_statement .)
    ,               reduce using rule 184 (data_type -> text_statement .)
    DELIM           reduce using rule 184 (data_type -> text_statement .)
    ;               reduce using rule 184 (data_type -> text_statement .)
    )               reduce using rule 184 (data_type -> text_statement .)


state 554

    (134) integer_type -> INTEGER .

    (               reduce using rule 134 (integer_type -> INTEGER .)
    UNSIGNED        reduce using rule 134 (integer_type -> INTEGER .)
    NULL            reduce using rule 134 (integer_type -> INTEGER .)
    NOT             reduce using rule 134 (integer_type -> INTEGER .)
    DEFAULT         reduce using rule 134 (integer_type -> INTEGER .)
    AUTO_INCREMENT  reduce using rule 134 (integer_type -> INTEGER .)
    UNIQUE          reduce using rule 134 (integer_type -> INTEGER .)
    KEY             reduce using rule 134 (integer_type -> INTEGER .)
    PRIMARY         reduce using rule 134 (integer_type -> INTEGER .)
    CHARACTER       reduce using rule 134 (integer_type -> INTEGER .)
    COLLATE         reduce using rule 134 (integer_type -> INTEGER .)
    FIRST           reduce using rule 134 (integer_type -> INTEGER .)
    AFTER           reduce using rule 134 (integer_type -> INTEGER .)
    ,               reduce using rule 134 (integer_type -> INTEGER .)
    DELIM           reduce using rule 134 (integer_type -> INTEGER .)
    ;               reduce using rule 134 (integer_type -> INTEGER .)
    )               reduce using rule 134 (integer_type -> INTEGER .)


state 555

    (195) column_statement -> data_type . column_options
    (193) column_options -> .
    (194) column_options -> . column_option column_options
    (187) column_option -> . null
    (188) column_option -> . default
    (189) column_option -> . auto_increment
    (190) column_option -> . key
    (191) column_option -> . charset_statement
    (192) column_option -> . collate_statement
    (147) null -> . NULL
    (148) null -> . NOT NULL
    (153) default -> . DEFAULT value
    (152) auto_increment -> . AUTO_INCREMENT
    (149) key -> . UNIQUE ignore_key
    (150) key -> . KEY
    (151) key -> . PRIMARY KEY
    (145) charset_statement -> . CHARACTER SET IDENT
    (146) collate_statement -> . COLLATE IDENT

    FIRST           reduce using rule 193 (column_options -> .)
    AFTER           reduce using rule 193 (column_options -> .)
    ,               reduce using rule 193 (column_options -> .)
    DELIM           reduce using rule 193 (column_options -> .)
    ;               reduce using rule 193 (column_options -> .)
    )               reduce using rule 193 (column_options -> .)
    NULL            shift and go to state 675
    NOT             shift and go to state 689
    DEFAULT         shift and go to state 673
    AUTO_INCREMENT  shift and go to state 677
    UNIQUE          shift and go to state 685
    KEY             shift and go to state 688
    PRIMARY         shift and go to state 687
    CHARACTER       shift and go to state 674
    COLLATE         shift and go to state 683

    collate_statement              shift and go to state 676
    column_options                 shift and go to state 680
    default                        shift and go to state 686
    auto_increment                 shift and go to state 681
    charset_statement              shift and go to state 678
    column_option                  shift and go to state 679
    key                            shift and go to state 684
    null                           shift and go to state 682

state 556

    (185) data_type -> simple_statement .

    NULL            reduce using rule 185 (data_type -> simple_statement .)
    NOT             reduce using rule 185 (data_type -> simple_statement .)
    DEFAULT         reduce using rule 185 (data_type -> simple_statement .)
    AUTO_INCREMENT  reduce using rule 185 (data_type -> simple_statement .)
    UNIQUE          reduce using rule 185 (data_type -> simple_statement .)
    KEY             reduce using rule 185 (data_type -> simple_statement .)
    PRIMARY         reduce using rule 185 (data_type -> simple_statement .)
    CHARACTER       reduce using rule 185 (data_type -> simple_statement .)
    COLLATE         reduce using rule 185 (data_type -> simple_statement .)
    FIRST           reduce using rule 185 (data_type -> simple_statement .)
    AFTER           reduce using rule 185 (data_type -> simple_statement .)
    ,               reduce using rule 185 (data_type -> simple_statement .)
    DELIM           reduce using rule 185 (data_type -> simple_statement .)
    ;               reduce using rule 185 (data_type -> simple_statement .)
    )               reduce using rule 185 (data_type -> simple_statement .)


state 557

    (137) double_precision_type -> DECIMAL .

    (               reduce using rule 137 (double_precision_type -> DECIMAL .)
    UNSIGNED        reduce using rule 137 (double_precision_type -> DECIMAL .)
    NULL            reduce using rule 137 (double_precision_type -> DECIMAL .)
    NOT             reduce using rule 137 (double_precision_type -> DECIMAL .)
    DEFAULT         reduce using rule 137 (double_precision_type -> DECIMAL .)
    AUTO_INCREMENT  reduce using rule 137 (double_precision_type -> DECIMAL .)
    UNIQUE          reduce using rule 137 (double_precision_type -> DECIMAL .)
    KEY             reduce using rule 137 (double_precision_type -> DECIMAL .)
    PRIMARY         reduce using rule 137 (double_precision_type -> DECIMAL .)
    CHARACTER       reduce using rule 137 (double_precision_type -> DECIMAL .)
    COLLATE         reduce using rule 137 (double_precision_type -> DECIMAL .)
    FIRST           reduce using rule 137 (double_precision_type -> DECIMAL .)
    AFTER           reduce using rule 137 (double_precision_type -> DECIMAL .)
    ,               reduce using rule 137 (double_precision_type -> DECIMAL .)
    DELIM           reduce using rule 137 (double_precision_type -> DECIMAL .)
    ;               reduce using rule 137 (double_precision_type -> DECIMAL .)
    )               reduce using rule 137 (double_precision_type -> DECIMAL .)


state 558

    (175) simple_statement -> DATETIME .

    NULL            reduce using rule 175 (simple_statement -> DATETIME .)
    NOT             reduce using rule 175 (simple_statement -> DATETIME .)
    DEFAULT         reduce using rule 175 (simple_statement -> DATETIME .)
    AUTO_INCREMENT  reduce using rule 175 (simple_statement -> DATETIME .)
    UNIQUE          reduce using rule 175 (simple_statement -> DATETIME .)
    KEY             reduce using rule 175 (simple_statement -> DATETIME .)
    PRIMARY         reduce using rule 175 (simple_statement -> DATETIME .)
    CHARACTER       reduce using rule 175 (simple_statement -> DATETIME .)
    COLLATE         reduce using rule 175 (simple_statement -> DATETIME .)
    FIRST           reduce using rule 175 (simple_statement -> DATETIME .)
    AFTER           reduce using rule 175 (simple_statement -> DATETIME .)
    ,               reduce using rule 175 (simple_statement -> DATETIME .)
    DELIM           reduce using rule 175 (simple_statement -> DATETIME .)
    ;               reduce using rule 175 (simple_statement -> DATETIME .)
    )               reduce using rule 175 (simple_statement -> DATETIME .)


state 559

    (168) text_type -> TEXT .

    NULL            reduce using rule 168 (text_type -> TEXT .)
    NOT             reduce using rule 168 (text_type -> TEXT .)
    DEFAULT         reduce using rule 168 (text_type -> TEXT .)
    AUTO_INCREMENT  reduce using rule 168 (text_type -> TEXT .)
    UNIQUE          reduce using rule 168 (text_type -> TEXT .)
    KEY             reduce using rule 168 (text_type -> TEXT .)
    PRIMARY         reduce using rule 168 (text_type -> TEXT .)
    CHARACTER       reduce using rule 168 (text_type -> TEXT .)
    COLLATE         reduce using rule 168 (text_type -> TEXT .)
    FIRST           reduce using rule 168 (text_type -> TEXT .)
    AFTER           reduce using rule 168 (text_type -> TEXT .)
    ,               reduce using rule 168 (text_type -> TEXT .)
    DELIM           reduce using rule 168 (text_type -> TEXT .)
    ;               reduce using rule 168 (text_type -> TEXT .)
    )               reduce using rule 168 (text_type -> TEXT .)


state 560

    (182) data_type -> character_statement .

    NULL            reduce using rule 182 (data_type -> character_statement .)
    NOT             reduce using rule 182 (data_type -> character_statement .)
    DEFAULT         reduce using rule 182 (data_type -> character_statement .)
    AUTO_INCREMENT  reduce using rule 182 (data_type -> character_statement .)
    UNIQUE          reduce using rule 182 (data_type -> character_statement .)
    KEY             reduce using rule 182 (data_type -> character_statement .)
    PRIMARY         reduce using rule 182 (data_type -> character_statement .)
    CHARACTER       reduce using rule 182 (data_type -> character_statement .)
    COLLATE         reduce using rule 182 (data_type -> character_statement .)
    FIRST           reduce using rule 182 (data_type -> character_statement .)
    AFTER           reduce using rule 182 (data_type -> character_statement .)
    ,               reduce using rule 182 (data_type -> character_statement .)
    DELIM           reduce using rule 182 (data_type -> character_statement .)
    ;               reduce using rule 182 (data_type -> character_statement .)
    )               reduce using rule 182 (data_type -> character_statement .)


state 561

    (171) text_statement -> text_type .

    NULL            reduce using rule 171 (text_statement -> text_type .)
    NOT             reduce using rule 171 (text_statement -> text_type .)
    DEFAULT         reduce using rule 171 (text_statement -> text_type .)
    AUTO_INCREMENT  reduce using rule 171 (text_statement -> text_type .)
    UNIQUE          reduce using rule 171 (text_statement -> text_type .)
    KEY             reduce using rule 171 (text_statement -> text_type .)
    PRIMARY         reduce using rule 171 (text_statement -> text_type .)
    CHARACTER       reduce using rule 171 (text_statement -> text_type .)
    COLLATE         reduce using rule 171 (text_statement -> text_type .)
    FIRST           reduce using rule 171 (text_statement -> text_type .)
    AFTER           reduce using rule 171 (text_statement -> text_type .)
    ,               reduce using rule 171 (text_statement -> text_type .)
    DELIM           reduce using rule 171 (text_statement -> text_type .)
    ;               reduce using rule 171 (text_statement -> text_type .)
    )               reduce using rule 171 (text_statement -> text_type .)


state 562

    (167) text_type -> TINYTEXT .

    NULL            reduce using rule 167 (text_type -> TINYTEXT .)
    NOT             reduce using rule 167 (text_type -> TINYTEXT .)
    DEFAULT         reduce using rule 167 (text_type -> TINYTEXT .)
    AUTO_INCREMENT  reduce using rule 167 (text_type -> TINYTEXT .)
    UNIQUE          reduce using rule 167 (text_type -> TINYTEXT .)
    KEY             reduce using rule 167 (text_type -> TINYTEXT .)
    PRIMARY         reduce using rule 167 (text_type -> TINYTEXT .)
    CHARACTER       reduce using rule 167 (text_type -> TINYTEXT .)
    COLLATE         reduce using rule 167 (text_type -> TINYTEXT .)
    FIRST           reduce using rule 167 (text_type -> TINYTEXT .)
    AFTER           reduce using rule 167 (text_type -> TINYTEXT .)
    ,               reduce using rule 167 (text_type -> TINYTEXT .)
    DELIM           reduce using rule 167 (text_type -> TINYTEXT .)
    ;               reduce using rule 167 (text_type -> TINYTEXT .)
    )               reduce using rule 167 (text_type -> TINYTEXT .)


state 563

    (133) integer_type -> INT .

    (               reduce using rule 133 (integer_type -> INT .)
    UNSIGNED        reduce using rule 133 (integer_type -> INT .)
    NULL            reduce using rule 133 (integer_type -> INT .)
    NOT             reduce using rule 133 (integer_type -> INT .)
    DEFAULT         reduce using rule 133 (integer_type -> INT .)
    AUTO_INCREMENT  reduce using rule 133 (integer_type -> INT .)
    UNIQUE          reduce using rule 133 (integer_type -> INT .)
    KEY             reduce using rule 133 (integer_type -> INT .)
    PRIMARY         reduce using rule 133 (integer_type -> INT .)
    CHARACTER       reduce using rule 133 (integer_type -> INT .)
    COLLATE         reduce using rule 133 (integer_type -> INT .)
    FIRST           reduce using rule 133 (integer_type -> INT .)
    AFTER           reduce using rule 133 (integer_type -> INT .)
    ,               reduce using rule 133 (integer_type -> INT .)
    DELIM           reduce using rule 133 (integer_type -> INT .)
    ;               reduce using rule 133 (integer_type -> INT .)
    )               reduce using rule 133 (integer_type -> INT .)


state 564

    (174) simple_statement -> TIMESTAMP .

    NULL            reduce using rule 174 (simple_statement -> TIMESTAMP .)
    NOT             reduce using rule 174 (simple_statement -> TIMESTAMP .)
    DEFAULT         reduce using rule 174 (simple_statement -> TIMESTAMP .)
    AUTO_INCREMENT  reduce using rule 174 (simple_statement -> TIMESTAMP .)
    UNIQUE          reduce using rule 174 (simple_statement -> TIMESTAMP .)
    KEY             reduce using rule 174 (simple_statement -> TIMESTAMP .)
    PRIMARY         reduce using rule 174 (simple_statement -> TIMESTAMP .)
    CHARACTER       reduce using rule 174 (simple_statement -> TIMESTAMP .)
    COLLATE         reduce using rule 174 (simple_statement -> TIMESTAMP .)
    FIRST           reduce using rule 174 (simple_statement -> TIMESTAMP .)
    AFTER           reduce using rule 174 (simple_statement -> TIMESTAMP .)
    ,               reduce using rule 174 (simple_statement -> TIMESTAMP .)
    DELIM           reduce using rule 174 (simple_statement -> TIMESTAMP .)
    ;               reduce using rule 174 (simple_statement -> TIMESTAMP .)
    )               reduce using rule 174 (simple_statement -> TIMESTAMP .)


state 565

    (136) double_precision_type -> FLOAT .

    (               reduce using rule 136 (double_precision_type -> FLOAT .)
    UNSIGNED        reduce using rule 136 (double_precision_type -> FLOAT .)
    NULL            reduce using rule 136 (double_precision_type -> FLOAT .)
    NOT             reduce using rule 136 (double_precision_type -> FLOAT .)
    DEFAULT         reduce using rule 136 (double_precision_type -> FLOAT .)
    AUTO_INCREMENT  reduce using rule 136 (double_precision_type -> FLOAT .)
    UNIQUE          reduce using rule 136 (double_precision_type -> FLOAT .)
    KEY             reduce using rule 136 (double_precision_type -> FLOAT .)
    PRIMARY         reduce using rule 136 (double_precision_type -> FLOAT .)
    CHARACTER       reduce using rule 136 (double_precision_type -> FLOAT .)
    COLLATE         reduce using rule 136 (double_precision_type -> FLOAT .)
    FIRST           reduce using rule 136 (double_precision_type -> FLOAT .)
    AFTER           reduce using rule 136 (double_precision_type -> FLOAT .)
    ,               reduce using rule 136 (double_precision_type -> FLOAT .)
    DELIM           reduce using rule 136 (double_precision_type -> FLOAT .)
    ;               reduce using rule 136 (double_precision_type -> FLOAT .)
    )               reduce using rule 136 (double_precision_type -> FLOAT .)


state 566

    (169) text_type -> MEDIUMTEXT .

    NULL            reduce using rule 169 (text_type -> MEDIUMTEXT .)
    NOT             reduce using rule 169 (text_type -> MEDIUMTEXT .)
    DEFAULT         reduce using rule 169 (text_type -> MEDIUMTEXT .)
    AUTO_INCREMENT  reduce using rule 169 (text_type -> MEDIUMTEXT .)
    UNIQUE          reduce using rule 169 (text_type -> MEDIUMTEXT .)
    KEY             reduce using rule 169 (text_type -> MEDIUMTEXT .)
    PRIMARY         reduce using rule 169 (text_type -> MEDIUMTEXT .)
    CHARACTER       reduce using rule 169 (text_type -> MEDIUMTEXT .)
    COLLATE         reduce using rule 169 (text_type -> MEDIUMTEXT .)
    FIRST           reduce using rule 169 (text_type -> MEDIUMTEXT .)
    AFTER           reduce using rule 169 (text_type -> MEDIUMTEXT .)
    ,               reduce using rule 169 (text_type -> MEDIUMTEXT .)
    DELIM           reduce using rule 169 (text_type -> MEDIUMTEXT .)
    ;               reduce using rule 169 (text_type -> MEDIUMTEXT .)
    )               reduce using rule 169 (text_type -> MEDIUMTEXT .)


state 567

    (177) binary_statement -> BLOB .

    NULL            reduce using rule 177 (binary_statement -> BLOB .)
    NOT             reduce using rule 177 (binary_statement -> BLOB .)
    DEFAULT         reduce using rule 177 (binary_statement -> BLOB .)
    AUTO_INCREMENT  reduce using rule 177 (binary_statement -> BLOB .)
    UNIQUE          reduce using rule 177 (binary_statement -> BLOB .)
    KEY             reduce using rule 177 (binary_statement -> BLOB .)
    PRIMARY         reduce using rule 177 (binary_statement -> BLOB .)
    CHARACTER       reduce using rule 177 (binary_statement -> BLOB .)
    COLLATE         reduce using rule 177 (binary_statement -> BLOB .)
    FIRST           reduce using rule 177 (binary_statement -> BLOB .)
    AFTER           reduce using rule 177 (binary_statement -> BLOB .)
    ,               reduce using rule 177 (binary_statement -> BLOB .)
    DELIM           reduce using rule 177 (binary_statement -> BLOB .)
    ;               reduce using rule 177 (binary_statement -> BLOB .)
    )               reduce using rule 177 (binary_statement -> BLOB .)


state 568

    (165) character_statement -> check_char_or_character . limit_opt
    (139) limit_opt -> .
    (140) limit_opt -> . limit
    (141) limit -> . ( NUMBER )

    NULL            reduce using rule 139 (limit_opt -> .)
    NOT             reduce using rule 139 (limit_opt -> .)
    DEFAULT         reduce using rule 139 (limit_opt -> .)
    AUTO_INCREMENT  reduce using rule 139 (limit_opt -> .)
    UNIQUE          reduce using rule 139 (limit_opt -> .)
    KEY             reduce using rule 139 (limit_opt -> .)
    PRIMARY         reduce using rule 139 (limit_opt -> .)
    CHARACTER       reduce using rule 139 (limit_opt -> .)
    COLLATE         reduce using rule 139 (limit_opt -> .)
    FIRST           reduce using rule 139 (limit_opt -> .)
    AFTER           reduce using rule 139 (limit_opt -> .)
    ,               reduce using rule 139 (limit_opt -> .)
    DELIM           reduce using rule 139 (limit_opt -> .)
    ;               reduce using rule 139 (limit_opt -> .)
    )               reduce using rule 139 (limit_opt -> .)
    (               shift and go to state 662

    limit                          shift and go to state 664
    limit_opt                      shift and go to state 690

state 569

    (173) simple_statement -> TIME .

    NULL            reduce using rule 173 (simple_statement -> TIME .)
    NOT             reduce using rule 173 (simple_statement -> TIME .)
    DEFAULT         reduce using rule 173 (simple_statement -> TIME .)
    AUTO_INCREMENT  reduce using rule 173 (simple_statement -> TIME .)
    UNIQUE          reduce using rule 173 (simple_statement -> TIME .)
    KEY             reduce using rule 173 (simple_statement -> TIME .)
    PRIMARY         reduce using rule 173 (simple_statement -> TIME .)
    CHARACTER       reduce using rule 173 (simple_statement -> TIME .)
    COLLATE         reduce using rule 173 (simple_statement -> TIME .)
    FIRST           reduce using rule 173 (simple_statement -> TIME .)
    AFTER           reduce using rule 173 (simple_statement -> TIME .)
    ,               reduce using rule 173 (simple_statement -> TIME .)
    DELIM           reduce using rule 173 (simple_statement -> TIME .)
    ;               reduce using rule 173 (simple_statement -> TIME .)
    )               reduce using rule 173 (simple_statement -> TIME .)


state 570

    (179) binary_statement -> LONGBLOB .

    NULL            reduce using rule 179 (binary_statement -> LONGBLOB .)
    NOT             reduce using rule 179 (binary_statement -> LONGBLOB .)
    DEFAULT         reduce using rule 179 (binary_statement -> LONGBLOB .)
    AUTO_INCREMENT  reduce using rule 179 (binary_statement -> LONGBLOB .)
    UNIQUE          reduce using rule 179 (binary_statement -> LONGBLOB .)
    KEY             reduce using rule 179 (binary_statement -> LONGBLOB .)
    PRIMARY         reduce using rule 179 (binary_statement -> LONGBLOB .)
    CHARACTER       reduce using rule 179 (binary_statement -> LONGBLOB .)
    COLLATE         reduce using rule 179 (binary_statement -> LONGBLOB .)
    FIRST           reduce using rule 179 (binary_statement -> LONGBLOB .)
    AFTER           reduce using rule 179 (binary_statement -> LONGBLOB .)
    ,               reduce using rule 179 (binary_statement -> LONGBLOB .)
    DELIM           reduce using rule 179 (binary_statement -> LONGBLOB .)
    ;               reduce using rule 179 (binary_statement -> LONGBLOB .)
    )               reduce using rule 179 (binary_statement -> LONGBLOB .)


state 571

    (176) binary_statement -> TINYBLOB .

    NULL            reduce using rule 176 (binary_statement -> TINYBLOB .)
    NOT             reduce using rule 176 (binary_statement -> TINYBLOB .)
    DEFAULT         reduce using rule 176 (binary_statement -> TINYBLOB .)
    AUTO_INCREMENT  reduce using rule 176 (binary_statement -> TINYBLOB .)
    UNIQUE          reduce using rule 176 (binary_statement -> TINYBLOB .)
    KEY             reduce using rule 176 (binary_statement -> TINYBLOB .)
    PRIMARY         reduce using rule 176 (binary_statement -> TINYBLOB .)
    CHARACTER       reduce using rule 176 (binary_statement -> TINYBLOB .)
    COLLATE         reduce using rule 176 (binary_statement -> TINYBLOB .)
    FIRST           reduce using rule 176 (binary_statement -> TINYBLOB .)
    AFTER           reduce using rule 176 (binary_statement -> TINYBLOB .)
    ,               reduce using rule 176 (binary_statement -> TINYBLOB .)
    DELIM           reduce using rule 176 (binary_statement -> TINYBLOB .)
    ;               reduce using rule 176 (binary_statement -> TINYBLOB .)
    )               reduce using rule 176 (binary_statement -> TINYBLOB .)


state 572

    (232) change_default -> ALTER ignore_column IDENT SET . DEFAULT literal

    DEFAULT         shift and go to state 691


state 573

    (233) change_default -> ALTER ignore_column IDENT DROP . DEFAULT

    DEFAULT         shift and go to state 692


state 574

    (230) change_column -> CHANGE ignore_column column_name column_name . column_statement position_opt
    (195) column_statement -> . data_type column_options
    (180) data_type -> . integer_statement
    (181) data_type -> . double_precision_statement
    (182) data_type -> . character_statement
    (183) data_type -> . string_statement
    (184) data_type -> . text_statement
    (185) data_type -> . simple_statement
    (186) data_type -> . binary_statement
    (161) integer_statement -> . integer_type limit_opt unsigned_opt
    (162) double_precision_statement -> . double_precision_type bidimensional_limit_opt unsigned_opt
    (165) character_statement -> . check_char_or_character limit_opt
    (166) string_statement -> . VARCHAR limit
    (171) text_statement -> . text_type
    (172) simple_statement -> . DATE
    (173) simple_statement -> . TIME
    (174) simple_statement -> . TIMESTAMP
    (175) simple_statement -> . DATETIME
    (176) binary_statement -> . TINYBLOB
    (177) binary_statement -> . BLOB
    (178) binary_statement -> . MEDIUMBLOB
    (179) binary_statement -> . LONGBLOB
    (130) integer_type -> . TINYINT
    (131) integer_type -> . SMALLINT
    (132) integer_type -> . MEDIUMINT
    (133) integer_type -> . INT
    (134) integer_type -> . INTEGER
    (135) integer_type -> . BIGINT
    (136) double_precision_type -> . FLOAT
    (137) double_precision_type -> . DECIMAL
    (138) double_precision_type -> . NUMERIC
    (163) check_char_or_character -> . CHAR
    (164) check_char_or_character -> . CHARACTER
    (167) text_type -> . TINYTEXT
    (168) text_type -> . TEXT
    (169) text_type -> . MEDIUMTEXT
    (170) text_type -> . LONGTEXT

    VARCHAR         shift and go to state 545
    DATE            shift and go to state 541
    TIME            shift and go to state 569
    TIMESTAMP       shift and go to state 564
    DATETIME        shift and go to state 558
    TINYBLOB        shift and go to state 571
    BLOB            shift and go to state 567
    MEDIUMBLOB      shift and go to state 544
    LONGBLOB        shift and go to state 570
    TINYINT         shift and go to state 539
    SMALLINT        shift and go to state 543
    MEDIUMINT       shift and go to state 536
    INT             shift and go to state 563
    INTEGER         shift and go to state 554
    BIGINT          shift and go to state 540
    FLOAT           shift and go to state 565
    DECIMAL         shift and go to state 557
    NUMERIC         shift and go to state 550
    CHAR            shift and go to state 537
    CHARACTER       shift and go to state 548
    TINYTEXT        shift and go to state 562
    TEXT            shift and go to state 559
    MEDIUMTEXT      shift and go to state 566
    LONGTEXT        shift and go to state 535

    check_char_or_character        shift and go to state 568
    data_type                      shift and go to state 555
    double_precision_type          shift and go to state 546
    string_statement               shift and go to state 547
    simple_statement               shift and go to state 556
    column_statement               shift and go to state 693
    binary_statement               shift and go to state 542
    integer_type                   shift and go to state 538
    double_precision_statement     shift and go to state 552
    text_statement                 shift and go to state 553
    character_statement            shift and go to state 560
    integer_statement              shift and go to state 551
    text_type                      shift and go to state 561

state 575

    (227) add_index -> ADD check_index_or_key index_name_opt ( . column_names )
    (121) column_names -> . column_name
    (122) column_names -> . column_name , column_names
    (120) column_name -> . IDENT

    IDENT           shift and go to state 428

    column_names                   shift and go to state 694
    column_name                    shift and go to state 695

state 576

    (229) add_primary_key -> ADD constraint_opt PRIMARY KEY . ( column_names )

    (               shift and go to state 696


state 577

    (105) ignore_index_or_key -> INDEX .

    IDENT           reduce using rule 105 (ignore_index_or_key -> INDEX .)
    (               reduce using rule 105 (ignore_index_or_key -> INDEX .)


state 578

    (104) ignore_index_or_key -> KEY .

    IDENT           reduce using rule 104 (ignore_index_or_key -> KEY .)
    (               reduce using rule 104 (ignore_index_or_key -> KEY .)


state 579

    (228) add_index -> ADD constraint_opt UNIQUE ignore_index_or_key . index_name_opt ( column_names )
    (126) index_name_opt -> .
    (127) index_name_opt -> . IDENT

    (               reduce using rule 126 (index_name_opt -> .)
    IDENT           shift and go to state 438

    index_name_opt                 shift and go to state 697

state 580

    (226) add_column -> ADD ignore_column column_name column_statement . position_opt
    (222) position_opt -> .
    (223) position_opt -> . position
    (224) position -> . FIRST
    (225) position -> . AFTER IDENT

    ,               reduce using rule 222 (position_opt -> .)
    DELIM           reduce using rule 222 (position_opt -> .)
    ;               reduce using rule 222 (position_opt -> .)
    FIRST           shift and go to state 672
    AFTER           shift and go to state 669

    position                       shift and go to state 671
    position_opt                   shift and go to state 698

state 581

    (262) opt_insert_update -> ON DUPLICATE . KEY UPDATE insert_update_list

    KEY             shift and go to state 699


state 582

    (124) index_statement -> INDEX IDENT . ( column_names )

    (               shift and go to state 700


state 583

    (123) primary_key_statement -> constraint_opt PRIMARY . KEY ( column_names )

    KEY             shift and go to state 701


state 584

    (128) unique_statement -> constraint_opt UNIQUE . ignore_index_or_key index_name_opt ( column_names )
    (104) ignore_index_or_key -> . KEY
    (105) ignore_index_or_key -> . INDEX
    (106) ignore_index_or_key -> .

    KEY             shift and go to state 578
    INDEX           shift and go to state 577
    IDENT           reduce using rule 106 (ignore_index_or_key -> .)
    (               reduce using rule 106 (ignore_index_or_key -> .)

    ignore_index_or_key            shift and go to state 702

state 585

    (201) create_statements -> create_statement , . create_statements
    (200) create_statements -> . create_statement
    (201) create_statements -> . create_statement , create_statements
    (196) create_statement -> . col_name column_statement
    (197) create_statement -> . primary_key_statement
    (198) create_statement -> . index_statement
    (199) create_statement -> . unique_statement
    (129) col_name -> . IDENT
    (123) primary_key_statement -> . constraint_opt PRIMARY KEY ( column_names )
    (124) index_statement -> . INDEX IDENT ( column_names )
    (125) index_statement -> . KEY IDENT ( column_names )
    (128) unique_statement -> . constraint_opt UNIQUE ignore_index_or_key index_name_opt ( column_names )
    (118) constraint_opt -> .
    (119) constraint_opt -> . CONSTRAINT IDENT

    IDENT           shift and go to state 447
    INDEX           shift and go to state 444
    KEY             shift and go to state 453
    PRIMARY         reduce using rule 118 (constraint_opt -> .)
    UNIQUE          reduce using rule 118 (constraint_opt -> .)
    CONSTRAINT      shift and go to state 309

    create_statements              shift and go to state 703
    create_statement               shift and go to state 448
    unique_statement               shift and go to state 451
    col_name                       shift and go to state 449
    index_statement                shift and go to state 445
    constraint_opt                 shift and go to state 446
    primary_key_statement          shift and go to state 452

state 586

    (196) create_statement -> col_name column_statement .

    ,               reduce using rule 196 (create_statement -> col_name column_statement .)
    )               reduce using rule 196 (create_statement -> col_name column_statement .)


state 587

    (213) create_table -> CREATE TABLE if_not_exists IDENT ( create_statements ) . table_options_opt
    (207) table_options_opt -> .
    (208) table_options_opt -> . table_options
    (209) table_options -> . table_option
    (210) table_options -> . table_option ignore_comma table_options
    (202) table_option -> . ENGINE ignore_eq IDENT
    (203) table_option -> . AUTO_INCREMENT ignore_eq NUMBER
    (204) table_option -> . ignore_default CHARACTER SET ignore_eq IDENT
    (205) table_option -> . ignore_default CHARSET ignore_eq IDENT
    (206) table_option -> . ignore_default COLLATE ignore_eq IDENT
    (109) ignore_default -> . DEFAULT
    (110) ignore_default -> .

    DELIM           reduce using rule 207 (table_options_opt -> .)
    ;               reduce using rule 207 (table_options_opt -> .)
    ENGINE          shift and go to state 704
    AUTO_INCREMENT  shift and go to state 708
    DEFAULT         shift and go to state 707
    CHARACTER       reduce using rule 110 (ignore_default -> .)
    CHARSET         reduce using rule 110 (ignore_default -> .)
    COLLATE         reduce using rule 110 (ignore_default -> .)

    table_option                   shift and go to state 705
    table_options_opt              shift and go to state 706
    table_options                  shift and go to state 710
    ignore_default                 shift and go to state 709

state 588

    (125) index_statement -> KEY IDENT . ( column_names )

    (               shift and go to state 711


state 589

    (535) create_index -> CREATE unique_opt INDEX IDENT ON IDENT ( . ident_list )
    (330) ident_list -> . IDENT
    (331) ident_list -> . IDENT , ident_list

    IDENT           shift and go to state 86

    ident_list                     shift and go to state 712

state 590

    (418) create_trigger -> CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT . FOR EACH ROW sp_proc_stmt

    FOR             shift and go to state 713


state 591

    (307) ident_eq_value -> simple_ident_nospvar equal expr_or_default .

    ,               reduce using rule 307 (ident_eq_value -> simple_ident_nospvar equal expr_or_default .)
    DELIM           reduce using rule 307 (ident_eq_value -> simple_ident_nospvar equal expr_or_default .)
    ;               reduce using rule 307 (ident_eq_value -> simple_ident_nospvar equal expr_or_default .)
    ON              reduce using rule 307 (ident_eq_value -> simple_ident_nospvar equal expr_or_default .)


state 592

    (309) ident_eq_list -> ident_eq_value , ident_eq_list .

    DELIM           reduce using rule 309 (ident_eq_list -> ident_eq_value , ident_eq_list .)
    ;               reduce using rule 309 (ident_eq_list -> ident_eq_value , ident_eq_list .)
    ON              reduce using rule 309 (ident_eq_list -> ident_eq_value , ident_eq_list .)


state 593

    (273) values_list -> no_braces , values_list .

    DELIM           reduce using rule 273 (values_list -> no_braces , values_list .)
    ;               reduce using rule 273 (values_list -> no_braces , values_list .)
    ON              reduce using rule 273 (values_list -> no_braces , values_list .)


state 594

    (271) no_braces -> ( opt_values ) .

    ,               reduce using rule 271 (no_braces -> ( opt_values ) .)
    DELIM           reduce using rule 271 (no_braces -> ( opt_values ) .)
    ;               reduce using rule 271 (no_braces -> ( opt_values ) .)
    ON              reduce using rule 271 (no_braces -> ( opt_values ) .)


state 595

    (270) values -> expr_or_default , . values
    (269) values -> . expr_or_default
    (270) values -> . expr_or_default , values
    (254) expr_or_default -> . expr
    (255) expr_or_default -> . DEFAULT
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    DEFAULT         shift and go to state 462
    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    bit_function                   shift and go to state 153
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    average_function               shift and go to state 130
    other_function                 shift and go to state 154
    expr                           shift and go to state 464
    simple_expr                    shift and go to state 131
    values                         shift and go to state 714
    max_function                   shift and go to state 149
    expr_or_default                shift and go to state 466

state 596

    (266) fields -> insert_ident , fields .

    )               reduce using rule 266 (fields -> insert_ident , fields .)


state 597

    (287) union_opt -> union_list .

    DELIM           reduce using rule 287 (union_opt -> union_list .)
    ;               reduce using rule 287 (union_opt -> union_list .)
    ON              reduce using rule 287 (union_opt -> union_list .)
    )               reduce using rule 287 (union_opt -> union_list .)


state 598

    (303) insert_values -> ( create_select ) union_opt .

    DELIM           reduce using rule 303 (insert_values -> ( create_select ) union_opt .)
    ;               reduce using rule 303 (insert_values -> ( create_select ) union_opt .)
    ON              reduce using rule 303 (insert_values -> ( create_select ) union_opt .)


state 599

    (290) order_or_limit -> order_clause . opt_limit_clause_init
    (288) opt_limit_clause_init -> .
    (289) opt_limit_clause_init -> . limit_clause
    (447) limit_clause -> . LIMIT limit_options

    DELIM           reduce using rule 288 (opt_limit_clause_init -> .)
    ;               reduce using rule 288 (opt_limit_clause_init -> .)
    ON              reduce using rule 288 (opt_limit_clause_init -> .)
    )               reduce using rule 288 (opt_limit_clause_init -> .)
    LIMIT           shift and go to state 372

    opt_limit_clause_init          shift and go to state 715
    limit_clause                   shift and go to state 716

state 600

    (293) union_opt -> union_order_or_limit .

    DELIM           reduce using rule 293 (union_opt -> union_order_or_limit .)
    ;               reduce using rule 293 (union_opt -> union_order_or_limit .)
    ON              reduce using rule 293 (union_opt -> union_order_or_limit .)
    )               reduce using rule 293 (union_opt -> union_order_or_limit .)


state 601

    (292) union_order_or_limit -> order_or_limit .

    DELIM           reduce using rule 292 (union_order_or_limit -> order_or_limit .)
    ;               reduce using rule 292 (union_order_or_limit -> order_or_limit .)
    )               reduce using rule 292 (union_order_or_limit -> order_or_limit .)
    ON              reduce using rule 292 (union_order_or_limit -> order_or_limit .)


state 602

    (291) order_or_limit -> limit_clause .

    DELIM           reduce using rule 291 (order_or_limit -> limit_clause .)
    ;               reduce using rule 291 (order_or_limit -> limit_clause .)
    ON              reduce using rule 291 (order_or_limit -> limit_clause .)
    )               reduce using rule 291 (order_or_limit -> limit_clause .)


state 603

    (306) insert_field_spec -> ( fields ) insert_values .

    DELIM           reduce using rule 306 (insert_field_spec -> ( fields ) insert_values .)
    ;               reduce using rule 306 (insert_field_spec -> ( fields ) insert_values .)
    ON              reduce using rule 306 (insert_field_spec -> ( fields ) insert_values .)


state 604

    (280) opt_select_from -> select_from . select_lock_type
    (277) select_lock_type -> .
    (278) select_lock_type -> . FOR UPDATE
    (279) select_lock_type -> . LOCK IN SHARE MODE

    UNION           reduce using rule 277 (select_lock_type -> .)
    DELIM           reduce using rule 277 (select_lock_type -> .)
    ;               reduce using rule 277 (select_lock_type -> .)
    ON              reduce using rule 277 (select_lock_type -> .)
    )               reduce using rule 277 (select_lock_type -> .)
    FOR             shift and go to state 368
    LOCK            shift and go to state 369

    select_lock_type               shift and go to state 717

state 605

    (276) opt_select_from -> opt_limit_clause .

    UNION           reduce using rule 276 (opt_select_from -> opt_limit_clause .)
    DELIM           reduce using rule 276 (opt_select_from -> opt_limit_clause .)
    ;               reduce using rule 276 (opt_select_from -> opt_limit_clause .)
    ON              reduce using rule 276 (opt_select_from -> opt_limit_clause .)
    )               reduce using rule 276 (opt_select_from -> opt_limit_clause .)


state 606

    (281) create_select -> SELECT select_options select_item_list opt_select_from .

    )               reduce using rule 281 (create_select -> SELECT select_options select_item_list opt_select_from .)
    UNION           reduce using rule 281 (create_select -> SELECT select_options select_item_list opt_select_from .)
    DELIM           reduce using rule 281 (create_select -> SELECT select_options select_item_list opt_select_from .)
    ;               reduce using rule 281 (create_select -> SELECT select_options select_item_list opt_select_from .)
    ON              reduce using rule 281 (create_select -> SELECT select_options select_item_list opt_select_from .)


state 607

    (83) count_function -> COUNT ( opt_all * ) .

    BITWISE_OR      reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    BITWISE_AND     reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    SHL             reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    SHR             reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    PLUS            reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    MINUS           reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    TIMES           reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    DIV             reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    MOD             reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    BITWISE_XOR     reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    SOUNDS          reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    NOT             reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    LOGICAL_NOT     reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    IN              reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    BETWEEN         reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    LIKE            reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    REGEXP          reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    IS              reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    NULL_SAFE       reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    EQ              reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    GE              reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    GT              reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    LE              reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    LT              reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    NE              reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    OR              reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    AND             reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    XOR             reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    AS              reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    IDENT           reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    ,               reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    INTO            reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    FROM            reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    ORDER           reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    FOR             reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    LOCK            reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    LIMIT           reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    UNION           reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    DELIM           reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    ;               reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    )               reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    ON              reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    USING           reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    ASC             reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    DESC            reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    WHERE           reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    GROUP           reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    HAVING          reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    JOIN            reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    INNER           reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    CROSS           reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    LEFT            reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    RIGHT           reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    NATURAL         reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    WITH            reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    DO              reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    WHEN            reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    THEN            reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    END             reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)
    ESCAPE          reduce using rule 83 (count_function -> COUNT ( opt_all * ) .)


state 608

    (85) count_function -> COUNT ( DISTINCT expr_list ) .

    BITWISE_OR      reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    BITWISE_AND     reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    SHL             reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    SHR             reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    PLUS            reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    MINUS           reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    TIMES           reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    DIV             reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    MOD             reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    BITWISE_XOR     reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    SOUNDS          reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    NOT             reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    LOGICAL_NOT     reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    IN              reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    BETWEEN         reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    LIKE            reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    REGEXP          reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    IS              reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    NULL_SAFE       reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    EQ              reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    GE              reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    GT              reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    LE              reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    LT              reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    NE              reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    OR              reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    AND             reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    XOR             reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    AS              reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    IDENT           reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    ,               reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    INTO            reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    FROM            reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    ORDER           reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    FOR             reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    LOCK            reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    LIMIT           reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    UNION           reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    DELIM           reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    ;               reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    )               reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    ON              reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    USING           reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    ASC             reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    DESC            reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    WHERE           reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    GROUP           reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    HAVING          reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    JOIN            reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    INNER           reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    CROSS           reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    LEFT            reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    RIGHT           reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    NATURAL         reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    WITH            reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    DO              reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    WHEN            reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    THEN            reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    END             reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)
    ESCAPE          reduce using rule 85 (count_function -> COUNT ( DISTINCT expr_list ) .)


state 609

    (63) convert_function -> CONVERT ( expr USING IDENT . )

    )               shift and go to state 718


state 610

    (88) sum_function -> SUM ( opt_distinct expr ) .

    SOUNDS          reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    BITWISE_OR      reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    BITWISE_AND     reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    SHL             reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    SHR             reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    PLUS            reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    MINUS           reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    TIMES           reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    DIV             reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    MOD             reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    BITWISE_XOR     reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    NOT             reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    LOGICAL_NOT     reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    IN              reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    BETWEEN         reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    LIKE            reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    REGEXP          reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    IS              reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    NULL_SAFE       reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    EQ              reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    GE              reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    GT              reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    LE              reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    LT              reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    NE              reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    OR              reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    AND             reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    XOR             reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    LIMIT           reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    INTO            reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    FOR             reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    LOCK            reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    UNION           reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    DELIM           reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    ;               reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    )               reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    ON              reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    GROUP           reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    HAVING          reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    ORDER           reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    AS              reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    IDENT           reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    ,               reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    FROM            reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    USING           reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    ASC             reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    DESC            reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    WHERE           reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    JOIN            reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    INNER           reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    CROSS           reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    LEFT            reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    RIGHT           reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    NATURAL         reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    WITH            reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    DO              reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    WHEN            reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    THEN            reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    END             reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)
    ESCAPE          reduce using rule 88 (sum_function -> SUM ( opt_distinct expr ) .)


state 611

    (493) join_clause -> NATURAL JOIN .

    IDENT           reduce using rule 493 (join_clause -> NATURAL JOIN .)


state 612

    (498) join_table -> table_ref join_clause table_factor . opt_join_condition
    (494) opt_join_condition -> .
    (495) opt_join_condition -> . join_condition
    (496) join_condition -> . ON expr
    (497) join_condition -> . USING ( ident_list )

  ! shift/reduce conflict for ON resolved as shift
    JOIN            reduce using rule 494 (opt_join_condition -> .)
    INNER           reduce using rule 494 (opt_join_condition -> .)
    CROSS           reduce using rule 494 (opt_join_condition -> .)
    LEFT            reduce using rule 494 (opt_join_condition -> .)
    RIGHT           reduce using rule 494 (opt_join_condition -> .)
    NATURAL         reduce using rule 494 (opt_join_condition -> .)
    ,               reduce using rule 494 (opt_join_condition -> .)
    WHERE           reduce using rule 494 (opt_join_condition -> .)
    GROUP           reduce using rule 494 (opt_join_condition -> .)
    HAVING          reduce using rule 494 (opt_join_condition -> .)
    ORDER           reduce using rule 494 (opt_join_condition -> .)
    LIMIT           reduce using rule 494 (opt_join_condition -> .)
    INTO            reduce using rule 494 (opt_join_condition -> .)
    FOR             reduce using rule 494 (opt_join_condition -> .)
    LOCK            reduce using rule 494 (opt_join_condition -> .)
    UNION           reduce using rule 494 (opt_join_condition -> .)
    DELIM           reduce using rule 494 (opt_join_condition -> .)
    ;               reduce using rule 494 (opt_join_condition -> .)
    )               reduce using rule 494 (opt_join_condition -> .)
    ON              shift and go to state 719
    USING           shift and go to state 721

  ! ON              [ reduce using rule 494 (opt_join_condition -> .) ]

    join_condition                 shift and go to state 720
    opt_join_condition             shift and go to state 722

state 613

    (488) join_clause -> CROSS JOIN .

    IDENT           reduce using rule 488 (join_clause -> CROSS JOIN .)


state 614

    (492) join_clause -> RIGHT OUTER . JOIN

    JOIN            shift and go to state 723


state 615

    (491) join_clause -> RIGHT JOIN .

    IDENT           reduce using rule 491 (join_clause -> RIGHT JOIN .)


state 616

    (487) join_clause -> INNER JOIN .

    IDENT           reduce using rule 487 (join_clause -> INNER JOIN .)


state 617

    (490) join_clause -> LEFT OUTER . JOIN

    JOIN            shift and go to state 724


state 618

    (489) join_clause -> LEFT JOIN .

    IDENT           reduce using rule 489 (join_clause -> LEFT JOIN .)


state 619

    (503) derived_table_list -> esc_table_ref , derived_table_list .

    WHERE           reduce using rule 503 (derived_table_list -> esc_table_ref , derived_table_list .)
    GROUP           reduce using rule 503 (derived_table_list -> esc_table_ref , derived_table_list .)
    HAVING          reduce using rule 503 (derived_table_list -> esc_table_ref , derived_table_list .)
    ORDER           reduce using rule 503 (derived_table_list -> esc_table_ref , derived_table_list .)
    LIMIT           reduce using rule 503 (derived_table_list -> esc_table_ref , derived_table_list .)
    INTO            reduce using rule 503 (derived_table_list -> esc_table_ref , derived_table_list .)
    FOR             reduce using rule 503 (derived_table_list -> esc_table_ref , derived_table_list .)
    LOCK            reduce using rule 503 (derived_table_list -> esc_table_ref , derived_table_list .)
    UNION           reduce using rule 503 (derived_table_list -> esc_table_ref , derived_table_list .)
    DELIM           reduce using rule 503 (derived_table_list -> esc_table_ref , derived_table_list .)
    ;               reduce using rule 503 (derived_table_list -> esc_table_ref , derived_table_list .)
    )               reduce using rule 503 (derived_table_list -> esc_table_ref , derived_table_list .)
    ON              reduce using rule 503 (derived_table_list -> esc_table_ref , derived_table_list .)


state 620

    (472) index_hint_type -> USE .

    INDEX           reduce using rule 472 (index_hint_type -> USE .)
    KEY             reduce using rule 472 (index_hint_type -> USE .)


state 621

    (485) table_factor -> IDENT opt_table_alias opt_key_definition .

    ON              reduce using rule 485 (table_factor -> IDENT opt_table_alias opt_key_definition .)
    USING           reduce using rule 485 (table_factor -> IDENT opt_table_alias opt_key_definition .)
    JOIN            reduce using rule 485 (table_factor -> IDENT opt_table_alias opt_key_definition .)
    INNER           reduce using rule 485 (table_factor -> IDENT opt_table_alias opt_key_definition .)
    CROSS           reduce using rule 485 (table_factor -> IDENT opt_table_alias opt_key_definition .)
    LEFT            reduce using rule 485 (table_factor -> IDENT opt_table_alias opt_key_definition .)
    RIGHT           reduce using rule 485 (table_factor -> IDENT opt_table_alias opt_key_definition .)
    NATURAL         reduce using rule 485 (table_factor -> IDENT opt_table_alias opt_key_definition .)
    ,               reduce using rule 485 (table_factor -> IDENT opt_table_alias opt_key_definition .)
    WHERE           reduce using rule 485 (table_factor -> IDENT opt_table_alias opt_key_definition .)
    GROUP           reduce using rule 485 (table_factor -> IDENT opt_table_alias opt_key_definition .)
    HAVING          reduce using rule 485 (table_factor -> IDENT opt_table_alias opt_key_definition .)
    ORDER           reduce using rule 485 (table_factor -> IDENT opt_table_alias opt_key_definition .)
    LIMIT           reduce using rule 485 (table_factor -> IDENT opt_table_alias opt_key_definition .)
    INTO            reduce using rule 485 (table_factor -> IDENT opt_table_alias opt_key_definition .)
    FOR             reduce using rule 485 (table_factor -> IDENT opt_table_alias opt_key_definition .)
    LOCK            reduce using rule 485 (table_factor -> IDENT opt_table_alias opt_key_definition .)
    UNION           reduce using rule 485 (table_factor -> IDENT opt_table_alias opt_key_definition .)
    DELIM           reduce using rule 485 (table_factor -> IDENT opt_table_alias opt_key_definition .)
    ;               reduce using rule 485 (table_factor -> IDENT opt_table_alias opt_key_definition .)
    )               reduce using rule 485 (table_factor -> IDENT opt_table_alias opt_key_definition .)


state 622

    (479) index_hint_definition -> index_hint_type . check_index_or_key index_hint_clause ( opt_key_usage_list )
    (116) check_index_or_key -> . INDEX
    (117) check_index_or_key -> . KEY

    INDEX           shift and go to state 303
    KEY             shift and go to state 306

    check_index_or_key             shift and go to state 725

state 623

    (471) index_hint_type -> IGNORE .

    INDEX           reduce using rule 471 (index_hint_type -> IGNORE .)
    KEY             reduce using rule 471 (index_hint_type -> IGNORE .)


state 624

    (480) index_hints_list -> index_hint_definition .
    (481) index_hints_list -> index_hint_definition . index_hints_list
    (480) index_hints_list -> . index_hint_definition
    (481) index_hints_list -> . index_hint_definition index_hints_list
    (479) index_hint_definition -> . index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list )
    (470) index_hint_type -> . FORCE
    (471) index_hint_type -> . IGNORE
    (472) index_hint_type -> . USE

    JOIN            reduce using rule 480 (index_hints_list -> index_hint_definition .)
    INNER           reduce using rule 480 (index_hints_list -> index_hint_definition .)
    CROSS           reduce using rule 480 (index_hints_list -> index_hint_definition .)
    LEFT            reduce using rule 480 (index_hints_list -> index_hint_definition .)
    RIGHT           reduce using rule 480 (index_hints_list -> index_hint_definition .)
    NATURAL         reduce using rule 480 (index_hints_list -> index_hint_definition .)
    ,               reduce using rule 480 (index_hints_list -> index_hint_definition .)
    WHERE           reduce using rule 480 (index_hints_list -> index_hint_definition .)
    GROUP           reduce using rule 480 (index_hints_list -> index_hint_definition .)
    HAVING          reduce using rule 480 (index_hints_list -> index_hint_definition .)
    ORDER           reduce using rule 480 (index_hints_list -> index_hint_definition .)
    LIMIT           reduce using rule 480 (index_hints_list -> index_hint_definition .)
    INTO            reduce using rule 480 (index_hints_list -> index_hint_definition .)
    FOR             reduce using rule 480 (index_hints_list -> index_hint_definition .)
    LOCK            reduce using rule 480 (index_hints_list -> index_hint_definition .)
    UNION           reduce using rule 480 (index_hints_list -> index_hint_definition .)
    DELIM           reduce using rule 480 (index_hints_list -> index_hint_definition .)
    ;               reduce using rule 480 (index_hints_list -> index_hint_definition .)
    )               reduce using rule 480 (index_hints_list -> index_hint_definition .)
    ON              reduce using rule 480 (index_hints_list -> index_hint_definition .)
    USING           reduce using rule 480 (index_hints_list -> index_hint_definition .)
    FORCE           shift and go to state 627
    IGNORE          shift and go to state 623
    USE             shift and go to state 620

    index_hint_type                shift and go to state 622
    index_hint_definition          shift and go to state 624
    index_hints_list               shift and go to state 726

state 625

    (483) opt_index_hints_list -> index_hints_list .

    JOIN            reduce using rule 483 (opt_index_hints_list -> index_hints_list .)
    INNER           reduce using rule 483 (opt_index_hints_list -> index_hints_list .)
    CROSS           reduce using rule 483 (opt_index_hints_list -> index_hints_list .)
    LEFT            reduce using rule 483 (opt_index_hints_list -> index_hints_list .)
    RIGHT           reduce using rule 483 (opt_index_hints_list -> index_hints_list .)
    NATURAL         reduce using rule 483 (opt_index_hints_list -> index_hints_list .)
    ,               reduce using rule 483 (opt_index_hints_list -> index_hints_list .)
    WHERE           reduce using rule 483 (opt_index_hints_list -> index_hints_list .)
    GROUP           reduce using rule 483 (opt_index_hints_list -> index_hints_list .)
    HAVING          reduce using rule 483 (opt_index_hints_list -> index_hints_list .)
    ORDER           reduce using rule 483 (opt_index_hints_list -> index_hints_list .)
    LIMIT           reduce using rule 483 (opt_index_hints_list -> index_hints_list .)
    INTO            reduce using rule 483 (opt_index_hints_list -> index_hints_list .)
    FOR             reduce using rule 483 (opt_index_hints_list -> index_hints_list .)
    LOCK            reduce using rule 483 (opt_index_hints_list -> index_hints_list .)
    UNION           reduce using rule 483 (opt_index_hints_list -> index_hints_list .)
    DELIM           reduce using rule 483 (opt_index_hints_list -> index_hints_list .)
    ;               reduce using rule 483 (opt_index_hints_list -> index_hints_list .)
    )               reduce using rule 483 (opt_index_hints_list -> index_hints_list .)
    ON              reduce using rule 483 (opt_index_hints_list -> index_hints_list .)
    USING           reduce using rule 483 (opt_index_hints_list -> index_hints_list .)


state 626

    (484) opt_key_definition -> opt_index_hints_list .

    JOIN            reduce using rule 484 (opt_key_definition -> opt_index_hints_list .)
    INNER           reduce using rule 484 (opt_key_definition -> opt_index_hints_list .)
    CROSS           reduce using rule 484 (opt_key_definition -> opt_index_hints_list .)
    LEFT            reduce using rule 484 (opt_key_definition -> opt_index_hints_list .)
    RIGHT           reduce using rule 484 (opt_key_definition -> opt_index_hints_list .)
    NATURAL         reduce using rule 484 (opt_key_definition -> opt_index_hints_list .)
    ,               reduce using rule 484 (opt_key_definition -> opt_index_hints_list .)
    WHERE           reduce using rule 484 (opt_key_definition -> opt_index_hints_list .)
    GROUP           reduce using rule 484 (opt_key_definition -> opt_index_hints_list .)
    HAVING          reduce using rule 484 (opt_key_definition -> opt_index_hints_list .)
    ORDER           reduce using rule 484 (opt_key_definition -> opt_index_hints_list .)
    LIMIT           reduce using rule 484 (opt_key_definition -> opt_index_hints_list .)
    INTO            reduce using rule 484 (opt_key_definition -> opt_index_hints_list .)
    FOR             reduce using rule 484 (opt_key_definition -> opt_index_hints_list .)
    LOCK            reduce using rule 484 (opt_key_definition -> opt_index_hints_list .)
    UNION           reduce using rule 484 (opt_key_definition -> opt_index_hints_list .)
    DELIM           reduce using rule 484 (opt_key_definition -> opt_index_hints_list .)
    ;               reduce using rule 484 (opt_key_definition -> opt_index_hints_list .)
    )               reduce using rule 484 (opt_key_definition -> opt_index_hints_list .)
    ON              reduce using rule 484 (opt_key_definition -> opt_index_hints_list .)
    USING           reduce using rule 484 (opt_key_definition -> opt_index_hints_list .)


state 627

    (470) index_hint_type -> FORCE .

    INDEX           reduce using rule 470 (index_hint_type -> FORCE .)
    KEY             reduce using rule 470 (index_hint_type -> FORCE .)


state 628

    (465) opt_table_alias -> table_alias IDENT .

    FORCE           reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    IGNORE          reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    USE             reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    JOIN            reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    INNER           reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    CROSS           reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    LEFT            reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    RIGHT           reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    NATURAL         reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    ,               reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    WHERE           reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    GROUP           reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    HAVING          reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    ORDER           reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    LIMIT           reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    INTO            reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    FOR             reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    LOCK            reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    UNION           reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    DELIM           reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    ;               reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    )               reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    ON              reduce using rule 465 (opt_table_alias -> table_alias IDENT .)
    USING           reduce using rule 465 (opt_table_alias -> table_alias IDENT .)


state 629

    (518) select_from -> FROM DUAL where_clause opt_limit_clause .

    FOR             reduce using rule 518 (select_from -> FROM DUAL where_clause opt_limit_clause .)
    LOCK            reduce using rule 518 (select_from -> FROM DUAL where_clause opt_limit_clause .)
    UNION           reduce using rule 518 (select_from -> FROM DUAL where_clause opt_limit_clause .)
    DELIM           reduce using rule 518 (select_from -> FROM DUAL where_clause opt_limit_clause .)
    ;               reduce using rule 518 (select_from -> FROM DUAL where_clause opt_limit_clause .)
    ON              reduce using rule 518 (select_from -> FROM DUAL where_clause opt_limit_clause .)
    )               reduce using rule 518 (select_from -> FROM DUAL where_clause opt_limit_clause .)
    INTO            reduce using rule 518 (select_from -> FROM DUAL where_clause opt_limit_clause .)


state 630

    (506) where_clause -> WHERE expr .
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    LIMIT           reduce using rule 506 (where_clause -> WHERE expr .)
    INTO            reduce using rule 506 (where_clause -> WHERE expr .)
    FOR             reduce using rule 506 (where_clause -> WHERE expr .)
    LOCK            reduce using rule 506 (where_clause -> WHERE expr .)
    UNION           reduce using rule 506 (where_clause -> WHERE expr .)
    DELIM           reduce using rule 506 (where_clause -> WHERE expr .)
    ;               reduce using rule 506 (where_clause -> WHERE expr .)
    )               reduce using rule 506 (where_clause -> WHERE expr .)
    ON              reduce using rule 506 (where_clause -> WHERE expr .)
    GROUP           reduce using rule 506 (where_clause -> WHERE expr .)
    HAVING          reduce using rule 506 (where_clause -> WHERE expr .)
    ORDER           reduce using rule 506 (where_clause -> WHERE expr .)
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 631

    (517) select_from -> FROM join_table_list where_clause group_clause . having_clause opt_order_clause opt_limit_clause
    (515) having_clause -> .
    (516) having_clause -> . HAVING expr

    ORDER           reduce using rule 515 (having_clause -> .)
    LIMIT           reduce using rule 515 (having_clause -> .)
    INTO            reduce using rule 515 (having_clause -> .)
    FOR             reduce using rule 515 (having_clause -> .)
    LOCK            reduce using rule 515 (having_clause -> .)
    UNION           reduce using rule 515 (having_clause -> .)
    DELIM           reduce using rule 515 (having_clause -> .)
    ;               reduce using rule 515 (having_clause -> .)
    )               reduce using rule 515 (having_clause -> .)
    ON              reduce using rule 515 (having_clause -> .)
    HAVING          shift and go to state 728

    having_clause                  shift and go to state 727

state 632

    (514) group_clause -> GROUP . BY group_list olap_opt

    BY              shift and go to state 729


state 633

    (455) select_var_list -> select_var_ident , select_var_list .

    FROM            reduce using rule 455 (select_var_list -> select_var_ident , select_var_list .)
    FOR             reduce using rule 455 (select_var_list -> select_var_ident , select_var_list .)
    LOCK            reduce using rule 455 (select_var_list -> select_var_ident , select_var_list .)
    UNION           reduce using rule 455 (select_var_list -> select_var_ident , select_var_list .)
    DELIM           reduce using rule 455 (select_var_list -> select_var_ident , select_var_list .)
    ;               reduce using rule 455 (select_var_list -> select_var_ident , select_var_list .)
    )               reduce using rule 455 (select_var_list -> select_var_ident , select_var_list .)
    ON              reduce using rule 455 (select_var_list -> select_var_ident , select_var_list .)


state 634

    (444) order_list -> order_item , . order_list
    (443) order_list -> . order_item
    (444) order_list -> . order_item , order_list
    (442) order_item -> . order_ident order_dir
    (438) order_ident -> . expr
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    order_list                     shift and go to state 730
    order_item                     shift and go to state 497
    cast_function                  shift and go to state 125
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 498
    simple_expr                    shift and go to state 131
    order_ident                    shift and go to state 499

state 635

    (440) order_dir -> ASC .

    ,               reduce using rule 440 (order_dir -> ASC .)
    LIMIT           reduce using rule 440 (order_dir -> ASC .)
    FOR             reduce using rule 440 (order_dir -> ASC .)
    LOCK            reduce using rule 440 (order_dir -> ASC .)
    UNION           reduce using rule 440 (order_dir -> ASC .)
    DELIM           reduce using rule 440 (order_dir -> ASC .)
    ;               reduce using rule 440 (order_dir -> ASC .)
    )               reduce using rule 440 (order_dir -> ASC .)
    ON              reduce using rule 440 (order_dir -> ASC .)
    INTO            reduce using rule 440 (order_dir -> ASC .)
    WITH            reduce using rule 440 (order_dir -> ASC .)
    HAVING          reduce using rule 440 (order_dir -> ASC .)
    ORDER           reduce using rule 440 (order_dir -> ASC .)


state 636

    (442) order_item -> order_ident order_dir .

    ,               reduce using rule 442 (order_item -> order_ident order_dir .)
    WITH            reduce using rule 442 (order_item -> order_ident order_dir .)
    HAVING          reduce using rule 442 (order_item -> order_ident order_dir .)
    ORDER           reduce using rule 442 (order_item -> order_ident order_dir .)
    LIMIT           reduce using rule 442 (order_item -> order_ident order_dir .)
    INTO            reduce using rule 442 (order_item -> order_ident order_dir .)
    FOR             reduce using rule 442 (order_item -> order_ident order_dir .)
    LOCK            reduce using rule 442 (order_item -> order_ident order_dir .)
    UNION           reduce using rule 442 (order_item -> order_ident order_dir .)
    DELIM           reduce using rule 442 (order_item -> order_ident order_dir .)
    ;               reduce using rule 442 (order_item -> order_ident order_dir .)
    )               reduce using rule 442 (order_item -> order_ident order_dir .)
    ON              reduce using rule 442 (order_item -> order_ident order_dir .)


state 637

    (441) order_dir -> DESC .

    ,               reduce using rule 441 (order_dir -> DESC .)
    LIMIT           reduce using rule 441 (order_dir -> DESC .)
    FOR             reduce using rule 441 (order_dir -> DESC .)
    LOCK            reduce using rule 441 (order_dir -> DESC .)
    UNION           reduce using rule 441 (order_dir -> DESC .)
    DELIM           reduce using rule 441 (order_dir -> DESC .)
    ;               reduce using rule 441 (order_dir -> DESC .)
    )               reduce using rule 441 (order_dir -> DESC .)
    ON              reduce using rule 441 (order_dir -> DESC .)
    INTO            reduce using rule 441 (order_dir -> DESC .)
    WITH            reduce using rule 441 (order_dir -> DESC .)
    HAVING          reduce using rule 441 (order_dir -> DESC .)
    ORDER           reduce using rule 441 (order_dir -> DESC .)


state 638

    (279) select_lock_type -> LOCK IN SHARE . MODE

    MODE            shift and go to state 731


state 639

    (449) limit_options -> limit_option , . limit_option
    (451) limit_option -> . IDENT
    (452) limit_option -> . NUMBER

    IDENT           shift and go to state 505
    NUMBER          shift and go to state 503

    limit_option                   shift and go to state 732

state 640

    (450) limit_options -> limit_option OFFSET . limit_option
    (451) limit_option -> . IDENT
    (452) limit_option -> . NUMBER

    IDENT           shift and go to state 505
    NUMBER          shift and go to state 503

    limit_option                   shift and go to state 733

state 641

    (73) cast_type -> TIME .

    )               reduce using rule 73 (cast_type -> TIME .)


state 642

    (74) cast_function -> CAST ( expr AS cast_type . )

    )               shift and go to state 734


state 643

    (67) cast_type -> DECIMAL . bidimensional_limit_opt
    (142) bidimensional_limit_opt -> .
    (143) bidimensional_limit_opt -> . bidimensional_limit
    (144) bidimensional_limit -> . ( NUMBER , NUMBER )

    )               reduce using rule 142 (bidimensional_limit_opt -> .)
    (               shift and go to state 666

    bidimensional_limit            shift and go to state 667
    bidimensional_limit_opt        shift and go to state 735

state 644

    (69) signed_or_unsigned -> UNSIGNED .

    INTEGER         reduce using rule 69 (signed_or_unsigned -> UNSIGNED .)
    )               reduce using rule 69 (signed_or_unsigned -> UNSIGNED .)


state 645

    (66) cast_type -> DATETIME .

    )               reduce using rule 66 (cast_type -> DATETIME .)


state 646

    (72) cast_type -> signed_or_unsigned . ignore_integer
    (70) ignore_integer -> .
    (71) ignore_integer -> . INTEGER

    )               reduce using rule 70 (ignore_integer -> .)
    INTEGER         shift and go to state 736

    ignore_integer                 shift and go to state 737

state 647

    (68) signed_or_unsigned -> SIGNED .

    INTEGER         reduce using rule 68 (signed_or_unsigned -> SIGNED .)
    )               reduce using rule 68 (signed_or_unsigned -> SIGNED .)


state 648

    (65) cast_type -> DATE .

    )               reduce using rule 65 (cast_type -> DATE .)


state 649

    (64) cast_type -> character_statement .

    )               reduce using rule 64 (cast_type -> character_statement .)


state 650

    (23) boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery . )

    )               shift and go to state 738


state 651

    (37) predicate -> bit_expr not_opt LIKE simple_expr escape_opt .

    IS              reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    NULL_SAFE       reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    EQ              reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    GE              reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    GT              reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    LE              reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    LT              reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    NE              reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    OR              reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    AND             reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    XOR             reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    AS              reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    IDENT           reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    ,               reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    INTO            reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    FROM            reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    ORDER           reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    FOR             reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    LOCK            reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    LIMIT           reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    UNION           reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    DELIM           reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    ;               reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    )               reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    ON              reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    USING           reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    ASC             reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    DESC            reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    WHERE           reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    GROUP           reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    HAVING          reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    JOIN            reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    INNER           reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    CROSS           reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    LEFT            reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    RIGHT           reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    NATURAL         reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    WITH            reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    DO              reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    WHEN            reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    THEN            reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)
    END             reduce using rule 37 (predicate -> bit_expr not_opt LIKE simple_expr escape_opt .)


state 652

    (7) escape_opt -> ESCAPE . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    sum_function                   shift and go to state 132
    bit_function                   shift and go to state 153
    min_function                   shift and go to state 152
    cast_function                  shift and go to state 125
    convert_function               shift and go to state 140
    function_call                  shift and go to state 128
    simple_expr                    shift and go to state 739
    average_function               shift and go to state 130
    literal                        shift and go to state 138
    other_function                 shift and go to state 154
    count_function                 shift and go to state 139
    max_function                   shift and go to state 149

state 653

    (35) predicate -> bit_expr not_opt BETWEEN bit_expr AND . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 740
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 654

    (34) predicate -> bit_expr not_opt IN ( expr_list . )

    )               shift and go to state 741


state 655

    (33) predicate -> bit_expr not_opt IN ( subquery . )

    )               shift and go to state 742


state 656

    (86) max_function -> MAX ( opt_distinct expr ) .

    SOUNDS          reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    BITWISE_OR      reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    BITWISE_AND     reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    SHL             reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    SHR             reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    PLUS            reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    MINUS           reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    TIMES           reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    DIV             reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    MOD             reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    BITWISE_XOR     reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    NOT             reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    LOGICAL_NOT     reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    IN              reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    BETWEEN         reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    LIKE            reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    REGEXP          reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    IS              reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    NULL_SAFE       reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    EQ              reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    GE              reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    GT              reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    LE              reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    LT              reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    NE              reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    OR              reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    AND             reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    XOR             reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    ORDER           reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    LIMIT           reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    INTO            reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    FOR             reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    LOCK            reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    UNION           reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    DELIM           reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    ;               reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    )               reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    ON              reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    AS              reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    IDENT           reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    ,               reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    FROM            reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    USING           reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    ASC             reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    DESC            reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    WHERE           reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    GROUP           reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    HAVING          reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    JOIN            reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    INNER           reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    CROSS           reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    LEFT            reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    RIGHT           reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    NATURAL         reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    WITH            reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    DO              reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    WHEN            reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    THEN            reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    END             reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)
    ESCAPE          reduce using rule 86 (max_function -> MAX ( opt_distinct expr ) .)


state 657

    (87) min_function -> MIN ( opt_distinct expr ) .

    SOUNDS          reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    BITWISE_OR      reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    BITWISE_AND     reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    SHL             reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    SHR             reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    PLUS            reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    MINUS           reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    TIMES           reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    DIV             reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    MOD             reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    BITWISE_XOR     reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    NOT             reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    LOGICAL_NOT     reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    IN              reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    BETWEEN         reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    LIKE            reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    REGEXP          reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    IS              reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    NULL_SAFE       reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    EQ              reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    GE              reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    GT              reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    LE              reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    LT              reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    NE              reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    OR              reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    AND             reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    XOR             reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    ,               reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    DELIM           reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    ;               reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    AS              reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    )               reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    ASC             reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    DESC            reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    WITH            reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    HAVING          reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    ORDER           reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    LIMIT           reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    INTO            reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    FOR             reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    LOCK            reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    UNION           reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    ON              reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    IDENT           reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    FROM            reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    USING           reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    WHERE           reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    GROUP           reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    JOIN            reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    INNER           reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    CROSS           reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    LEFT            reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    RIGHT           reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    NATURAL         reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    DO              reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    WHEN            reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    THEN            reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    END             reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)
    ESCAPE          reduce using rule 87 (min_function -> MIN ( opt_distinct expr ) .)


state 658

    (77) average_function -> AVG ( opt_distinct expr ) .

    AND             reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    BITWISE_OR      reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    BITWISE_AND     reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    SHL             reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    SHR             reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    PLUS            reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    MINUS           reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    TIMES           reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    DIV             reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    MOD             reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    BITWISE_XOR     reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    SOUNDS          reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    NOT             reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    LOGICAL_NOT     reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    IN              reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    BETWEEN         reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    LIKE            reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    REGEXP          reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    IS              reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    NULL_SAFE       reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    EQ              reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    GE              reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    GT              reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    LE              reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    LT              reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    NE              reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    )               reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    OR              reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    XOR             reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    AS              reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    IDENT           reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    ,               reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    FROM            reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    LIMIT           reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    UNION           reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    DELIM           reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    ;               reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    ON              reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    INTO            reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    ORDER           reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    FOR             reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    LOCK            reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    USING           reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    ASC             reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    DESC            reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    WHERE           reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    GROUP           reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    HAVING          reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    JOIN            reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    INNER           reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    CROSS           reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    LEFT            reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    RIGHT           reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    NATURAL         reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    WITH            reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    DO              reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    WHEN            reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    THEN            reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    END             reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)
    ESCAPE          reduce using rule 77 (average_function -> AVG ( opt_distinct expr ) .)


state 659

    (295) select_paren -> ( select_paren . )

    )               shift and go to state 743


state 660

    (297) union_select_init -> ( select_paren ) . union_opt
    (286) union_opt -> .
    (287) union_opt -> . union_list
    (293) union_opt -> . union_order_or_limit
    (298) union_list -> . UNION union_option union_select_init
    (292) union_order_or_limit -> . order_or_limit
    (290) order_or_limit -> . order_clause opt_limit_clause_init
    (291) order_or_limit -> . limit_clause
    (437) order_clause -> . ORDER BY order_list
    (447) limit_clause -> . LIMIT limit_options

    DELIM           reduce using rule 286 (union_opt -> .)
    ;               reduce using rule 286 (union_opt -> .)
    )               reduce using rule 286 (union_opt -> .)
    ON              reduce using rule 286 (union_opt -> .)
    UNION           shift and go to state 162
    ORDER           shift and go to state 228
    LIMIT           shift and go to state 372

    union_list                     shift and go to state 597
    union_opt                      shift and go to state 744
    order_clause                   shift and go to state 599
    union_order_or_limit           shift and go to state 600
    order_or_limit                 shift and go to state 601
    limit_clause                   shift and go to state 602

state 661

    (294) select_paren -> SELECT select_init2 .

    )               reduce using rule 294 (select_paren -> SELECT select_init2 .)


state 662

    (141) limit -> ( . NUMBER )

    NUMBER          shift and go to state 745


state 663

    (161) integer_statement -> integer_type limit_opt . unsigned_opt
    (159) unsigned_opt -> .
    (160) unsigned_opt -> . UNSIGNED

    NULL            reduce using rule 159 (unsigned_opt -> .)
    NOT             reduce using rule 159 (unsigned_opt -> .)
    DEFAULT         reduce using rule 159 (unsigned_opt -> .)
    AUTO_INCREMENT  reduce using rule 159 (unsigned_opt -> .)
    UNIQUE          reduce using rule 159 (unsigned_opt -> .)
    KEY             reduce using rule 159 (unsigned_opt -> .)
    PRIMARY         reduce using rule 159 (unsigned_opt -> .)
    CHARACTER       reduce using rule 159 (unsigned_opt -> .)
    COLLATE         reduce using rule 159 (unsigned_opt -> .)
    FIRST           reduce using rule 159 (unsigned_opt -> .)
    AFTER           reduce using rule 159 (unsigned_opt -> .)
    ,               reduce using rule 159 (unsigned_opt -> .)
    DELIM           reduce using rule 159 (unsigned_opt -> .)
    ;               reduce using rule 159 (unsigned_opt -> .)
    )               reduce using rule 159 (unsigned_opt -> .)
    UNSIGNED        shift and go to state 746

    unsigned_opt                   shift and go to state 747

state 664

    (140) limit_opt -> limit .

    NULL            reduce using rule 140 (limit_opt -> limit .)
    NOT             reduce using rule 140 (limit_opt -> limit .)
    DEFAULT         reduce using rule 140 (limit_opt -> limit .)
    AUTO_INCREMENT  reduce using rule 140 (limit_opt -> limit .)
    UNIQUE          reduce using rule 140 (limit_opt -> limit .)
    KEY             reduce using rule 140 (limit_opt -> limit .)
    PRIMARY         reduce using rule 140 (limit_opt -> limit .)
    CHARACTER       reduce using rule 140 (limit_opt -> limit .)
    COLLATE         reduce using rule 140 (limit_opt -> limit .)
    FIRST           reduce using rule 140 (limit_opt -> limit .)
    AFTER           reduce using rule 140 (limit_opt -> limit .)
    ,               reduce using rule 140 (limit_opt -> limit .)
    DELIM           reduce using rule 140 (limit_opt -> limit .)
    ;               reduce using rule 140 (limit_opt -> limit .)
    )               reduce using rule 140 (limit_opt -> limit .)
    UNSIGNED        reduce using rule 140 (limit_opt -> limit .)


state 665

    (166) string_statement -> VARCHAR limit .

    NULL            reduce using rule 166 (string_statement -> VARCHAR limit .)
    NOT             reduce using rule 166 (string_statement -> VARCHAR limit .)
    DEFAULT         reduce using rule 166 (string_statement -> VARCHAR limit .)
    AUTO_INCREMENT  reduce using rule 166 (string_statement -> VARCHAR limit .)
    UNIQUE          reduce using rule 166 (string_statement -> VARCHAR limit .)
    KEY             reduce using rule 166 (string_statement -> VARCHAR limit .)
    PRIMARY         reduce using rule 166 (string_statement -> VARCHAR limit .)
    CHARACTER       reduce using rule 166 (string_statement -> VARCHAR limit .)
    COLLATE         reduce using rule 166 (string_statement -> VARCHAR limit .)
    FIRST           reduce using rule 166 (string_statement -> VARCHAR limit .)
    AFTER           reduce using rule 166 (string_statement -> VARCHAR limit .)
    ,               reduce using rule 166 (string_statement -> VARCHAR limit .)
    DELIM           reduce using rule 166 (string_statement -> VARCHAR limit .)
    ;               reduce using rule 166 (string_statement -> VARCHAR limit .)
    )               reduce using rule 166 (string_statement -> VARCHAR limit .)


state 666

    (144) bidimensional_limit -> ( . NUMBER , NUMBER )

    NUMBER          shift and go to state 748


state 667

    (143) bidimensional_limit_opt -> bidimensional_limit .

    )               reduce using rule 143 (bidimensional_limit_opt -> bidimensional_limit .)
    UNSIGNED        reduce using rule 143 (bidimensional_limit_opt -> bidimensional_limit .)
    NULL            reduce using rule 143 (bidimensional_limit_opt -> bidimensional_limit .)
    NOT             reduce using rule 143 (bidimensional_limit_opt -> bidimensional_limit .)
    DEFAULT         reduce using rule 143 (bidimensional_limit_opt -> bidimensional_limit .)
    AUTO_INCREMENT  reduce using rule 143 (bidimensional_limit_opt -> bidimensional_limit .)
    UNIQUE          reduce using rule 143 (bidimensional_limit_opt -> bidimensional_limit .)
    KEY             reduce using rule 143 (bidimensional_limit_opt -> bidimensional_limit .)
    PRIMARY         reduce using rule 143 (bidimensional_limit_opt -> bidimensional_limit .)
    CHARACTER       reduce using rule 143 (bidimensional_limit_opt -> bidimensional_limit .)
    COLLATE         reduce using rule 143 (bidimensional_limit_opt -> bidimensional_limit .)
    FIRST           reduce using rule 143 (bidimensional_limit_opt -> bidimensional_limit .)
    AFTER           reduce using rule 143 (bidimensional_limit_opt -> bidimensional_limit .)
    ,               reduce using rule 143 (bidimensional_limit_opt -> bidimensional_limit .)
    DELIM           reduce using rule 143 (bidimensional_limit_opt -> bidimensional_limit .)
    ;               reduce using rule 143 (bidimensional_limit_opt -> bidimensional_limit .)


state 668

    (162) double_precision_statement -> double_precision_type bidimensional_limit_opt . unsigned_opt
    (159) unsigned_opt -> .
    (160) unsigned_opt -> . UNSIGNED

    NULL            reduce using rule 159 (unsigned_opt -> .)
    NOT             reduce using rule 159 (unsigned_opt -> .)
    DEFAULT         reduce using rule 159 (unsigned_opt -> .)
    AUTO_INCREMENT  reduce using rule 159 (unsigned_opt -> .)
    UNIQUE          reduce using rule 159 (unsigned_opt -> .)
    KEY             reduce using rule 159 (unsigned_opt -> .)
    PRIMARY         reduce using rule 159 (unsigned_opt -> .)
    CHARACTER       reduce using rule 159 (unsigned_opt -> .)
    COLLATE         reduce using rule 159 (unsigned_opt -> .)
    FIRST           reduce using rule 159 (unsigned_opt -> .)
    AFTER           reduce using rule 159 (unsigned_opt -> .)
    ,               reduce using rule 159 (unsigned_opt -> .)
    DELIM           reduce using rule 159 (unsigned_opt -> .)
    ;               reduce using rule 159 (unsigned_opt -> .)
    )               reduce using rule 159 (unsigned_opt -> .)
    UNSIGNED        shift and go to state 746

    unsigned_opt                   shift and go to state 749

state 669

    (225) position -> AFTER . IDENT

    IDENT           shift and go to state 750


state 670

    (231) change_column -> MODIFY ignore_column column_name column_statement position_opt .

    ,               reduce using rule 231 (change_column -> MODIFY ignore_column column_name column_statement position_opt .)
    DELIM           reduce using rule 231 (change_column -> MODIFY ignore_column column_name column_statement position_opt .)
    ;               reduce using rule 231 (change_column -> MODIFY ignore_column column_name column_statement position_opt .)


state 671

    (223) position_opt -> position .

    ,               reduce using rule 223 (position_opt -> position .)
    DELIM           reduce using rule 223 (position_opt -> position .)
    ;               reduce using rule 223 (position_opt -> position .)


state 672

    (224) position -> FIRST .

    ,               reduce using rule 224 (position -> FIRST .)
    DELIM           reduce using rule 224 (position -> FIRST .)
    ;               reduce using rule 224 (position -> FIRST .)


state 673

    (153) default -> DEFAULT . value
    (154) value -> . NULL
    (155) value -> . STRING
    (156) value -> . NUMBER
    (157) value -> . FLOAT_LIT
    (158) value -> . IDENT

    NULL            shift and go to state 756
    STRING          shift and go to state 752
    NUMBER          shift and go to state 755
    FLOAT_LIT       shift and go to state 753
    IDENT           shift and go to state 751

    value                          shift and go to state 754

state 674

    (145) charset_statement -> CHARACTER . SET IDENT

    SET             shift and go to state 757


state 675

    (147) null -> NULL .

    NULL            reduce using rule 147 (null -> NULL .)
    NOT             reduce using rule 147 (null -> NULL .)
    DEFAULT         reduce using rule 147 (null -> NULL .)
    AUTO_INCREMENT  reduce using rule 147 (null -> NULL .)
    UNIQUE          reduce using rule 147 (null -> NULL .)
    KEY             reduce using rule 147 (null -> NULL .)
    PRIMARY         reduce using rule 147 (null -> NULL .)
    CHARACTER       reduce using rule 147 (null -> NULL .)
    COLLATE         reduce using rule 147 (null -> NULL .)
    FIRST           reduce using rule 147 (null -> NULL .)
    AFTER           reduce using rule 147 (null -> NULL .)
    ,               reduce using rule 147 (null -> NULL .)
    DELIM           reduce using rule 147 (null -> NULL .)
    ;               reduce using rule 147 (null -> NULL .)
    )               reduce using rule 147 (null -> NULL .)


state 676

    (192) column_option -> collate_statement .

    NULL            reduce using rule 192 (column_option -> collate_statement .)
    NOT             reduce using rule 192 (column_option -> collate_statement .)
    DEFAULT         reduce using rule 192 (column_option -> collate_statement .)
    AUTO_INCREMENT  reduce using rule 192 (column_option -> collate_statement .)
    UNIQUE          reduce using rule 192 (column_option -> collate_statement .)
    KEY             reduce using rule 192 (column_option -> collate_statement .)
    PRIMARY         reduce using rule 192 (column_option -> collate_statement .)
    CHARACTER       reduce using rule 192 (column_option -> collate_statement .)
    COLLATE         reduce using rule 192 (column_option -> collate_statement .)
    FIRST           reduce using rule 192 (column_option -> collate_statement .)
    AFTER           reduce using rule 192 (column_option -> collate_statement .)
    ,               reduce using rule 192 (column_option -> collate_statement .)
    DELIM           reduce using rule 192 (column_option -> collate_statement .)
    ;               reduce using rule 192 (column_option -> collate_statement .)
    )               reduce using rule 192 (column_option -> collate_statement .)


state 677

    (152) auto_increment -> AUTO_INCREMENT .

    NULL            reduce using rule 152 (auto_increment -> AUTO_INCREMENT .)
    NOT             reduce using rule 152 (auto_increment -> AUTO_INCREMENT .)
    DEFAULT         reduce using rule 152 (auto_increment -> AUTO_INCREMENT .)
    AUTO_INCREMENT  reduce using rule 152 (auto_increment -> AUTO_INCREMENT .)
    UNIQUE          reduce using rule 152 (auto_increment -> AUTO_INCREMENT .)
    KEY             reduce using rule 152 (auto_increment -> AUTO_INCREMENT .)
    PRIMARY         reduce using rule 152 (auto_increment -> AUTO_INCREMENT .)
    CHARACTER       reduce using rule 152 (auto_increment -> AUTO_INCREMENT .)
    COLLATE         reduce using rule 152 (auto_increment -> AUTO_INCREMENT .)
    FIRST           reduce using rule 152 (auto_increment -> AUTO_INCREMENT .)
    AFTER           reduce using rule 152 (auto_increment -> AUTO_INCREMENT .)
    ,               reduce using rule 152 (auto_increment -> AUTO_INCREMENT .)
    DELIM           reduce using rule 152 (auto_increment -> AUTO_INCREMENT .)
    ;               reduce using rule 152 (auto_increment -> AUTO_INCREMENT .)
    )               reduce using rule 152 (auto_increment -> AUTO_INCREMENT .)


state 678

    (191) column_option -> charset_statement .

    NULL            reduce using rule 191 (column_option -> charset_statement .)
    NOT             reduce using rule 191 (column_option -> charset_statement .)
    DEFAULT         reduce using rule 191 (column_option -> charset_statement .)
    AUTO_INCREMENT  reduce using rule 191 (column_option -> charset_statement .)
    UNIQUE          reduce using rule 191 (column_option -> charset_statement .)
    KEY             reduce using rule 191 (column_option -> charset_statement .)
    PRIMARY         reduce using rule 191 (column_option -> charset_statement .)
    CHARACTER       reduce using rule 191 (column_option -> charset_statement .)
    COLLATE         reduce using rule 191 (column_option -> charset_statement .)
    FIRST           reduce using rule 191 (column_option -> charset_statement .)
    AFTER           reduce using rule 191 (column_option -> charset_statement .)
    ,               reduce using rule 191 (column_option -> charset_statement .)
    DELIM           reduce using rule 191 (column_option -> charset_statement .)
    ;               reduce using rule 191 (column_option -> charset_statement .)
    )               reduce using rule 191 (column_option -> charset_statement .)


state 679

    (194) column_options -> column_option . column_options
    (193) column_options -> .
    (194) column_options -> . column_option column_options
    (187) column_option -> . null
    (188) column_option -> . default
    (189) column_option -> . auto_increment
    (190) column_option -> . key
    (191) column_option -> . charset_statement
    (192) column_option -> . collate_statement
    (147) null -> . NULL
    (148) null -> . NOT NULL
    (153) default -> . DEFAULT value
    (152) auto_increment -> . AUTO_INCREMENT
    (149) key -> . UNIQUE ignore_key
    (150) key -> . KEY
    (151) key -> . PRIMARY KEY
    (145) charset_statement -> . CHARACTER SET IDENT
    (146) collate_statement -> . COLLATE IDENT

    FIRST           reduce using rule 193 (column_options -> .)
    AFTER           reduce using rule 193 (column_options -> .)
    ,               reduce using rule 193 (column_options -> .)
    DELIM           reduce using rule 193 (column_options -> .)
    ;               reduce using rule 193 (column_options -> .)
    )               reduce using rule 193 (column_options -> .)
    NULL            shift and go to state 675
    NOT             shift and go to state 689
    DEFAULT         shift and go to state 673
    AUTO_INCREMENT  shift and go to state 677
    UNIQUE          shift and go to state 685
    KEY             shift and go to state 688
    PRIMARY         shift and go to state 687
    CHARACTER       shift and go to state 674
    COLLATE         shift and go to state 683

    collate_statement              shift and go to state 676
    column_options                 shift and go to state 758
    default                        shift and go to state 686
    auto_increment                 shift and go to state 681
    charset_statement              shift and go to state 678
    column_option                  shift and go to state 679
    key                            shift and go to state 684
    null                           shift and go to state 682

state 680

    (195) column_statement -> data_type column_options .

    FIRST           reduce using rule 195 (column_statement -> data_type column_options .)
    AFTER           reduce using rule 195 (column_statement -> data_type column_options .)
    ,               reduce using rule 195 (column_statement -> data_type column_options .)
    DELIM           reduce using rule 195 (column_statement -> data_type column_options .)
    ;               reduce using rule 195 (column_statement -> data_type column_options .)
    )               reduce using rule 195 (column_statement -> data_type column_options .)


state 681

    (189) column_option -> auto_increment .

    NULL            reduce using rule 189 (column_option -> auto_increment .)
    NOT             reduce using rule 189 (column_option -> auto_increment .)
    DEFAULT         reduce using rule 189 (column_option -> auto_increment .)
    AUTO_INCREMENT  reduce using rule 189 (column_option -> auto_increment .)
    UNIQUE          reduce using rule 189 (column_option -> auto_increment .)
    KEY             reduce using rule 189 (column_option -> auto_increment .)
    PRIMARY         reduce using rule 189 (column_option -> auto_increment .)
    CHARACTER       reduce using rule 189 (column_option -> auto_increment .)
    COLLATE         reduce using rule 189 (column_option -> auto_increment .)
    FIRST           reduce using rule 189 (column_option -> auto_increment .)
    AFTER           reduce using rule 189 (column_option -> auto_increment .)
    ,               reduce using rule 189 (column_option -> auto_increment .)
    DELIM           reduce using rule 189 (column_option -> auto_increment .)
    ;               reduce using rule 189 (column_option -> auto_increment .)
    )               reduce using rule 189 (column_option -> auto_increment .)


state 682

    (187) column_option -> null .

    NULL            reduce using rule 187 (column_option -> null .)
    NOT             reduce using rule 187 (column_option -> null .)
    DEFAULT         reduce using rule 187 (column_option -> null .)
    AUTO_INCREMENT  reduce using rule 187 (column_option -> null .)
    UNIQUE          reduce using rule 187 (column_option -> null .)
    KEY             reduce using rule 187 (column_option -> null .)
    PRIMARY         reduce using rule 187 (column_option -> null .)
    CHARACTER       reduce using rule 187 (column_option -> null .)
    COLLATE         reduce using rule 187 (column_option -> null .)
    FIRST           reduce using rule 187 (column_option -> null .)
    AFTER           reduce using rule 187 (column_option -> null .)
    ,               reduce using rule 187 (column_option -> null .)
    DELIM           reduce using rule 187 (column_option -> null .)
    ;               reduce using rule 187 (column_option -> null .)
    )               reduce using rule 187 (column_option -> null .)


state 683

    (146) collate_statement -> COLLATE . IDENT

    IDENT           shift and go to state 759


state 684

    (190) column_option -> key .

    NULL            reduce using rule 190 (column_option -> key .)
    NOT             reduce using rule 190 (column_option -> key .)
    DEFAULT         reduce using rule 190 (column_option -> key .)
    AUTO_INCREMENT  reduce using rule 190 (column_option -> key .)
    UNIQUE          reduce using rule 190 (column_option -> key .)
    KEY             reduce using rule 190 (column_option -> key .)
    PRIMARY         reduce using rule 190 (column_option -> key .)
    CHARACTER       reduce using rule 190 (column_option -> key .)
    COLLATE         reduce using rule 190 (column_option -> key .)
    FIRST           reduce using rule 190 (column_option -> key .)
    AFTER           reduce using rule 190 (column_option -> key .)
    ,               reduce using rule 190 (column_option -> key .)
    DELIM           reduce using rule 190 (column_option -> key .)
    ;               reduce using rule 190 (column_option -> key .)
    )               reduce using rule 190 (column_option -> key .)


state 685

    (149) key -> UNIQUE . ignore_key
    (107) ignore_key -> . KEY
    (108) ignore_key -> .

  ! shift/reduce conflict for KEY resolved as shift
    KEY             shift and go to state 761
    NULL            reduce using rule 108 (ignore_key -> .)
    NOT             reduce using rule 108 (ignore_key -> .)
    DEFAULT         reduce using rule 108 (ignore_key -> .)
    AUTO_INCREMENT  reduce using rule 108 (ignore_key -> .)
    UNIQUE          reduce using rule 108 (ignore_key -> .)
    PRIMARY         reduce using rule 108 (ignore_key -> .)
    CHARACTER       reduce using rule 108 (ignore_key -> .)
    COLLATE         reduce using rule 108 (ignore_key -> .)
    FIRST           reduce using rule 108 (ignore_key -> .)
    AFTER           reduce using rule 108 (ignore_key -> .)
    ,               reduce using rule 108 (ignore_key -> .)
    DELIM           reduce using rule 108 (ignore_key -> .)
    ;               reduce using rule 108 (ignore_key -> .)
    )               reduce using rule 108 (ignore_key -> .)

  ! KEY             [ reduce using rule 108 (ignore_key -> .) ]

    ignore_key                     shift and go to state 760

state 686

    (188) column_option -> default .

    NULL            reduce using rule 188 (column_option -> default .)
    NOT             reduce using rule 188 (column_option -> default .)
    DEFAULT         reduce using rule 188 (column_option -> default .)
    AUTO_INCREMENT  reduce using rule 188 (column_option -> default .)
    UNIQUE          reduce using rule 188 (column_option -> default .)
    KEY             reduce using rule 188 (column_option -> default .)
    PRIMARY         reduce using rule 188 (column_option -> default .)
    CHARACTER       reduce using rule 188 (column_option -> default .)
    COLLATE         reduce using rule 188 (column_option -> default .)
    FIRST           reduce using rule 188 (column_option -> default .)
    AFTER           reduce using rule 188 (column_option -> default .)
    ,               reduce using rule 188 (column_option -> default .)
    DELIM           reduce using rule 188 (column_option -> default .)
    ;               reduce using rule 188 (column_option -> default .)
    )               reduce using rule 188 (column_option -> default .)


state 687

    (151) key -> PRIMARY . KEY

    KEY             shift and go to state 762


state 688

    (150) key -> KEY .

    NULL            reduce using rule 150 (key -> KEY .)
    NOT             reduce using rule 150 (key -> KEY .)
    DEFAULT         reduce using rule 150 (key -> KEY .)
    AUTO_INCREMENT  reduce using rule 150 (key -> KEY .)
    UNIQUE          reduce using rule 150 (key -> KEY .)
    KEY             reduce using rule 150 (key -> KEY .)
    PRIMARY         reduce using rule 150 (key -> KEY .)
    CHARACTER       reduce using rule 150 (key -> KEY .)
    COLLATE         reduce using rule 150 (key -> KEY .)
    FIRST           reduce using rule 150 (key -> KEY .)
    AFTER           reduce using rule 150 (key -> KEY .)
    ,               reduce using rule 150 (key -> KEY .)
    DELIM           reduce using rule 150 (key -> KEY .)
    ;               reduce using rule 150 (key -> KEY .)
    )               reduce using rule 150 (key -> KEY .)


state 689

    (148) null -> NOT . NULL

    NULL            shift and go to state 763


state 690

    (165) character_statement -> check_char_or_character limit_opt .

    )               reduce using rule 165 (character_statement -> check_char_or_character limit_opt .)
    NULL            reduce using rule 165 (character_statement -> check_char_or_character limit_opt .)
    NOT             reduce using rule 165 (character_statement -> check_char_or_character limit_opt .)
    DEFAULT         reduce using rule 165 (character_statement -> check_char_or_character limit_opt .)
    AUTO_INCREMENT  reduce using rule 165 (character_statement -> check_char_or_character limit_opt .)
    UNIQUE          reduce using rule 165 (character_statement -> check_char_or_character limit_opt .)
    KEY             reduce using rule 165 (character_statement -> check_char_or_character limit_opt .)
    PRIMARY         reduce using rule 165 (character_statement -> check_char_or_character limit_opt .)
    CHARACTER       reduce using rule 165 (character_statement -> check_char_or_character limit_opt .)
    COLLATE         reduce using rule 165 (character_statement -> check_char_or_character limit_opt .)
    FIRST           reduce using rule 165 (character_statement -> check_char_or_character limit_opt .)
    AFTER           reduce using rule 165 (character_statement -> check_char_or_character limit_opt .)
    ,               reduce using rule 165 (character_statement -> check_char_or_character limit_opt .)
    DELIM           reduce using rule 165 (character_statement -> check_char_or_character limit_opt .)
    ;               reduce using rule 165 (character_statement -> check_char_or_character limit_opt .)


state 691

    (232) change_default -> ALTER ignore_column IDENT SET DEFAULT . literal
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT

    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129

    literal                        shift and go to state 764

state 692

    (233) change_default -> ALTER ignore_column IDENT DROP DEFAULT .

    ,               reduce using rule 233 (change_default -> ALTER ignore_column IDENT DROP DEFAULT .)
    DELIM           reduce using rule 233 (change_default -> ALTER ignore_column IDENT DROP DEFAULT .)
    ;               reduce using rule 233 (change_default -> ALTER ignore_column IDENT DROP DEFAULT .)


state 693

    (230) change_column -> CHANGE ignore_column column_name column_name column_statement . position_opt
    (222) position_opt -> .
    (223) position_opt -> . position
    (224) position -> . FIRST
    (225) position -> . AFTER IDENT

    ,               reduce using rule 222 (position_opt -> .)
    DELIM           reduce using rule 222 (position_opt -> .)
    ;               reduce using rule 222 (position_opt -> .)
    FIRST           shift and go to state 672
    AFTER           shift and go to state 669

    position                       shift and go to state 671
    position_opt                   shift and go to state 765

state 694

    (227) add_index -> ADD check_index_or_key index_name_opt ( column_names . )

    )               shift and go to state 766


state 695

    (121) column_names -> column_name .
    (122) column_names -> column_name . , column_names

    )               reduce using rule 121 (column_names -> column_name .)
    ,               shift and go to state 767


state 696

    (229) add_primary_key -> ADD constraint_opt PRIMARY KEY ( . column_names )
    (121) column_names -> . column_name
    (122) column_names -> . column_name , column_names
    (120) column_name -> . IDENT

    IDENT           shift and go to state 428

    column_names                   shift and go to state 768
    column_name                    shift and go to state 695

state 697

    (228) add_index -> ADD constraint_opt UNIQUE ignore_index_or_key index_name_opt . ( column_names )

    (               shift and go to state 769


state 698

    (226) add_column -> ADD ignore_column column_name column_statement position_opt .

    ,               reduce using rule 226 (add_column -> ADD ignore_column column_name column_statement position_opt .)
    DELIM           reduce using rule 226 (add_column -> ADD ignore_column column_name column_statement position_opt .)
    ;               reduce using rule 226 (add_column -> ADD ignore_column column_name column_statement position_opt .)


state 699

    (262) opt_insert_update -> ON DUPLICATE KEY . UPDATE insert_update_list

    UPDATE          shift and go to state 770


state 700

    (124) index_statement -> INDEX IDENT ( . column_names )
    (121) column_names -> . column_name
    (122) column_names -> . column_name , column_names
    (120) column_name -> . IDENT

    IDENT           shift and go to state 428

    column_names                   shift and go to state 771
    column_name                    shift and go to state 695

state 701

    (123) primary_key_statement -> constraint_opt PRIMARY KEY . ( column_names )

    (               shift and go to state 772


state 702

    (128) unique_statement -> constraint_opt UNIQUE ignore_index_or_key . index_name_opt ( column_names )
    (126) index_name_opt -> .
    (127) index_name_opt -> . IDENT

    (               reduce using rule 126 (index_name_opt -> .)
    IDENT           shift and go to state 438

    index_name_opt                 shift and go to state 773

state 703

    (201) create_statements -> create_statement , create_statements .

    )               reduce using rule 201 (create_statements -> create_statement , create_statements .)


state 704

    (202) table_option -> ENGINE . ignore_eq IDENT
    (102) ignore_eq -> . EQ
    (103) ignore_eq -> .

    EQ              shift and go to state 774
    IDENT           reduce using rule 103 (ignore_eq -> .)

    ignore_eq                      shift and go to state 775

state 705

    (209) table_options -> table_option .
    (210) table_options -> table_option . ignore_comma table_options
    (100) ignore_comma -> . ,
    (101) ignore_comma -> .

    DELIM           reduce using rule 209 (table_options -> table_option .)
    ;               reduce using rule 209 (table_options -> table_option .)
    ,               shift and go to state 777
    ENGINE          reduce using rule 101 (ignore_comma -> .)
    AUTO_INCREMENT  reduce using rule 101 (ignore_comma -> .)
    DEFAULT         reduce using rule 101 (ignore_comma -> .)
    CHARACTER       reduce using rule 101 (ignore_comma -> .)
    CHARSET         reduce using rule 101 (ignore_comma -> .)
    COLLATE         reduce using rule 101 (ignore_comma -> .)

    ignore_comma                   shift and go to state 776

state 706

    (213) create_table -> CREATE TABLE if_not_exists IDENT ( create_statements ) table_options_opt .

    DELIM           reduce using rule 213 (create_table -> CREATE TABLE if_not_exists IDENT ( create_statements ) table_options_opt .)
    ;               reduce using rule 213 (create_table -> CREATE TABLE if_not_exists IDENT ( create_statements ) table_options_opt .)


state 707

    (109) ignore_default -> DEFAULT .

    CHARACTER       reduce using rule 109 (ignore_default -> DEFAULT .)
    CHARSET         reduce using rule 109 (ignore_default -> DEFAULT .)
    COLLATE         reduce using rule 109 (ignore_default -> DEFAULT .)


state 708

    (203) table_option -> AUTO_INCREMENT . ignore_eq NUMBER
    (102) ignore_eq -> . EQ
    (103) ignore_eq -> .

    EQ              shift and go to state 774
    NUMBER          reduce using rule 103 (ignore_eq -> .)

    ignore_eq                      shift and go to state 778

state 709

    (204) table_option -> ignore_default . CHARACTER SET ignore_eq IDENT
    (205) table_option -> ignore_default . CHARSET ignore_eq IDENT
    (206) table_option -> ignore_default . COLLATE ignore_eq IDENT

    CHARACTER       shift and go to state 780
    CHARSET         shift and go to state 779
    COLLATE         shift and go to state 781


state 710

    (208) table_options_opt -> table_options .

    DELIM           reduce using rule 208 (table_options_opt -> table_options .)
    ;               reduce using rule 208 (table_options_opt -> table_options .)


state 711

    (125) index_statement -> KEY IDENT ( . column_names )
    (121) column_names -> . column_name
    (122) column_names -> . column_name , column_names
    (120) column_name -> . IDENT

    IDENT           shift and go to state 428

    column_names                   shift and go to state 782
    column_name                    shift and go to state 695

state 712

    (535) create_index -> CREATE unique_opt INDEX IDENT ON IDENT ( ident_list . )

    )               shift and go to state 783


state 713

    (418) create_trigger -> CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR . EACH ROW sp_proc_stmt

    EACH            shift and go to state 784


state 714

    (270) values -> expr_or_default , values .

    )               reduce using rule 270 (values -> expr_or_default , values .)


state 715

    (290) order_or_limit -> order_clause opt_limit_clause_init .

    DELIM           reduce using rule 290 (order_or_limit -> order_clause opt_limit_clause_init .)
    ;               reduce using rule 290 (order_or_limit -> order_clause opt_limit_clause_init .)
    ON              reduce using rule 290 (order_or_limit -> order_clause opt_limit_clause_init .)
    )               reduce using rule 290 (order_or_limit -> order_clause opt_limit_clause_init .)


state 716

    (289) opt_limit_clause_init -> limit_clause .

    DELIM           reduce using rule 289 (opt_limit_clause_init -> limit_clause .)
    ;               reduce using rule 289 (opt_limit_clause_init -> limit_clause .)
    ON              reduce using rule 289 (opt_limit_clause_init -> limit_clause .)
    )               reduce using rule 289 (opt_limit_clause_init -> limit_clause .)


state 717

    (280) opt_select_from -> select_from select_lock_type .

    UNION           reduce using rule 280 (opt_select_from -> select_from select_lock_type .)
    DELIM           reduce using rule 280 (opt_select_from -> select_from select_lock_type .)
    ;               reduce using rule 280 (opt_select_from -> select_from select_lock_type .)
    ON              reduce using rule 280 (opt_select_from -> select_from select_lock_type .)
    )               reduce using rule 280 (opt_select_from -> select_from select_lock_type .)


state 718

    (63) convert_function -> CONVERT ( expr USING IDENT ) .

    BITWISE_OR      reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    BITWISE_AND     reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    SHL             reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    SHR             reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    PLUS            reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    MINUS           reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    TIMES           reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    DIV             reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    MOD             reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    BITWISE_XOR     reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    SOUNDS          reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    NOT             reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    LOGICAL_NOT     reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    IN              reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    BETWEEN         reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    LIKE            reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    REGEXP          reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    IS              reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    NULL_SAFE       reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    EQ              reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    GE              reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    GT              reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    LE              reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    LT              reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    NE              reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    OR              reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    AND             reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    XOR             reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    AS              reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    IDENT           reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    ,               reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    INTO            reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    FROM            reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    ORDER           reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    FOR             reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    LOCK            reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    LIMIT           reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    UNION           reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    DELIM           reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    ;               reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    )               reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    ON              reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    USING           reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    ASC             reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    DESC            reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    WHERE           reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    GROUP           reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    HAVING          reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    JOIN            reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    INNER           reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    CROSS           reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    LEFT            reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    RIGHT           reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    NATURAL         reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    WITH            reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    DO              reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    WHEN            reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    THEN            reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    END             reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)
    ESCAPE          reduce using rule 63 (convert_function -> CONVERT ( expr USING IDENT ) .)


state 719

    (496) join_condition -> ON . expr
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 785
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 720

    (495) opt_join_condition -> join_condition .

    JOIN            reduce using rule 495 (opt_join_condition -> join_condition .)
    INNER           reduce using rule 495 (opt_join_condition -> join_condition .)
    CROSS           reduce using rule 495 (opt_join_condition -> join_condition .)
    LEFT            reduce using rule 495 (opt_join_condition -> join_condition .)
    RIGHT           reduce using rule 495 (opt_join_condition -> join_condition .)
    NATURAL         reduce using rule 495 (opt_join_condition -> join_condition .)
    ,               reduce using rule 495 (opt_join_condition -> join_condition .)
    WHERE           reduce using rule 495 (opt_join_condition -> join_condition .)
    GROUP           reduce using rule 495 (opt_join_condition -> join_condition .)
    HAVING          reduce using rule 495 (opt_join_condition -> join_condition .)
    ORDER           reduce using rule 495 (opt_join_condition -> join_condition .)
    LIMIT           reduce using rule 495 (opt_join_condition -> join_condition .)
    INTO            reduce using rule 495 (opt_join_condition -> join_condition .)
    FOR             reduce using rule 495 (opt_join_condition -> join_condition .)
    LOCK            reduce using rule 495 (opt_join_condition -> join_condition .)
    UNION           reduce using rule 495 (opt_join_condition -> join_condition .)
    DELIM           reduce using rule 495 (opt_join_condition -> join_condition .)
    ;               reduce using rule 495 (opt_join_condition -> join_condition .)
    )               reduce using rule 495 (opt_join_condition -> join_condition .)
    ON              reduce using rule 495 (opt_join_condition -> join_condition .)


state 721

    (497) join_condition -> USING . ( ident_list )

    (               shift and go to state 786


state 722

    (498) join_table -> table_ref join_clause table_factor opt_join_condition .

    JOIN            reduce using rule 498 (join_table -> table_ref join_clause table_factor opt_join_condition .)
    INNER           reduce using rule 498 (join_table -> table_ref join_clause table_factor opt_join_condition .)
    CROSS           reduce using rule 498 (join_table -> table_ref join_clause table_factor opt_join_condition .)
    LEFT            reduce using rule 498 (join_table -> table_ref join_clause table_factor opt_join_condition .)
    RIGHT           reduce using rule 498 (join_table -> table_ref join_clause table_factor opt_join_condition .)
    NATURAL         reduce using rule 498 (join_table -> table_ref join_clause table_factor opt_join_condition .)
    ,               reduce using rule 498 (join_table -> table_ref join_clause table_factor opt_join_condition .)
    WHERE           reduce using rule 498 (join_table -> table_ref join_clause table_factor opt_join_condition .)
    GROUP           reduce using rule 498 (join_table -> table_ref join_clause table_factor opt_join_condition .)
    HAVING          reduce using rule 498 (join_table -> table_ref join_clause table_factor opt_join_condition .)
    ORDER           reduce using rule 498 (join_table -> table_ref join_clause table_factor opt_join_condition .)
    LIMIT           reduce using rule 498 (join_table -> table_ref join_clause table_factor opt_join_condition .)
    INTO            reduce using rule 498 (join_table -> table_ref join_clause table_factor opt_join_condition .)
    FOR             reduce using rule 498 (join_table -> table_ref join_clause table_factor opt_join_condition .)
    LOCK            reduce using rule 498 (join_table -> table_ref join_clause table_factor opt_join_condition .)
    UNION           reduce using rule 498 (join_table -> table_ref join_clause table_factor opt_join_condition .)
    DELIM           reduce using rule 498 (join_table -> table_ref join_clause table_factor opt_join_condition .)
    ;               reduce using rule 498 (join_table -> table_ref join_clause table_factor opt_join_condition .)
    )               reduce using rule 498 (join_table -> table_ref join_clause table_factor opt_join_condition .)
    ON              reduce using rule 498 (join_table -> table_ref join_clause table_factor opt_join_condition .)


state 723

    (492) join_clause -> RIGHT OUTER JOIN .

    IDENT           reduce using rule 492 (join_clause -> RIGHT OUTER JOIN .)


state 724

    (490) join_clause -> LEFT OUTER JOIN .

    IDENT           reduce using rule 490 (join_clause -> LEFT OUTER JOIN .)


state 725

    (479) index_hint_definition -> index_hint_type check_index_or_key . index_hint_clause ( opt_key_usage_list )
    (466) index_hint_clause -> .
    (467) index_hint_clause -> . FOR JOIN
    (468) index_hint_clause -> . FOR ORDER BY
    (469) index_hint_clause -> . FOR GROUP BY

    (               reduce using rule 466 (index_hint_clause -> .)
    FOR             shift and go to state 787

    index_hint_clause              shift and go to state 788

state 726

    (481) index_hints_list -> index_hint_definition index_hints_list .

    JOIN            reduce using rule 481 (index_hints_list -> index_hint_definition index_hints_list .)
    INNER           reduce using rule 481 (index_hints_list -> index_hint_definition index_hints_list .)
    CROSS           reduce using rule 481 (index_hints_list -> index_hint_definition index_hints_list .)
    LEFT            reduce using rule 481 (index_hints_list -> index_hint_definition index_hints_list .)
    RIGHT           reduce using rule 481 (index_hints_list -> index_hint_definition index_hints_list .)
    NATURAL         reduce using rule 481 (index_hints_list -> index_hint_definition index_hints_list .)
    ,               reduce using rule 481 (index_hints_list -> index_hint_definition index_hints_list .)
    WHERE           reduce using rule 481 (index_hints_list -> index_hint_definition index_hints_list .)
    GROUP           reduce using rule 481 (index_hints_list -> index_hint_definition index_hints_list .)
    HAVING          reduce using rule 481 (index_hints_list -> index_hint_definition index_hints_list .)
    ORDER           reduce using rule 481 (index_hints_list -> index_hint_definition index_hints_list .)
    LIMIT           reduce using rule 481 (index_hints_list -> index_hint_definition index_hints_list .)
    INTO            reduce using rule 481 (index_hints_list -> index_hint_definition index_hints_list .)
    FOR             reduce using rule 481 (index_hints_list -> index_hint_definition index_hints_list .)
    LOCK            reduce using rule 481 (index_hints_list -> index_hint_definition index_hints_list .)
    UNION           reduce using rule 481 (index_hints_list -> index_hint_definition index_hints_list .)
    DELIM           reduce using rule 481 (index_hints_list -> index_hint_definition index_hints_list .)
    ;               reduce using rule 481 (index_hints_list -> index_hint_definition index_hints_list .)
    )               reduce using rule 481 (index_hints_list -> index_hint_definition index_hints_list .)
    ON              reduce using rule 481 (index_hints_list -> index_hint_definition index_hints_list .)
    USING           reduce using rule 481 (index_hints_list -> index_hint_definition index_hints_list .)


state 727

    (517) select_from -> FROM join_table_list where_clause group_clause having_clause . opt_order_clause opt_limit_clause
    (435) opt_order_clause -> .
    (436) opt_order_clause -> . order_clause
    (437) order_clause -> . ORDER BY order_list

    LIMIT           reduce using rule 435 (opt_order_clause -> .)
    INTO            reduce using rule 435 (opt_order_clause -> .)
    FOR             reduce using rule 435 (opt_order_clause -> .)
    LOCK            reduce using rule 435 (opt_order_clause -> .)
    UNION           reduce using rule 435 (opt_order_clause -> .)
    DELIM           reduce using rule 435 (opt_order_clause -> .)
    ;               reduce using rule 435 (opt_order_clause -> .)
    )               reduce using rule 435 (opt_order_clause -> .)
    ON              reduce using rule 435 (opt_order_clause -> .)
    ORDER           shift and go to state 228

    order_clause                   shift and go to state 227
    opt_order_clause               shift and go to state 789

state 728

    (516) having_clause -> HAVING . expr
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 790
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 729

    (514) group_clause -> GROUP BY . group_list olap_opt
    (512) group_list -> . group_item
    (513) group_list -> . group_item , group_list
    (511) group_item -> . order_item
    (442) order_item -> . order_ident order_dir
    (438) order_ident -> . expr
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    group_list                     shift and go to state 791
    average_function               shift and go to state 130
    min_function                   shift and go to state 152
    order_item                     shift and go to state 792
    cast_function                  shift and go to state 125
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    group_item                     shift and go to state 793
    max_function                   shift and go to state 149
    function_call                  shift and go to state 128
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 498
    simple_expr                    shift and go to state 131
    order_ident                    shift and go to state 499

state 730

    (444) order_list -> order_item , order_list .

    LIMIT           reduce using rule 444 (order_list -> order_item , order_list .)
    FOR             reduce using rule 444 (order_list -> order_item , order_list .)
    LOCK            reduce using rule 444 (order_list -> order_item , order_list .)
    UNION           reduce using rule 444 (order_list -> order_item , order_list .)
    DELIM           reduce using rule 444 (order_list -> order_item , order_list .)
    ;               reduce using rule 444 (order_list -> order_item , order_list .)
    )               reduce using rule 444 (order_list -> order_item , order_list .)
    ON              reduce using rule 444 (order_list -> order_item , order_list .)
    INTO            reduce using rule 444 (order_list -> order_item , order_list .)


state 731

    (279) select_lock_type -> LOCK IN SHARE MODE .

    UNION           reduce using rule 279 (select_lock_type -> LOCK IN SHARE MODE .)
    DELIM           reduce using rule 279 (select_lock_type -> LOCK IN SHARE MODE .)
    ;               reduce using rule 279 (select_lock_type -> LOCK IN SHARE MODE .)
    ON              reduce using rule 279 (select_lock_type -> LOCK IN SHARE MODE .)
    )               reduce using rule 279 (select_lock_type -> LOCK IN SHARE MODE .)


state 732

    (449) limit_options -> limit_option , limit_option .

    FOR             reduce using rule 449 (limit_options -> limit_option , limit_option .)
    LOCK            reduce using rule 449 (limit_options -> limit_option , limit_option .)
    UNION           reduce using rule 449 (limit_options -> limit_option , limit_option .)
    DELIM           reduce using rule 449 (limit_options -> limit_option , limit_option .)
    ;               reduce using rule 449 (limit_options -> limit_option , limit_option .)
    )               reduce using rule 449 (limit_options -> limit_option , limit_option .)
    ON              reduce using rule 449 (limit_options -> limit_option , limit_option .)
    INTO            reduce using rule 449 (limit_options -> limit_option , limit_option .)


state 733

    (450) limit_options -> limit_option OFFSET limit_option .

    FOR             reduce using rule 450 (limit_options -> limit_option OFFSET limit_option .)
    LOCK            reduce using rule 450 (limit_options -> limit_option OFFSET limit_option .)
    UNION           reduce using rule 450 (limit_options -> limit_option OFFSET limit_option .)
    DELIM           reduce using rule 450 (limit_options -> limit_option OFFSET limit_option .)
    ;               reduce using rule 450 (limit_options -> limit_option OFFSET limit_option .)
    )               reduce using rule 450 (limit_options -> limit_option OFFSET limit_option .)
    ON              reduce using rule 450 (limit_options -> limit_option OFFSET limit_option .)
    INTO            reduce using rule 450 (limit_options -> limit_option OFFSET limit_option .)


state 734

    (74) cast_function -> CAST ( expr AS cast_type ) .

    SOUNDS          reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    BITWISE_OR      reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    BITWISE_AND     reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    SHL             reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    SHR             reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    PLUS            reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    MINUS           reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    TIMES           reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    DIV             reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    MOD             reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    BITWISE_XOR     reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    NOT             reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    LOGICAL_NOT     reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    IN              reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    BETWEEN         reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    LIKE            reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    REGEXP          reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    IS              reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    NULL_SAFE       reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    EQ              reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    GE              reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    GT              reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    LE              reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    LT              reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    NE              reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    OR              reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    AND             reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    XOR             reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    AS              reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    IDENT           reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    ,               reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    INTO            reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    FROM            reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    ORDER           reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    FOR             reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    LOCK            reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    LIMIT           reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    UNION           reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    DELIM           reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    ;               reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    )               reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    ON              reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    USING           reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    ASC             reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    DESC            reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    WHERE           reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    GROUP           reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    HAVING          reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    JOIN            reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    INNER           reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    CROSS           reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    LEFT            reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    RIGHT           reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    NATURAL         reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    WITH            reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    DO              reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    WHEN            reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    THEN            reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    END             reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)
    ESCAPE          reduce using rule 74 (cast_function -> CAST ( expr AS cast_type ) .)


state 735

    (67) cast_type -> DECIMAL bidimensional_limit_opt .

    )               reduce using rule 67 (cast_type -> DECIMAL bidimensional_limit_opt .)


state 736

    (71) ignore_integer -> INTEGER .

    )               reduce using rule 71 (ignore_integer -> INTEGER .)


state 737

    (72) cast_type -> signed_or_unsigned ignore_integer .

    )               reduce using rule 72 (cast_type -> signed_or_unsigned ignore_integer .)


state 738

    (23) boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .

    IS              reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    NULL_SAFE       reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    EQ              reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    GE              reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    GT              reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    LE              reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    LT              reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    NE              reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    OR              reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    AND             reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    XOR             reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    ASC             reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    DESC            reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    ,               reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    LIMIT           reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    FOR             reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    LOCK            reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    UNION           reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    DELIM           reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    ;               reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    )               reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    ON              reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    INTO            reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    THEN            reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    DO              reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    WITH            reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    HAVING          reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    ORDER           reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    GROUP           reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    WHEN            reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    AS              reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    USING           reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    IDENT           reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    FROM            reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    WHERE           reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    JOIN            reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    INNER           reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    CROSS           reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    LEFT            reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    RIGHT           reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    NATURAL         reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)
    END             reduce using rule 23 (boolean_primary -> boolean_primary comparison_operator all_or_any ( subquery ) .)


state 739

    (7) escape_opt -> ESCAPE simple_expr .

    IS              reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    NULL_SAFE       reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    EQ              reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    GE              reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    GT              reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    LE              reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    LT              reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    NE              reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    OR              reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    AND             reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    XOR             reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    AS              reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    IDENT           reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    ,               reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    INTO            reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    FROM            reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    ORDER           reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    FOR             reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    LOCK            reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    LIMIT           reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    UNION           reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    DELIM           reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    ;               reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    )               reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    ON              reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    USING           reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    ASC             reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    DESC            reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    WHERE           reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    GROUP           reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    HAVING          reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    JOIN            reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    INNER           reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    CROSS           reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    LEFT            reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    RIGHT           reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    NATURAL         reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    WITH            reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    DO              reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    WHEN            reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    THEN            reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)
    END             reduce using rule 7 (escape_opt -> ESCAPE simple_expr .)


state 740

    (35) predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .

    IS              reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    NULL_SAFE       reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    EQ              reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    GE              reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    GT              reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    LE              reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    LT              reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    NE              reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    OR              reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    AND             reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    XOR             reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    AS              reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    IDENT           reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    ,               reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    INTO            reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    FROM            reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    ORDER           reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    FOR             reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    LOCK            reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    LIMIT           reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    UNION           reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    DELIM           reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    ;               reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    )               reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    ON              reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    USING           reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    ASC             reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    DESC            reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    WHERE           reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    GROUP           reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    HAVING          reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    JOIN            reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    INNER           reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    CROSS           reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    LEFT            reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    RIGHT           reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    NATURAL         reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    WITH            reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    DO              reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    WHEN            reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    THEN            reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)
    END             reduce using rule 35 (predicate -> bit_expr not_opt BETWEEN bit_expr AND predicate .)


state 741

    (34) predicate -> bit_expr not_opt IN ( expr_list ) .

    IS              reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    NULL_SAFE       reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    EQ              reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    GE              reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    GT              reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    LE              reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    LT              reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    NE              reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    OR              reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    AND             reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    XOR             reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    AS              reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    IDENT           reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    ,               reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    INTO            reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    FROM            reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    ORDER           reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    FOR             reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    LOCK            reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    LIMIT           reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    UNION           reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    DELIM           reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    ;               reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    )               reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    ON              reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    USING           reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    ASC             reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    DESC            reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    WHERE           reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    GROUP           reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    HAVING          reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    JOIN            reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    INNER           reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    CROSS           reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    LEFT            reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    RIGHT           reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    NATURAL         reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    WITH            reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    DO              reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    WHEN            reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    THEN            reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)
    END             reduce using rule 34 (predicate -> bit_expr not_opt IN ( expr_list ) .)


state 742

    (33) predicate -> bit_expr not_opt IN ( subquery ) .

    IS              reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    NULL_SAFE       reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    EQ              reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    GE              reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    GT              reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    LE              reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    LT              reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    NE              reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    OR              reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    AND             reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    XOR             reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    AS              reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    IDENT           reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    ,               reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    INTO            reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    FROM            reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    ORDER           reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    FOR             reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    LOCK            reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    LIMIT           reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    UNION           reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    DELIM           reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    ;               reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    )               reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    ON              reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    USING           reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    ASC             reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    DESC            reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    WHERE           reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    GROUP           reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    HAVING          reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    JOIN            reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    INNER           reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    CROSS           reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    LEFT            reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    RIGHT           reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    NATURAL         reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    WITH            reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    DO              reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    WHEN            reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    THEN            reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)
    END             reduce using rule 33 (predicate -> bit_expr not_opt IN ( subquery ) .)


state 743

    (295) select_paren -> ( select_paren ) .

    )               reduce using rule 295 (select_paren -> ( select_paren ) .)


state 744

    (297) union_select_init -> ( select_paren ) union_opt .

    DELIM           reduce using rule 297 (union_select_init -> ( select_paren ) union_opt .)
    ;               reduce using rule 297 (union_select_init -> ( select_paren ) union_opt .)
    )               reduce using rule 297 (union_select_init -> ( select_paren ) union_opt .)
    ON              reduce using rule 297 (union_select_init -> ( select_paren ) union_opt .)


state 745

    (141) limit -> ( NUMBER . )

    )               shift and go to state 794


state 746

    (160) unsigned_opt -> UNSIGNED .

    COLLATE         reduce using rule 160 (unsigned_opt -> UNSIGNED .)
    DEFAULT         reduce using rule 160 (unsigned_opt -> UNSIGNED .)
    DELIM           reduce using rule 160 (unsigned_opt -> UNSIGNED .)
    ;               reduce using rule 160 (unsigned_opt -> UNSIGNED .)
    NULL            reduce using rule 160 (unsigned_opt -> UNSIGNED .)
    NOT             reduce using rule 160 (unsigned_opt -> UNSIGNED .)
    AUTO_INCREMENT  reduce using rule 160 (unsigned_opt -> UNSIGNED .)
    UNIQUE          reduce using rule 160 (unsigned_opt -> UNSIGNED .)
    KEY             reduce using rule 160 (unsigned_opt -> UNSIGNED .)
    PRIMARY         reduce using rule 160 (unsigned_opt -> UNSIGNED .)
    CHARACTER       reduce using rule 160 (unsigned_opt -> UNSIGNED .)
    FIRST           reduce using rule 160 (unsigned_opt -> UNSIGNED .)
    AFTER           reduce using rule 160 (unsigned_opt -> UNSIGNED .)
    ,               reduce using rule 160 (unsigned_opt -> UNSIGNED .)
    )               reduce using rule 160 (unsigned_opt -> UNSIGNED .)


state 747

    (161) integer_statement -> integer_type limit_opt unsigned_opt .

    NULL            reduce using rule 161 (integer_statement -> integer_type limit_opt unsigned_opt .)
    NOT             reduce using rule 161 (integer_statement -> integer_type limit_opt unsigned_opt .)
    DEFAULT         reduce using rule 161 (integer_statement -> integer_type limit_opt unsigned_opt .)
    AUTO_INCREMENT  reduce using rule 161 (integer_statement -> integer_type limit_opt unsigned_opt .)
    UNIQUE          reduce using rule 161 (integer_statement -> integer_type limit_opt unsigned_opt .)
    KEY             reduce using rule 161 (integer_statement -> integer_type limit_opt unsigned_opt .)
    PRIMARY         reduce using rule 161 (integer_statement -> integer_type limit_opt unsigned_opt .)
    CHARACTER       reduce using rule 161 (integer_statement -> integer_type limit_opt unsigned_opt .)
    COLLATE         reduce using rule 161 (integer_statement -> integer_type limit_opt unsigned_opt .)
    FIRST           reduce using rule 161 (integer_statement -> integer_type limit_opt unsigned_opt .)
    AFTER           reduce using rule 161 (integer_statement -> integer_type limit_opt unsigned_opt .)
    ,               reduce using rule 161 (integer_statement -> integer_type limit_opt unsigned_opt .)
    DELIM           reduce using rule 161 (integer_statement -> integer_type limit_opt unsigned_opt .)
    ;               reduce using rule 161 (integer_statement -> integer_type limit_opt unsigned_opt .)
    )               reduce using rule 161 (integer_statement -> integer_type limit_opt unsigned_opt .)


state 748

    (144) bidimensional_limit -> ( NUMBER . , NUMBER )

    ,               shift and go to state 795


state 749

    (162) double_precision_statement -> double_precision_type bidimensional_limit_opt unsigned_opt .

    NULL            reduce using rule 162 (double_precision_statement -> double_precision_type bidimensional_limit_opt unsigned_opt .)
    NOT             reduce using rule 162 (double_precision_statement -> double_precision_type bidimensional_limit_opt unsigned_opt .)
    DEFAULT         reduce using rule 162 (double_precision_statement -> double_precision_type bidimensional_limit_opt unsigned_opt .)
    AUTO_INCREMENT  reduce using rule 162 (double_precision_statement -> double_precision_type bidimensional_limit_opt unsigned_opt .)
    UNIQUE          reduce using rule 162 (double_precision_statement -> double_precision_type bidimensional_limit_opt unsigned_opt .)
    KEY             reduce using rule 162 (double_precision_statement -> double_precision_type bidimensional_limit_opt unsigned_opt .)
    PRIMARY         reduce using rule 162 (double_precision_statement -> double_precision_type bidimensional_limit_opt unsigned_opt .)
    CHARACTER       reduce using rule 162 (double_precision_statement -> double_precision_type bidimensional_limit_opt unsigned_opt .)
    COLLATE         reduce using rule 162 (double_precision_statement -> double_precision_type bidimensional_limit_opt unsigned_opt .)
    FIRST           reduce using rule 162 (double_precision_statement -> double_precision_type bidimensional_limit_opt unsigned_opt .)
    AFTER           reduce using rule 162 (double_precision_statement -> double_precision_type bidimensional_limit_opt unsigned_opt .)
    ,               reduce using rule 162 (double_precision_statement -> double_precision_type bidimensional_limit_opt unsigned_opt .)
    DELIM           reduce using rule 162 (double_precision_statement -> double_precision_type bidimensional_limit_opt unsigned_opt .)
    ;               reduce using rule 162 (double_precision_statement -> double_precision_type bidimensional_limit_opt unsigned_opt .)
    )               reduce using rule 162 (double_precision_statement -> double_precision_type bidimensional_limit_opt unsigned_opt .)


state 750

    (225) position -> AFTER IDENT .

    ,               reduce using rule 225 (position -> AFTER IDENT .)
    DELIM           reduce using rule 225 (position -> AFTER IDENT .)
    ;               reduce using rule 225 (position -> AFTER IDENT .)


state 751

    (158) value -> IDENT .

    NULL            reduce using rule 158 (value -> IDENT .)
    NOT             reduce using rule 158 (value -> IDENT .)
    DEFAULT         reduce using rule 158 (value -> IDENT .)
    AUTO_INCREMENT  reduce using rule 158 (value -> IDENT .)
    UNIQUE          reduce using rule 158 (value -> IDENT .)
    KEY             reduce using rule 158 (value -> IDENT .)
    PRIMARY         reduce using rule 158 (value -> IDENT .)
    CHARACTER       reduce using rule 158 (value -> IDENT .)
    COLLATE         reduce using rule 158 (value -> IDENT .)
    FIRST           reduce using rule 158 (value -> IDENT .)
    AFTER           reduce using rule 158 (value -> IDENT .)
    ,               reduce using rule 158 (value -> IDENT .)
    DELIM           reduce using rule 158 (value -> IDENT .)
    ;               reduce using rule 158 (value -> IDENT .)
    )               reduce using rule 158 (value -> IDENT .)


state 752

    (155) value -> STRING .

    NULL            reduce using rule 155 (value -> STRING .)
    NOT             reduce using rule 155 (value -> STRING .)
    DEFAULT         reduce using rule 155 (value -> STRING .)
    AUTO_INCREMENT  reduce using rule 155 (value -> STRING .)
    UNIQUE          reduce using rule 155 (value -> STRING .)
    KEY             reduce using rule 155 (value -> STRING .)
    PRIMARY         reduce using rule 155 (value -> STRING .)
    CHARACTER       reduce using rule 155 (value -> STRING .)
    COLLATE         reduce using rule 155 (value -> STRING .)
    FIRST           reduce using rule 155 (value -> STRING .)
    AFTER           reduce using rule 155 (value -> STRING .)
    ,               reduce using rule 155 (value -> STRING .)
    DELIM           reduce using rule 155 (value -> STRING .)
    ;               reduce using rule 155 (value -> STRING .)
    )               reduce using rule 155 (value -> STRING .)


state 753

    (157) value -> FLOAT_LIT .

    NULL            reduce using rule 157 (value -> FLOAT_LIT .)
    NOT             reduce using rule 157 (value -> FLOAT_LIT .)
    DEFAULT         reduce using rule 157 (value -> FLOAT_LIT .)
    AUTO_INCREMENT  reduce using rule 157 (value -> FLOAT_LIT .)
    UNIQUE          reduce using rule 157 (value -> FLOAT_LIT .)
    KEY             reduce using rule 157 (value -> FLOAT_LIT .)
    PRIMARY         reduce using rule 157 (value -> FLOAT_LIT .)
    CHARACTER       reduce using rule 157 (value -> FLOAT_LIT .)
    COLLATE         reduce using rule 157 (value -> FLOAT_LIT .)
    FIRST           reduce using rule 157 (value -> FLOAT_LIT .)
    AFTER           reduce using rule 157 (value -> FLOAT_LIT .)
    ,               reduce using rule 157 (value -> FLOAT_LIT .)
    DELIM           reduce using rule 157 (value -> FLOAT_LIT .)
    ;               reduce using rule 157 (value -> FLOAT_LIT .)
    )               reduce using rule 157 (value -> FLOAT_LIT .)


state 754

    (153) default -> DEFAULT value .

    NULL            reduce using rule 153 (default -> DEFAULT value .)
    NOT             reduce using rule 153 (default -> DEFAULT value .)
    DEFAULT         reduce using rule 153 (default -> DEFAULT value .)
    AUTO_INCREMENT  reduce using rule 153 (default -> DEFAULT value .)
    UNIQUE          reduce using rule 153 (default -> DEFAULT value .)
    KEY             reduce using rule 153 (default -> DEFAULT value .)
    PRIMARY         reduce using rule 153 (default -> DEFAULT value .)
    CHARACTER       reduce using rule 153 (default -> DEFAULT value .)
    COLLATE         reduce using rule 153 (default -> DEFAULT value .)
    FIRST           reduce using rule 153 (default -> DEFAULT value .)
    AFTER           reduce using rule 153 (default -> DEFAULT value .)
    ,               reduce using rule 153 (default -> DEFAULT value .)
    DELIM           reduce using rule 153 (default -> DEFAULT value .)
    ;               reduce using rule 153 (default -> DEFAULT value .)
    )               reduce using rule 153 (default -> DEFAULT value .)


state 755

    (156) value -> NUMBER .

    NULL            reduce using rule 156 (value -> NUMBER .)
    NOT             reduce using rule 156 (value -> NUMBER .)
    DEFAULT         reduce using rule 156 (value -> NUMBER .)
    AUTO_INCREMENT  reduce using rule 156 (value -> NUMBER .)
    UNIQUE          reduce using rule 156 (value -> NUMBER .)
    KEY             reduce using rule 156 (value -> NUMBER .)
    PRIMARY         reduce using rule 156 (value -> NUMBER .)
    CHARACTER       reduce using rule 156 (value -> NUMBER .)
    COLLATE         reduce using rule 156 (value -> NUMBER .)
    FIRST           reduce using rule 156 (value -> NUMBER .)
    AFTER           reduce using rule 156 (value -> NUMBER .)
    ,               reduce using rule 156 (value -> NUMBER .)
    DELIM           reduce using rule 156 (value -> NUMBER .)
    ;               reduce using rule 156 (value -> NUMBER .)
    )               reduce using rule 156 (value -> NUMBER .)


state 756

    (154) value -> NULL .

    NULL            reduce using rule 154 (value -> NULL .)
    NOT             reduce using rule 154 (value -> NULL .)
    DEFAULT         reduce using rule 154 (value -> NULL .)
    AUTO_INCREMENT  reduce using rule 154 (value -> NULL .)
    UNIQUE          reduce using rule 154 (value -> NULL .)
    KEY             reduce using rule 154 (value -> NULL .)
    PRIMARY         reduce using rule 154 (value -> NULL .)
    CHARACTER       reduce using rule 154 (value -> NULL .)
    COLLATE         reduce using rule 154 (value -> NULL .)
    FIRST           reduce using rule 154 (value -> NULL .)
    AFTER           reduce using rule 154 (value -> NULL .)
    ,               reduce using rule 154 (value -> NULL .)
    DELIM           reduce using rule 154 (value -> NULL .)
    ;               reduce using rule 154 (value -> NULL .)
    )               reduce using rule 154 (value -> NULL .)


state 757

    (145) charset_statement -> CHARACTER SET . IDENT

    IDENT           shift and go to state 796


state 758

    (194) column_options -> column_option column_options .

    FIRST           reduce using rule 194 (column_options -> column_option column_options .)
    AFTER           reduce using rule 194 (column_options -> column_option column_options .)
    ,               reduce using rule 194 (column_options -> column_option column_options .)
    DELIM           reduce using rule 194 (column_options -> column_option column_options .)
    ;               reduce using rule 194 (column_options -> column_option column_options .)
    )               reduce using rule 194 (column_options -> column_option column_options .)


state 759

    (146) collate_statement -> COLLATE IDENT .

    NULL            reduce using rule 146 (collate_statement -> COLLATE IDENT .)
    NOT             reduce using rule 146 (collate_statement -> COLLATE IDENT .)
    DEFAULT         reduce using rule 146 (collate_statement -> COLLATE IDENT .)
    AUTO_INCREMENT  reduce using rule 146 (collate_statement -> COLLATE IDENT .)
    UNIQUE          reduce using rule 146 (collate_statement -> COLLATE IDENT .)
    KEY             reduce using rule 146 (collate_statement -> COLLATE IDENT .)
    PRIMARY         reduce using rule 146 (collate_statement -> COLLATE IDENT .)
    CHARACTER       reduce using rule 146 (collate_statement -> COLLATE IDENT .)
    COLLATE         reduce using rule 146 (collate_statement -> COLLATE IDENT .)
    FIRST           reduce using rule 146 (collate_statement -> COLLATE IDENT .)
    AFTER           reduce using rule 146 (collate_statement -> COLLATE IDENT .)
    ,               reduce using rule 146 (collate_statement -> COLLATE IDENT .)
    DELIM           reduce using rule 146 (collate_statement -> COLLATE IDENT .)
    ;               reduce using rule 146 (collate_statement -> COLLATE IDENT .)
    )               reduce using rule 146 (collate_statement -> COLLATE IDENT .)


state 760

    (149) key -> UNIQUE ignore_key .

    NULL            reduce using rule 149 (key -> UNIQUE ignore_key .)
    NOT             reduce using rule 149 (key -> UNIQUE ignore_key .)
    DEFAULT         reduce using rule 149 (key -> UNIQUE ignore_key .)
    AUTO_INCREMENT  reduce using rule 149 (key -> UNIQUE ignore_key .)
    UNIQUE          reduce using rule 149 (key -> UNIQUE ignore_key .)
    KEY             reduce using rule 149 (key -> UNIQUE ignore_key .)
    PRIMARY         reduce using rule 149 (key -> UNIQUE ignore_key .)
    CHARACTER       reduce using rule 149 (key -> UNIQUE ignore_key .)
    COLLATE         reduce using rule 149 (key -> UNIQUE ignore_key .)
    FIRST           reduce using rule 149 (key -> UNIQUE ignore_key .)
    AFTER           reduce using rule 149 (key -> UNIQUE ignore_key .)
    ,               reduce using rule 149 (key -> UNIQUE ignore_key .)
    DELIM           reduce using rule 149 (key -> UNIQUE ignore_key .)
    ;               reduce using rule 149 (key -> UNIQUE ignore_key .)
    )               reduce using rule 149 (key -> UNIQUE ignore_key .)


state 761

    (107) ignore_key -> KEY .

    NULL            reduce using rule 107 (ignore_key -> KEY .)
    NOT             reduce using rule 107 (ignore_key -> KEY .)
    DEFAULT         reduce using rule 107 (ignore_key -> KEY .)
    AUTO_INCREMENT  reduce using rule 107 (ignore_key -> KEY .)
    UNIQUE          reduce using rule 107 (ignore_key -> KEY .)
    KEY             reduce using rule 107 (ignore_key -> KEY .)
    PRIMARY         reduce using rule 107 (ignore_key -> KEY .)
    CHARACTER       reduce using rule 107 (ignore_key -> KEY .)
    COLLATE         reduce using rule 107 (ignore_key -> KEY .)
    FIRST           reduce using rule 107 (ignore_key -> KEY .)
    AFTER           reduce using rule 107 (ignore_key -> KEY .)
    ,               reduce using rule 107 (ignore_key -> KEY .)
    DELIM           reduce using rule 107 (ignore_key -> KEY .)
    ;               reduce using rule 107 (ignore_key -> KEY .)
    )               reduce using rule 107 (ignore_key -> KEY .)


state 762

    (151) key -> PRIMARY KEY .

    NULL            reduce using rule 151 (key -> PRIMARY KEY .)
    NOT             reduce using rule 151 (key -> PRIMARY KEY .)
    DEFAULT         reduce using rule 151 (key -> PRIMARY KEY .)
    AUTO_INCREMENT  reduce using rule 151 (key -> PRIMARY KEY .)
    UNIQUE          reduce using rule 151 (key -> PRIMARY KEY .)
    KEY             reduce using rule 151 (key -> PRIMARY KEY .)
    PRIMARY         reduce using rule 151 (key -> PRIMARY KEY .)
    CHARACTER       reduce using rule 151 (key -> PRIMARY KEY .)
    COLLATE         reduce using rule 151 (key -> PRIMARY KEY .)
    FIRST           reduce using rule 151 (key -> PRIMARY KEY .)
    AFTER           reduce using rule 151 (key -> PRIMARY KEY .)
    ,               reduce using rule 151 (key -> PRIMARY KEY .)
    DELIM           reduce using rule 151 (key -> PRIMARY KEY .)
    ;               reduce using rule 151 (key -> PRIMARY KEY .)
    )               reduce using rule 151 (key -> PRIMARY KEY .)


state 763

    (148) null -> NOT NULL .

    NULL            reduce using rule 148 (null -> NOT NULL .)
    NOT             reduce using rule 148 (null -> NOT NULL .)
    DEFAULT         reduce using rule 148 (null -> NOT NULL .)
    AUTO_INCREMENT  reduce using rule 148 (null -> NOT NULL .)
    UNIQUE          reduce using rule 148 (null -> NOT NULL .)
    KEY             reduce using rule 148 (null -> NOT NULL .)
    PRIMARY         reduce using rule 148 (null -> NOT NULL .)
    CHARACTER       reduce using rule 148 (null -> NOT NULL .)
    COLLATE         reduce using rule 148 (null -> NOT NULL .)
    FIRST           reduce using rule 148 (null -> NOT NULL .)
    AFTER           reduce using rule 148 (null -> NOT NULL .)
    ,               reduce using rule 148 (null -> NOT NULL .)
    DELIM           reduce using rule 148 (null -> NOT NULL .)
    ;               reduce using rule 148 (null -> NOT NULL .)
    )               reduce using rule 148 (null -> NOT NULL .)


state 764

    (232) change_default -> ALTER ignore_column IDENT SET DEFAULT literal .

    ,               reduce using rule 232 (change_default -> ALTER ignore_column IDENT SET DEFAULT literal .)
    DELIM           reduce using rule 232 (change_default -> ALTER ignore_column IDENT SET DEFAULT literal .)
    ;               reduce using rule 232 (change_default -> ALTER ignore_column IDENT SET DEFAULT literal .)


state 765

    (230) change_column -> CHANGE ignore_column column_name column_name column_statement position_opt .

    ,               reduce using rule 230 (change_column -> CHANGE ignore_column column_name column_name column_statement position_opt .)
    DELIM           reduce using rule 230 (change_column -> CHANGE ignore_column column_name column_name column_statement position_opt .)
    ;               reduce using rule 230 (change_column -> CHANGE ignore_column column_name column_name column_statement position_opt .)


state 766

    (227) add_index -> ADD check_index_or_key index_name_opt ( column_names ) .

    ,               reduce using rule 227 (add_index -> ADD check_index_or_key index_name_opt ( column_names ) .)
    DELIM           reduce using rule 227 (add_index -> ADD check_index_or_key index_name_opt ( column_names ) .)
    ;               reduce using rule 227 (add_index -> ADD check_index_or_key index_name_opt ( column_names ) .)


state 767

    (122) column_names -> column_name , . column_names
    (121) column_names -> . column_name
    (122) column_names -> . column_name , column_names
    (120) column_name -> . IDENT

    IDENT           shift and go to state 428

    column_names                   shift and go to state 797
    column_name                    shift and go to state 695

state 768

    (229) add_primary_key -> ADD constraint_opt PRIMARY KEY ( column_names . )

    )               shift and go to state 798


state 769

    (228) add_index -> ADD constraint_opt UNIQUE ignore_index_or_key index_name_opt ( . column_names )
    (121) column_names -> . column_name
    (122) column_names -> . column_name , column_names
    (120) column_name -> . IDENT

    IDENT           shift and go to state 428

    column_names                   shift and go to state 799
    column_name                    shift and go to state 695

state 770

    (262) opt_insert_update -> ON DUPLICATE KEY UPDATE . insert_update_list
    (260) insert_update_list -> . insert_update_elem
    (261) insert_update_list -> . insert_update_elem , insert_update_list
    (259) insert_update_elem -> . simple_ident_nospvar equal expr_or_default
    (258) simple_ident_nospvar -> . IDENT

    IDENT           shift and go to state 330

    insert_update_list             shift and go to state 801
    insert_update_elem             shift and go to state 802
    simple_ident_nospvar           shift and go to state 800

state 771

    (124) index_statement -> INDEX IDENT ( column_names . )

    )               shift and go to state 803


state 772

    (123) primary_key_statement -> constraint_opt PRIMARY KEY ( . column_names )
    (121) column_names -> . column_name
    (122) column_names -> . column_name , column_names
    (120) column_name -> . IDENT

    IDENT           shift and go to state 428

    column_names                   shift and go to state 804
    column_name                    shift and go to state 695

state 773

    (128) unique_statement -> constraint_opt UNIQUE ignore_index_or_key index_name_opt . ( column_names )

    (               shift and go to state 805


state 774

    (102) ignore_eq -> EQ .

    IDENT           reduce using rule 102 (ignore_eq -> EQ .)
    NUMBER          reduce using rule 102 (ignore_eq -> EQ .)


state 775

    (202) table_option -> ENGINE ignore_eq . IDENT

    IDENT           shift and go to state 806


state 776

    (210) table_options -> table_option ignore_comma . table_options
    (209) table_options -> . table_option
    (210) table_options -> . table_option ignore_comma table_options
    (202) table_option -> . ENGINE ignore_eq IDENT
    (203) table_option -> . AUTO_INCREMENT ignore_eq NUMBER
    (204) table_option -> . ignore_default CHARACTER SET ignore_eq IDENT
    (205) table_option -> . ignore_default CHARSET ignore_eq IDENT
    (206) table_option -> . ignore_default COLLATE ignore_eq IDENT
    (109) ignore_default -> . DEFAULT
    (110) ignore_default -> .

    ENGINE          shift and go to state 704
    AUTO_INCREMENT  shift and go to state 708
    DEFAULT         shift and go to state 707
    CHARACTER       reduce using rule 110 (ignore_default -> .)
    CHARSET         reduce using rule 110 (ignore_default -> .)
    COLLATE         reduce using rule 110 (ignore_default -> .)

    ignore_default                 shift and go to state 709
    table_option                   shift and go to state 705
    table_options                  shift and go to state 807

state 777

    (100) ignore_comma -> , .

    ENGINE          reduce using rule 100 (ignore_comma -> , .)
    AUTO_INCREMENT  reduce using rule 100 (ignore_comma -> , .)
    DEFAULT         reduce using rule 100 (ignore_comma -> , .)
    CHARACTER       reduce using rule 100 (ignore_comma -> , .)
    CHARSET         reduce using rule 100 (ignore_comma -> , .)
    COLLATE         reduce using rule 100 (ignore_comma -> , .)


state 778

    (203) table_option -> AUTO_INCREMENT ignore_eq . NUMBER

    NUMBER          shift and go to state 808


state 779

    (205) table_option -> ignore_default CHARSET . ignore_eq IDENT
    (102) ignore_eq -> . EQ
    (103) ignore_eq -> .

    EQ              shift and go to state 774
    IDENT           reduce using rule 103 (ignore_eq -> .)

    ignore_eq                      shift and go to state 809

state 780

    (204) table_option -> ignore_default CHARACTER . SET ignore_eq IDENT

    SET             shift and go to state 810


state 781

    (206) table_option -> ignore_default COLLATE . ignore_eq IDENT
    (102) ignore_eq -> . EQ
    (103) ignore_eq -> .

    EQ              shift and go to state 774
    IDENT           reduce using rule 103 (ignore_eq -> .)

    ignore_eq                      shift and go to state 811

state 782

    (125) index_statement -> KEY IDENT ( column_names . )

    )               shift and go to state 812


state 783

    (535) create_index -> CREATE unique_opt INDEX IDENT ON IDENT ( ident_list ) .

    DELIM           reduce using rule 535 (create_index -> CREATE unique_opt INDEX IDENT ON IDENT ( ident_list ) .)
    ;               reduce using rule 535 (create_index -> CREATE unique_opt INDEX IDENT ON IDENT ( ident_list ) .)


state 784

    (418) create_trigger -> CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH . ROW sp_proc_stmt

    ROW             shift and go to state 813


state 785

    (496) join_condition -> ON expr .
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    JOIN            reduce using rule 496 (join_condition -> ON expr .)
    INNER           reduce using rule 496 (join_condition -> ON expr .)
    CROSS           reduce using rule 496 (join_condition -> ON expr .)
    LEFT            reduce using rule 496 (join_condition -> ON expr .)
    RIGHT           reduce using rule 496 (join_condition -> ON expr .)
    NATURAL         reduce using rule 496 (join_condition -> ON expr .)
    ,               reduce using rule 496 (join_condition -> ON expr .)
    WHERE           reduce using rule 496 (join_condition -> ON expr .)
    GROUP           reduce using rule 496 (join_condition -> ON expr .)
    HAVING          reduce using rule 496 (join_condition -> ON expr .)
    ORDER           reduce using rule 496 (join_condition -> ON expr .)
    LIMIT           reduce using rule 496 (join_condition -> ON expr .)
    INTO            reduce using rule 496 (join_condition -> ON expr .)
    FOR             reduce using rule 496 (join_condition -> ON expr .)
    LOCK            reduce using rule 496 (join_condition -> ON expr .)
    UNION           reduce using rule 496 (join_condition -> ON expr .)
    DELIM           reduce using rule 496 (join_condition -> ON expr .)
    ;               reduce using rule 496 (join_condition -> ON expr .)
    )               reduce using rule 496 (join_condition -> ON expr .)
    ON              reduce using rule 496 (join_condition -> ON expr .)
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 786

    (497) join_condition -> USING ( . ident_list )
    (330) ident_list -> . IDENT
    (331) ident_list -> . IDENT , ident_list

    IDENT           shift and go to state 86

    ident_list                     shift and go to state 814

state 787

    (467) index_hint_clause -> FOR . JOIN
    (468) index_hint_clause -> FOR . ORDER BY
    (469) index_hint_clause -> FOR . GROUP BY

    JOIN            shift and go to state 816
    ORDER           shift and go to state 817
    GROUP           shift and go to state 815


state 788

    (479) index_hint_definition -> index_hint_type check_index_or_key index_hint_clause . ( opt_key_usage_list )

    (               shift and go to state 818


state 789

    (517) select_from -> FROM join_table_list where_clause group_clause having_clause opt_order_clause . opt_limit_clause
    (445) opt_limit_clause -> .
    (446) opt_limit_clause -> . limit_clause
    (447) limit_clause -> . LIMIT limit_options

    INTO            reduce using rule 445 (opt_limit_clause -> .)
    FOR             reduce using rule 445 (opt_limit_clause -> .)
    LOCK            reduce using rule 445 (opt_limit_clause -> .)
    UNION           reduce using rule 445 (opt_limit_clause -> .)
    DELIM           reduce using rule 445 (opt_limit_clause -> .)
    ;               reduce using rule 445 (opt_limit_clause -> .)
    )               reduce using rule 445 (opt_limit_clause -> .)
    ON              reduce using rule 445 (opt_limit_clause -> .)
    LIMIT           shift and go to state 372

    limit_clause                   shift and go to state 374
    opt_limit_clause               shift and go to state 819

state 790

    (516) having_clause -> HAVING expr .
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    ORDER           reduce using rule 516 (having_clause -> HAVING expr .)
    LIMIT           reduce using rule 516 (having_clause -> HAVING expr .)
    INTO            reduce using rule 516 (having_clause -> HAVING expr .)
    FOR             reduce using rule 516 (having_clause -> HAVING expr .)
    LOCK            reduce using rule 516 (having_clause -> HAVING expr .)
    UNION           reduce using rule 516 (having_clause -> HAVING expr .)
    DELIM           reduce using rule 516 (having_clause -> HAVING expr .)
    ;               reduce using rule 516 (having_clause -> HAVING expr .)
    )               reduce using rule 516 (having_clause -> HAVING expr .)
    ON              reduce using rule 516 (having_clause -> HAVING expr .)
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 791

    (514) group_clause -> GROUP BY group_list . olap_opt
    (508) olap_opt -> .
    (509) olap_opt -> . WITH CUBE
    (510) olap_opt -> . WITH ROLLUP

    HAVING          reduce using rule 508 (olap_opt -> .)
    ORDER           reduce using rule 508 (olap_opt -> .)
    LIMIT           reduce using rule 508 (olap_opt -> .)
    INTO            reduce using rule 508 (olap_opt -> .)
    FOR             reduce using rule 508 (olap_opt -> .)
    LOCK            reduce using rule 508 (olap_opt -> .)
    UNION           reduce using rule 508 (olap_opt -> .)
    DELIM           reduce using rule 508 (olap_opt -> .)
    ;               reduce using rule 508 (olap_opt -> .)
    )               reduce using rule 508 (olap_opt -> .)
    ON              reduce using rule 508 (olap_opt -> .)
    WITH            shift and go to state 821

    olap_opt                       shift and go to state 820

state 792

    (511) group_item -> order_item .

    ,               reduce using rule 511 (group_item -> order_item .)
    WITH            reduce using rule 511 (group_item -> order_item .)
    HAVING          reduce using rule 511 (group_item -> order_item .)
    ORDER           reduce using rule 511 (group_item -> order_item .)
    LIMIT           reduce using rule 511 (group_item -> order_item .)
    INTO            reduce using rule 511 (group_item -> order_item .)
    FOR             reduce using rule 511 (group_item -> order_item .)
    LOCK            reduce using rule 511 (group_item -> order_item .)
    UNION           reduce using rule 511 (group_item -> order_item .)
    DELIM           reduce using rule 511 (group_item -> order_item .)
    ;               reduce using rule 511 (group_item -> order_item .)
    )               reduce using rule 511 (group_item -> order_item .)
    ON              reduce using rule 511 (group_item -> order_item .)


state 793

    (512) group_list -> group_item .
    (513) group_list -> group_item . , group_list

    WITH            reduce using rule 512 (group_list -> group_item .)
    HAVING          reduce using rule 512 (group_list -> group_item .)
    ORDER           reduce using rule 512 (group_list -> group_item .)
    LIMIT           reduce using rule 512 (group_list -> group_item .)
    INTO            reduce using rule 512 (group_list -> group_item .)
    FOR             reduce using rule 512 (group_list -> group_item .)
    LOCK            reduce using rule 512 (group_list -> group_item .)
    UNION           reduce using rule 512 (group_list -> group_item .)
    DELIM           reduce using rule 512 (group_list -> group_item .)
    ;               reduce using rule 512 (group_list -> group_item .)
    )               reduce using rule 512 (group_list -> group_item .)
    ON              reduce using rule 512 (group_list -> group_item .)
    ,               shift and go to state 822


state 794

    (141) limit -> ( NUMBER ) .

    NULL            reduce using rule 141 (limit -> ( NUMBER ) .)
    NOT             reduce using rule 141 (limit -> ( NUMBER ) .)
    DEFAULT         reduce using rule 141 (limit -> ( NUMBER ) .)
    AUTO_INCREMENT  reduce using rule 141 (limit -> ( NUMBER ) .)
    UNIQUE          reduce using rule 141 (limit -> ( NUMBER ) .)
    KEY             reduce using rule 141 (limit -> ( NUMBER ) .)
    PRIMARY         reduce using rule 141 (limit -> ( NUMBER ) .)
    CHARACTER       reduce using rule 141 (limit -> ( NUMBER ) .)
    COLLATE         reduce using rule 141 (limit -> ( NUMBER ) .)
    FIRST           reduce using rule 141 (limit -> ( NUMBER ) .)
    AFTER           reduce using rule 141 (limit -> ( NUMBER ) .)
    ,               reduce using rule 141 (limit -> ( NUMBER ) .)
    DELIM           reduce using rule 141 (limit -> ( NUMBER ) .)
    ;               reduce using rule 141 (limit -> ( NUMBER ) .)
    )               reduce using rule 141 (limit -> ( NUMBER ) .)
    UNSIGNED        reduce using rule 141 (limit -> ( NUMBER ) .)


state 795

    (144) bidimensional_limit -> ( NUMBER , . NUMBER )

    NUMBER          shift and go to state 823


state 796

    (145) charset_statement -> CHARACTER SET IDENT .

    NULL            reduce using rule 145 (charset_statement -> CHARACTER SET IDENT .)
    NOT             reduce using rule 145 (charset_statement -> CHARACTER SET IDENT .)
    DEFAULT         reduce using rule 145 (charset_statement -> CHARACTER SET IDENT .)
    AUTO_INCREMENT  reduce using rule 145 (charset_statement -> CHARACTER SET IDENT .)
    UNIQUE          reduce using rule 145 (charset_statement -> CHARACTER SET IDENT .)
    KEY             reduce using rule 145 (charset_statement -> CHARACTER SET IDENT .)
    PRIMARY         reduce using rule 145 (charset_statement -> CHARACTER SET IDENT .)
    CHARACTER       reduce using rule 145 (charset_statement -> CHARACTER SET IDENT .)
    COLLATE         reduce using rule 145 (charset_statement -> CHARACTER SET IDENT .)
    FIRST           reduce using rule 145 (charset_statement -> CHARACTER SET IDENT .)
    AFTER           reduce using rule 145 (charset_statement -> CHARACTER SET IDENT .)
    ,               reduce using rule 145 (charset_statement -> CHARACTER SET IDENT .)
    DELIM           reduce using rule 145 (charset_statement -> CHARACTER SET IDENT .)
    ;               reduce using rule 145 (charset_statement -> CHARACTER SET IDENT .)
    )               reduce using rule 145 (charset_statement -> CHARACTER SET IDENT .)


state 797

    (122) column_names -> column_name , column_names .

    )               reduce using rule 122 (column_names -> column_name , column_names .)


state 798

    (229) add_primary_key -> ADD constraint_opt PRIMARY KEY ( column_names ) .

    ,               reduce using rule 229 (add_primary_key -> ADD constraint_opt PRIMARY KEY ( column_names ) .)
    DELIM           reduce using rule 229 (add_primary_key -> ADD constraint_opt PRIMARY KEY ( column_names ) .)
    ;               reduce using rule 229 (add_primary_key -> ADD constraint_opt PRIMARY KEY ( column_names ) .)


state 799

    (228) add_index -> ADD constraint_opt UNIQUE ignore_index_or_key index_name_opt ( column_names . )

    )               shift and go to state 824


state 800

    (259) insert_update_elem -> simple_ident_nospvar . equal expr_or_default
    (256) equal -> . EQ
    (257) equal -> . SET_VAR

    EQ              shift and go to state 457
    SET_VAR         shift and go to state 459

    equal                          shift and go to state 825

state 801

    (262) opt_insert_update -> ON DUPLICATE KEY UPDATE insert_update_list .

    DELIM           reduce using rule 262 (opt_insert_update -> ON DUPLICATE KEY UPDATE insert_update_list .)
    ;               reduce using rule 262 (opt_insert_update -> ON DUPLICATE KEY UPDATE insert_update_list .)


state 802

    (260) insert_update_list -> insert_update_elem .
    (261) insert_update_list -> insert_update_elem . , insert_update_list

    DELIM           reduce using rule 260 (insert_update_list -> insert_update_elem .)
    ;               reduce using rule 260 (insert_update_list -> insert_update_elem .)
    ,               shift and go to state 826


state 803

    (124) index_statement -> INDEX IDENT ( column_names ) .

    ,               reduce using rule 124 (index_statement -> INDEX IDENT ( column_names ) .)
    )               reduce using rule 124 (index_statement -> INDEX IDENT ( column_names ) .)


state 804

    (123) primary_key_statement -> constraint_opt PRIMARY KEY ( column_names . )

    )               shift and go to state 827


state 805

    (128) unique_statement -> constraint_opt UNIQUE ignore_index_or_key index_name_opt ( . column_names )
    (121) column_names -> . column_name
    (122) column_names -> . column_name , column_names
    (120) column_name -> . IDENT

    IDENT           shift and go to state 428

    column_names                   shift and go to state 828
    column_name                    shift and go to state 695

state 806

    (202) table_option -> ENGINE ignore_eq IDENT .

    ,               reduce using rule 202 (table_option -> ENGINE ignore_eq IDENT .)
    ENGINE          reduce using rule 202 (table_option -> ENGINE ignore_eq IDENT .)
    AUTO_INCREMENT  reduce using rule 202 (table_option -> ENGINE ignore_eq IDENT .)
    DEFAULT         reduce using rule 202 (table_option -> ENGINE ignore_eq IDENT .)
    CHARACTER       reduce using rule 202 (table_option -> ENGINE ignore_eq IDENT .)
    CHARSET         reduce using rule 202 (table_option -> ENGINE ignore_eq IDENT .)
    COLLATE         reduce using rule 202 (table_option -> ENGINE ignore_eq IDENT .)
    DELIM           reduce using rule 202 (table_option -> ENGINE ignore_eq IDENT .)
    ;               reduce using rule 202 (table_option -> ENGINE ignore_eq IDENT .)


state 807

    (210) table_options -> table_option ignore_comma table_options .

    DELIM           reduce using rule 210 (table_options -> table_option ignore_comma table_options .)
    ;               reduce using rule 210 (table_options -> table_option ignore_comma table_options .)


state 808

    (203) table_option -> AUTO_INCREMENT ignore_eq NUMBER .

    ,               reduce using rule 203 (table_option -> AUTO_INCREMENT ignore_eq NUMBER .)
    ENGINE          reduce using rule 203 (table_option -> AUTO_INCREMENT ignore_eq NUMBER .)
    AUTO_INCREMENT  reduce using rule 203 (table_option -> AUTO_INCREMENT ignore_eq NUMBER .)
    DEFAULT         reduce using rule 203 (table_option -> AUTO_INCREMENT ignore_eq NUMBER .)
    CHARACTER       reduce using rule 203 (table_option -> AUTO_INCREMENT ignore_eq NUMBER .)
    CHARSET         reduce using rule 203 (table_option -> AUTO_INCREMENT ignore_eq NUMBER .)
    COLLATE         reduce using rule 203 (table_option -> AUTO_INCREMENT ignore_eq NUMBER .)
    DELIM           reduce using rule 203 (table_option -> AUTO_INCREMENT ignore_eq NUMBER .)
    ;               reduce using rule 203 (table_option -> AUTO_INCREMENT ignore_eq NUMBER .)


state 809

    (205) table_option -> ignore_default CHARSET ignore_eq . IDENT

    IDENT           shift and go to state 829


state 810

    (204) table_option -> ignore_default CHARACTER SET . ignore_eq IDENT
    (102) ignore_eq -> . EQ
    (103) ignore_eq -> .

    EQ              shift and go to state 774
    IDENT           reduce using rule 103 (ignore_eq -> .)

    ignore_eq                      shift and go to state 830

state 811

    (206) table_option -> ignore_default COLLATE ignore_eq . IDENT

    IDENT           shift and go to state 831


state 812

    (125) index_statement -> KEY IDENT ( column_names ) .

    ,               reduce using rule 125 (index_statement -> KEY IDENT ( column_names ) .)
    )               reduce using rule 125 (index_statement -> KEY IDENT ( column_names ) .)


state 813

    (418) create_trigger -> CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW . sp_proc_stmt
    (400) sp_proc_stmt -> . sp_proc_stmt_statement
    (401) sp_proc_stmt -> . sp_proc_stmt_return
    (402) sp_proc_stmt -> . sp_proc_stmt_if
    (403) sp_proc_stmt -> . case_stmt_specification
    (404) sp_proc_stmt -> . sp_labeled_block
    (405) sp_proc_stmt -> . sp_unlabeled_block
    (406) sp_proc_stmt -> . sp_labeled_control
    (407) sp_proc_stmt -> . sp_proc_stmt_unlabeled
    (408) sp_proc_stmt -> . sp_proc_stmt_leave
    (409) sp_proc_stmt -> . sp_proc_stmt_iterate
    (410) sp_proc_stmt -> . sp_proc_stmt_open
    (411) sp_proc_stmt -> . sp_proc_stmt_fetch
    (412) sp_proc_stmt -> . sp_proc_stmt_close
    (346) sp_proc_stmt_statement -> . statement
    (347) sp_proc_stmt_return -> . RETURN expr
    (354) sp_proc_stmt_if -> . IF sp_if END IF
    (365) case_stmt_specification -> . simple_case_stmt
    (366) case_stmt_specification -> . searched_case_stmt
    (383) sp_labeled_block -> . IDENT : sp_block_content sp_opt_label
    (384) sp_unlabeled_block -> . sp_block_content
    (388) sp_labeled_control -> . IDENT : sp_unlabeled_control sp_opt_label
    (389) sp_proc_stmt_unlabeled -> . sp_unlabeled_control
    (390) sp_proc_stmt_leave -> . LEAVE IDENT
    (391) sp_proc_stmt_iterate -> . ITERATE IDENT
    (392) sp_proc_stmt_open -> . OPEN IDENT
    (398) sp_proc_stmt_fetch -> . FETCH ignore_fetch_noise IDENT INTO sp_ident_list
    (399) sp_proc_stmt_close -> . CLOSE IDENT
    (551) statement -> . alter_table
    (552) statement -> . create_table
    (553) statement -> . create_trigger
    (554) statement -> . create_view
    (555) statement -> . create_index
    (556) statement -> . delete
    (557) statement -> . drop_table
    (558) statement -> . drop_trigger
    (559) statement -> . drop_view
    (560) statement -> . insert
    (561) statement -> . replace
    (562) statement -> . optimize_table
    (563) statement -> . rename_table
    (564) statement -> . select
    (565) statement -> . set
    (566) statement -> . update
    (567) statement -> . start_transaction
    (568) statement -> . commit
    (569) statement -> . rollback
    (360) simple_case_stmt -> . CASE expr simple_when_clause_list else_clause_opt END CASE
    (364) searched_case_stmt -> . CASE searched_when_clause_list else_clause_opt END CASE
    (380) sp_block_content -> . BEGIN sp_decls sp_proc_stmts END
    (385) sp_unlabeled_control -> . LOOP sp_proc_stmts1 END LOOP
    (386) sp_unlabeled_control -> . WHILE expr DO sp_proc_stmts1 END WHILE
    (387) sp_unlabeled_control -> . REPEAT sp_proc_stmts1 UNTIL expr END REPEAT
    (249) alter_table -> . ALTER TABLE IDENT alter_specifications
    (213) create_table -> . CREATE TABLE if_not_exists IDENT ( create_statements ) table_options_opt
    (418) create_trigger -> . CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt
    (530) create_view -> . CREATE VIEW IDENT AS select
    (535) create_index -> . CREATE unique_opt INDEX IDENT ON IDENT ( ident_list )
    (340) delete -> . DELETE delete_options FROM IDENT where rows_limit
    (341) delete -> . DELETE delete_options ident_list FROM where
    (221) drop_table -> . DROP temporary TABLE if_exists ident_list opt_restrict_cascade
    (531) drop_trigger -> . DROP TRIGGER if_exists IDENT
    (536) drop_view -> . DROP VIEW if_exists ident_list opt_restrict_cascade
    (319) insert -> . INSERT insert_lock_option opt_ignore insert2 insert_field_spec opt_insert_update
    (324) replace -> . REPLACE replace_lock_option insert2 insert_field_spec
    (532) optimize_table -> . OPTIMIZE TABLE ident_list
    (345) rename_table -> . RENAME TABLE rename_tables
    (523) select -> . top_level_select_init
    (529) set -> . SET variable_assignments
    (334) update -> . UPDATE ident_list SET key_values where rows_limit
    (541) start_transaction -> . START TRANSACTION opt_with_consistent_snapshot
    (542) start_transaction -> . BEGIN opt_work
    (549) commit -> . COMMIT opt_work opt_chain opt_release
    (550) rollback -> . ROLLBACK opt_work opt_chain opt_release
    (522) top_level_select_init -> . SELECT select_init2

    RETURN          shift and go to state 835
    IF              shift and go to state 862
    IDENT           shift and go to state 837
    LEAVE           shift and go to state 836
    ITERATE         shift and go to state 860
    OPEN            shift and go to state 849
    FETCH           shift and go to state 850
    CLOSE           shift and go to state 856
    CASE            shift and go to state 851
    BEGIN           shift and go to state 838
    LOOP            shift and go to state 834
    WHILE           shift and go to state 848
    REPEAT          shift and go to state 841
    ALTER           shift and go to state 8
    CREATE          shift and go to state 16
    DELETE          shift and go to state 5
    DROP            shift and go to state 17
    INSERT          shift and go to state 11
    REPLACE         shift and go to state 20
    OPTIMIZE        shift and go to state 4
    RENAME          shift and go to state 1
    SET             shift and go to state 13
    UPDATE          shift and go to state 29
    START           shift and go to state 30
    COMMIT          shift and go to state 32
    ROLLBACK        shift and go to state 36
    SELECT          shift and go to state 24

    sp_unlabeled_control           shift and go to state 861
    set                            shift and go to state 2
    sp_proc_stmt_leave             shift and go to state 846
    sp_proc_stmt                   shift and go to state 847
    select                         shift and go to state 9
    drop_table                     shift and go to state 7
    simple_case_stmt               shift and go to state 863
    rename_table                   shift and go to state 10
    sp_proc_stmt_statement         shift and go to state 852
    drop_view                      shift and go to state 14
    drop_trigger                   shift and go to state 15
    sp_labeled_control             shift and go to state 845
    optimize_table                 shift and go to state 39
    sp_proc_stmt_open              shift and go to state 858
    sp_proc_stmt_iterate           shift and go to state 853
    alter_table                    shift and go to state 35
    statement                      shift and go to state 854
    sp_labeled_block               shift and go to state 859
    sp_proc_stmt_if                shift and go to state 840
    create_table                   shift and go to state 21
    sp_proc_stmt_unlabeled         shift and go to state 832
    top_level_select_init          shift and go to state 27
    rollback                       shift and go to state 25
    insert                         shift and go to state 26
    sp_proc_stmt_return            shift and go to state 842
    update                         shift and go to state 28
    searched_case_stmt             shift and go to state 855
    sp_block_content               shift and go to state 833
    start_transaction              shift and go to state 23
    replace                        shift and go to state 6
    create_index                   shift and go to state 33
    create_trigger                 shift and go to state 34
    sp_proc_stmt_close             shift and go to state 843
    case_stmt_specification        shift and go to state 844
    sp_unlabeled_block             shift and go to state 857
    create_view                    shift and go to state 38
    sp_proc_stmt_fetch             shift and go to state 839
    commit                         shift and go to state 40
    delete                         shift and go to state 41

state 814

    (497) join_condition -> USING ( ident_list . )

    )               shift and go to state 864


state 815

    (469) index_hint_clause -> FOR GROUP . BY

    BY              shift and go to state 865


state 816

    (467) index_hint_clause -> FOR JOIN .

    (               reduce using rule 467 (index_hint_clause -> FOR JOIN .)


state 817

    (468) index_hint_clause -> FOR ORDER . BY

    BY              shift and go to state 866


state 818

    (479) index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( . opt_key_usage_list )
    (473) opt_key_usage_list -> .
    (474) opt_key_usage_list -> . key_usage_list
    (477) key_usage_list -> . key_usage_element
    (478) key_usage_list -> . key_usage_element , key_usage_list
    (475) key_usage_element -> . IDENT
    (476) key_usage_element -> . PRIMARY

    )               reduce using rule 473 (opt_key_usage_list -> .)
    IDENT           shift and go to state 868
    PRIMARY         shift and go to state 869

    key_usage_element              shift and go to state 867
    opt_key_usage_list             shift and go to state 870
    key_usage_list                 shift and go to state 871

state 819

    (517) select_from -> FROM join_table_list where_clause group_clause having_clause opt_order_clause opt_limit_clause .

    FOR             reduce using rule 517 (select_from -> FROM join_table_list where_clause group_clause having_clause opt_order_clause opt_limit_clause .)
    LOCK            reduce using rule 517 (select_from -> FROM join_table_list where_clause group_clause having_clause opt_order_clause opt_limit_clause .)
    UNION           reduce using rule 517 (select_from -> FROM join_table_list where_clause group_clause having_clause opt_order_clause opt_limit_clause .)
    DELIM           reduce using rule 517 (select_from -> FROM join_table_list where_clause group_clause having_clause opt_order_clause opt_limit_clause .)
    ;               reduce using rule 517 (select_from -> FROM join_table_list where_clause group_clause having_clause opt_order_clause opt_limit_clause .)
    ON              reduce using rule 517 (select_from -> FROM join_table_list where_clause group_clause having_clause opt_order_clause opt_limit_clause .)
    )               reduce using rule 517 (select_from -> FROM join_table_list where_clause group_clause having_clause opt_order_clause opt_limit_clause .)
    INTO            reduce using rule 517 (select_from -> FROM join_table_list where_clause group_clause having_clause opt_order_clause opt_limit_clause .)


state 820

    (514) group_clause -> GROUP BY group_list olap_opt .

    HAVING          reduce using rule 514 (group_clause -> GROUP BY group_list olap_opt .)
    ORDER           reduce using rule 514 (group_clause -> GROUP BY group_list olap_opt .)
    LIMIT           reduce using rule 514 (group_clause -> GROUP BY group_list olap_opt .)
    INTO            reduce using rule 514 (group_clause -> GROUP BY group_list olap_opt .)
    FOR             reduce using rule 514 (group_clause -> GROUP BY group_list olap_opt .)
    LOCK            reduce using rule 514 (group_clause -> GROUP BY group_list olap_opt .)
    UNION           reduce using rule 514 (group_clause -> GROUP BY group_list olap_opt .)
    DELIM           reduce using rule 514 (group_clause -> GROUP BY group_list olap_opt .)
    ;               reduce using rule 514 (group_clause -> GROUP BY group_list olap_opt .)
    )               reduce using rule 514 (group_clause -> GROUP BY group_list olap_opt .)
    ON              reduce using rule 514 (group_clause -> GROUP BY group_list olap_opt .)


state 821

    (509) olap_opt -> WITH . CUBE
    (510) olap_opt -> WITH . ROLLUP

    CUBE            shift and go to state 873
    ROLLUP          shift and go to state 872


state 822

    (513) group_list -> group_item , . group_list
    (512) group_list -> . group_item
    (513) group_list -> . group_item , group_list
    (511) group_item -> . order_item
    (442) order_item -> . order_ident order_dir
    (438) order_ident -> . expr
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    group_list                     shift and go to state 874
    average_function               shift and go to state 130
    min_function                   shift and go to state 152
    order_item                     shift and go to state 792
    cast_function                  shift and go to state 125
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    group_item                     shift and go to state 793
    max_function                   shift and go to state 149
    function_call                  shift and go to state 128
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 498
    simple_expr                    shift and go to state 131
    order_ident                    shift and go to state 499

state 823

    (144) bidimensional_limit -> ( NUMBER , NUMBER . )

    )               shift and go to state 875


state 824

    (228) add_index -> ADD constraint_opt UNIQUE ignore_index_or_key index_name_opt ( column_names ) .

    ,               reduce using rule 228 (add_index -> ADD constraint_opt UNIQUE ignore_index_or_key index_name_opt ( column_names ) .)
    DELIM           reduce using rule 228 (add_index -> ADD constraint_opt UNIQUE ignore_index_or_key index_name_opt ( column_names ) .)
    ;               reduce using rule 228 (add_index -> ADD constraint_opt UNIQUE ignore_index_or_key index_name_opt ( column_names ) .)


state 825

    (259) insert_update_elem -> simple_ident_nospvar equal . expr_or_default
    (254) expr_or_default -> . expr
    (255) expr_or_default -> . DEFAULT
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    DEFAULT         shift and go to state 462
    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    bit_function                   shift and go to state 153
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    average_function               shift and go to state 130
    other_function                 shift and go to state 154
    expr                           shift and go to state 464
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149
    expr_or_default                shift and go to state 876

state 826

    (261) insert_update_list -> insert_update_elem , . insert_update_list
    (260) insert_update_list -> . insert_update_elem
    (261) insert_update_list -> . insert_update_elem , insert_update_list
    (259) insert_update_elem -> . simple_ident_nospvar equal expr_or_default
    (258) simple_ident_nospvar -> . IDENT

    IDENT           shift and go to state 330

    insert_update_list             shift and go to state 877
    insert_update_elem             shift and go to state 802
    simple_ident_nospvar           shift and go to state 800

state 827

    (123) primary_key_statement -> constraint_opt PRIMARY KEY ( column_names ) .

    ,               reduce using rule 123 (primary_key_statement -> constraint_opt PRIMARY KEY ( column_names ) .)
    )               reduce using rule 123 (primary_key_statement -> constraint_opt PRIMARY KEY ( column_names ) .)


state 828

    (128) unique_statement -> constraint_opt UNIQUE ignore_index_or_key index_name_opt ( column_names . )

    )               shift and go to state 878


state 829

    (205) table_option -> ignore_default CHARSET ignore_eq IDENT .

    ,               reduce using rule 205 (table_option -> ignore_default CHARSET ignore_eq IDENT .)
    ENGINE          reduce using rule 205 (table_option -> ignore_default CHARSET ignore_eq IDENT .)
    AUTO_INCREMENT  reduce using rule 205 (table_option -> ignore_default CHARSET ignore_eq IDENT .)
    DEFAULT         reduce using rule 205 (table_option -> ignore_default CHARSET ignore_eq IDENT .)
    CHARACTER       reduce using rule 205 (table_option -> ignore_default CHARSET ignore_eq IDENT .)
    CHARSET         reduce using rule 205 (table_option -> ignore_default CHARSET ignore_eq IDENT .)
    COLLATE         reduce using rule 205 (table_option -> ignore_default CHARSET ignore_eq IDENT .)
    DELIM           reduce using rule 205 (table_option -> ignore_default CHARSET ignore_eq IDENT .)
    ;               reduce using rule 205 (table_option -> ignore_default CHARSET ignore_eq IDENT .)


state 830

    (204) table_option -> ignore_default CHARACTER SET ignore_eq . IDENT

    IDENT           shift and go to state 879


state 831

    (206) table_option -> ignore_default COLLATE ignore_eq IDENT .

    ,               reduce using rule 206 (table_option -> ignore_default COLLATE ignore_eq IDENT .)
    ENGINE          reduce using rule 206 (table_option -> ignore_default COLLATE ignore_eq IDENT .)
    AUTO_INCREMENT  reduce using rule 206 (table_option -> ignore_default COLLATE ignore_eq IDENT .)
    DEFAULT         reduce using rule 206 (table_option -> ignore_default COLLATE ignore_eq IDENT .)
    CHARACTER       reduce using rule 206 (table_option -> ignore_default COLLATE ignore_eq IDENT .)
    CHARSET         reduce using rule 206 (table_option -> ignore_default COLLATE ignore_eq IDENT .)
    COLLATE         reduce using rule 206 (table_option -> ignore_default COLLATE ignore_eq IDENT .)
    DELIM           reduce using rule 206 (table_option -> ignore_default COLLATE ignore_eq IDENT .)
    ;               reduce using rule 206 (table_option -> ignore_default COLLATE ignore_eq IDENT .)


state 832

    (407) sp_proc_stmt -> sp_proc_stmt_unlabeled .

    DELIM           reduce using rule 407 (sp_proc_stmt -> sp_proc_stmt_unlabeled .)
    ;               reduce using rule 407 (sp_proc_stmt -> sp_proc_stmt_unlabeled .)


state 833

    (384) sp_unlabeled_block -> sp_block_content .

    DELIM           reduce using rule 384 (sp_unlabeled_block -> sp_block_content .)
    ;               reduce using rule 384 (sp_unlabeled_block -> sp_block_content .)


state 834

    (385) sp_unlabeled_control -> LOOP . sp_proc_stmts1 END LOOP
    (348) sp_proc_stmts1 -> . sp_proc_stmt delim
    (349) sp_proc_stmts1 -> . sp_proc_stmt delim sp_proc_stmts1
    (400) sp_proc_stmt -> . sp_proc_stmt_statement
    (401) sp_proc_stmt -> . sp_proc_stmt_return
    (402) sp_proc_stmt -> . sp_proc_stmt_if
    (403) sp_proc_stmt -> . case_stmt_specification
    (404) sp_proc_stmt -> . sp_labeled_block
    (405) sp_proc_stmt -> . sp_unlabeled_block
    (406) sp_proc_stmt -> . sp_labeled_control
    (407) sp_proc_stmt -> . sp_proc_stmt_unlabeled
    (408) sp_proc_stmt -> . sp_proc_stmt_leave
    (409) sp_proc_stmt -> . sp_proc_stmt_iterate
    (410) sp_proc_stmt -> . sp_proc_stmt_open
    (411) sp_proc_stmt -> . sp_proc_stmt_fetch
    (412) sp_proc_stmt -> . sp_proc_stmt_close
    (346) sp_proc_stmt_statement -> . statement
    (347) sp_proc_stmt_return -> . RETURN expr
    (354) sp_proc_stmt_if -> . IF sp_if END IF
    (365) case_stmt_specification -> . simple_case_stmt
    (366) case_stmt_specification -> . searched_case_stmt
    (383) sp_labeled_block -> . IDENT : sp_block_content sp_opt_label
    (384) sp_unlabeled_block -> . sp_block_content
    (388) sp_labeled_control -> . IDENT : sp_unlabeled_control sp_opt_label
    (389) sp_proc_stmt_unlabeled -> . sp_unlabeled_control
    (390) sp_proc_stmt_leave -> . LEAVE IDENT
    (391) sp_proc_stmt_iterate -> . ITERATE IDENT
    (392) sp_proc_stmt_open -> . OPEN IDENT
    (398) sp_proc_stmt_fetch -> . FETCH ignore_fetch_noise IDENT INTO sp_ident_list
    (399) sp_proc_stmt_close -> . CLOSE IDENT
    (551) statement -> . alter_table
    (552) statement -> . create_table
    (553) statement -> . create_trigger
    (554) statement -> . create_view
    (555) statement -> . create_index
    (556) statement -> . delete
    (557) statement -> . drop_table
    (558) statement -> . drop_trigger
    (559) statement -> . drop_view
    (560) statement -> . insert
    (561) statement -> . replace
    (562) statement -> . optimize_table
    (563) statement -> . rename_table
    (564) statement -> . select
    (565) statement -> . set
    (566) statement -> . update
    (567) statement -> . start_transaction
    (568) statement -> . commit
    (569) statement -> . rollback
    (360) simple_case_stmt -> . CASE expr simple_when_clause_list else_clause_opt END CASE
    (364) searched_case_stmt -> . CASE searched_when_clause_list else_clause_opt END CASE
    (380) sp_block_content -> . BEGIN sp_decls sp_proc_stmts END
    (385) sp_unlabeled_control -> . LOOP sp_proc_stmts1 END LOOP
    (386) sp_unlabeled_control -> . WHILE expr DO sp_proc_stmts1 END WHILE
    (387) sp_unlabeled_control -> . REPEAT sp_proc_stmts1 UNTIL expr END REPEAT
    (249) alter_table -> . ALTER TABLE IDENT alter_specifications
    (213) create_table -> . CREATE TABLE if_not_exists IDENT ( create_statements ) table_options_opt
    (418) create_trigger -> . CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt
    (530) create_view -> . CREATE VIEW IDENT AS select
    (535) create_index -> . CREATE unique_opt INDEX IDENT ON IDENT ( ident_list )
    (340) delete -> . DELETE delete_options FROM IDENT where rows_limit
    (341) delete -> . DELETE delete_options ident_list FROM where
    (221) drop_table -> . DROP temporary TABLE if_exists ident_list opt_restrict_cascade
    (531) drop_trigger -> . DROP TRIGGER if_exists IDENT
    (536) drop_view -> . DROP VIEW if_exists ident_list opt_restrict_cascade
    (319) insert -> . INSERT insert_lock_option opt_ignore insert2 insert_field_spec opt_insert_update
    (324) replace -> . REPLACE replace_lock_option insert2 insert_field_spec
    (532) optimize_table -> . OPTIMIZE TABLE ident_list
    (345) rename_table -> . RENAME TABLE rename_tables
    (523) select -> . top_level_select_init
    (529) set -> . SET variable_assignments
    (334) update -> . UPDATE ident_list SET key_values where rows_limit
    (541) start_transaction -> . START TRANSACTION opt_with_consistent_snapshot
    (542) start_transaction -> . BEGIN opt_work
    (549) commit -> . COMMIT opt_work opt_chain opt_release
    (550) rollback -> . ROLLBACK opt_work opt_chain opt_release
    (522) top_level_select_init -> . SELECT select_init2

    RETURN          shift and go to state 835
    IF              shift and go to state 862
    IDENT           shift and go to state 837
    LEAVE           shift and go to state 836
    ITERATE         shift and go to state 860
    OPEN            shift and go to state 849
    FETCH           shift and go to state 850
    CLOSE           shift and go to state 856
    CASE            shift and go to state 851
    BEGIN           shift and go to state 838
    LOOP            shift and go to state 834
    WHILE           shift and go to state 848
    REPEAT          shift and go to state 841
    ALTER           shift and go to state 8
    CREATE          shift and go to state 16
    DELETE          shift and go to state 5
    DROP            shift and go to state 17
    INSERT          shift and go to state 11
    REPLACE         shift and go to state 20
    OPTIMIZE        shift and go to state 4
    RENAME          shift and go to state 1
    SET             shift and go to state 13
    UPDATE          shift and go to state 29
    START           shift and go to state 30
    COMMIT          shift and go to state 32
    ROLLBACK        shift and go to state 36
    SELECT          shift and go to state 24

    sp_unlabeled_control           shift and go to state 861
    set                            shift and go to state 2
    sp_proc_stmt_leave             shift and go to state 846
    sp_proc_stmt                   shift and go to state 880
    select                         shift and go to state 9
    sp_proc_stmts1                 shift and go to state 881
    drop_table                     shift and go to state 7
    simple_case_stmt               shift and go to state 863
    rename_table                   shift and go to state 10
    sp_proc_stmt_statement         shift and go to state 852
    drop_view                      shift and go to state 14
    drop_trigger                   shift and go to state 15
    sp_labeled_control             shift and go to state 845
    optimize_table                 shift and go to state 39
    sp_proc_stmt_open              shift and go to state 858
    sp_proc_stmt_iterate           shift and go to state 853
    alter_table                    shift and go to state 35
    statement                      shift and go to state 854
    sp_labeled_block               shift and go to state 859
    sp_proc_stmt_if                shift and go to state 840
    create_table                   shift and go to state 21
    sp_proc_stmt_unlabeled         shift and go to state 832
    top_level_select_init          shift and go to state 27
    rollback                       shift and go to state 25
    insert                         shift and go to state 26
    sp_proc_stmt_return            shift and go to state 842
    update                         shift and go to state 28
    searched_case_stmt             shift and go to state 855
    sp_block_content               shift and go to state 833
    start_transaction              shift and go to state 23
    replace                        shift and go to state 6
    create_index                   shift and go to state 33
    create_trigger                 shift and go to state 34
    sp_proc_stmt_close             shift and go to state 843
    case_stmt_specification        shift and go to state 844
    sp_unlabeled_block             shift and go to state 857
    create_view                    shift and go to state 38
    sp_proc_stmt_fetch             shift and go to state 839
    commit                         shift and go to state 40
    delete                         shift and go to state 41

state 835

    (347) sp_proc_stmt_return -> RETURN . expr
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 882
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 836

    (390) sp_proc_stmt_leave -> LEAVE . IDENT

    IDENT           shift and go to state 883


state 837

    (383) sp_labeled_block -> IDENT . : sp_block_content sp_opt_label
    (388) sp_labeled_control -> IDENT . : sp_unlabeled_control sp_opt_label

    :               shift and go to state 884


state 838

    (380) sp_block_content -> BEGIN . sp_decls sp_proc_stmts END
    (542) start_transaction -> BEGIN . opt_work
    (367) sp_decls -> .
    (368) sp_decls -> . sp_decl delim sp_decls
    (537) opt_work -> . WORK
    (538) opt_work -> .
    (377) sp_decl -> . DECLARE sp_ident_list sp_type_with_opt_collate sp_opt_default

    RETURN          reduce using rule 367 (sp_decls -> .)
    IF              reduce using rule 367 (sp_decls -> .)
    IDENT           reduce using rule 367 (sp_decls -> .)
    LEAVE           reduce using rule 367 (sp_decls -> .)
    ITERATE         reduce using rule 367 (sp_decls -> .)
    OPEN            reduce using rule 367 (sp_decls -> .)
    FETCH           reduce using rule 367 (sp_decls -> .)
    CLOSE           reduce using rule 367 (sp_decls -> .)
    CASE            reduce using rule 367 (sp_decls -> .)
    BEGIN           reduce using rule 367 (sp_decls -> .)
    LOOP            reduce using rule 367 (sp_decls -> .)
    WHILE           reduce using rule 367 (sp_decls -> .)
    REPEAT          reduce using rule 367 (sp_decls -> .)
    ALTER           reduce using rule 367 (sp_decls -> .)
    CREATE          reduce using rule 367 (sp_decls -> .)
    DELETE          reduce using rule 367 (sp_decls -> .)
    DROP            reduce using rule 367 (sp_decls -> .)
    INSERT          reduce using rule 367 (sp_decls -> .)
    REPLACE         reduce using rule 367 (sp_decls -> .)
    OPTIMIZE        reduce using rule 367 (sp_decls -> .)
    RENAME          reduce using rule 367 (sp_decls -> .)
    SET             reduce using rule 367 (sp_decls -> .)
    UPDATE          reduce using rule 367 (sp_decls -> .)
    START           reduce using rule 367 (sp_decls -> .)
    COMMIT          reduce using rule 367 (sp_decls -> .)
    ROLLBACK        reduce using rule 367 (sp_decls -> .)
    SELECT          reduce using rule 367 (sp_decls -> .)
    END             reduce using rule 367 (sp_decls -> .)
    WORK            shift and go to state 54
    DELIM           reduce using rule 538 (opt_work -> .)
    ;               reduce using rule 538 (opt_work -> .)
    DECLARE         shift and go to state 887

    opt_work                       shift and go to state 55
    sp_decls                       shift and go to state 885
    sp_decl                        shift and go to state 886

state 839

    (411) sp_proc_stmt -> sp_proc_stmt_fetch .

    DELIM           reduce using rule 411 (sp_proc_stmt -> sp_proc_stmt_fetch .)
    ;               reduce using rule 411 (sp_proc_stmt -> sp_proc_stmt_fetch .)


state 840

    (402) sp_proc_stmt -> sp_proc_stmt_if .

    DELIM           reduce using rule 402 (sp_proc_stmt -> sp_proc_stmt_if .)
    ;               reduce using rule 402 (sp_proc_stmt -> sp_proc_stmt_if .)


state 841

    (387) sp_unlabeled_control -> REPEAT . sp_proc_stmts1 UNTIL expr END REPEAT
    (348) sp_proc_stmts1 -> . sp_proc_stmt delim
    (349) sp_proc_stmts1 -> . sp_proc_stmt delim sp_proc_stmts1
    (400) sp_proc_stmt -> . sp_proc_stmt_statement
    (401) sp_proc_stmt -> . sp_proc_stmt_return
    (402) sp_proc_stmt -> . sp_proc_stmt_if
    (403) sp_proc_stmt -> . case_stmt_specification
    (404) sp_proc_stmt -> . sp_labeled_block
    (405) sp_proc_stmt -> . sp_unlabeled_block
    (406) sp_proc_stmt -> . sp_labeled_control
    (407) sp_proc_stmt -> . sp_proc_stmt_unlabeled
    (408) sp_proc_stmt -> . sp_proc_stmt_leave
    (409) sp_proc_stmt -> . sp_proc_stmt_iterate
    (410) sp_proc_stmt -> . sp_proc_stmt_open
    (411) sp_proc_stmt -> . sp_proc_stmt_fetch
    (412) sp_proc_stmt -> . sp_proc_stmt_close
    (346) sp_proc_stmt_statement -> . statement
    (347) sp_proc_stmt_return -> . RETURN expr
    (354) sp_proc_stmt_if -> . IF sp_if END IF
    (365) case_stmt_specification -> . simple_case_stmt
    (366) case_stmt_specification -> . searched_case_stmt
    (383) sp_labeled_block -> . IDENT : sp_block_content sp_opt_label
    (384) sp_unlabeled_block -> . sp_block_content
    (388) sp_labeled_control -> . IDENT : sp_unlabeled_control sp_opt_label
    (389) sp_proc_stmt_unlabeled -> . sp_unlabeled_control
    (390) sp_proc_stmt_leave -> . LEAVE IDENT
    (391) sp_proc_stmt_iterate -> . ITERATE IDENT
    (392) sp_proc_stmt_open -> . OPEN IDENT
    (398) sp_proc_stmt_fetch -> . FETCH ignore_fetch_noise IDENT INTO sp_ident_list
    (399) sp_proc_stmt_close -> . CLOSE IDENT
    (551) statement -> . alter_table
    (552) statement -> . create_table
    (553) statement -> . create_trigger
    (554) statement -> . create_view
    (555) statement -> . create_index
    (556) statement -> . delete
    (557) statement -> . drop_table
    (558) statement -> . drop_trigger
    (559) statement -> . drop_view
    (560) statement -> . insert
    (561) statement -> . replace
    (562) statement -> . optimize_table
    (563) statement -> . rename_table
    (564) statement -> . select
    (565) statement -> . set
    (566) statement -> . update
    (567) statement -> . start_transaction
    (568) statement -> . commit
    (569) statement -> . rollback
    (360) simple_case_stmt -> . CASE expr simple_when_clause_list else_clause_opt END CASE
    (364) searched_case_stmt -> . CASE searched_when_clause_list else_clause_opt END CASE
    (380) sp_block_content -> . BEGIN sp_decls sp_proc_stmts END
    (385) sp_unlabeled_control -> . LOOP sp_proc_stmts1 END LOOP
    (386) sp_unlabeled_control -> . WHILE expr DO sp_proc_stmts1 END WHILE
    (387) sp_unlabeled_control -> . REPEAT sp_proc_stmts1 UNTIL expr END REPEAT
    (249) alter_table -> . ALTER TABLE IDENT alter_specifications
    (213) create_table -> . CREATE TABLE if_not_exists IDENT ( create_statements ) table_options_opt
    (418) create_trigger -> . CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt
    (530) create_view -> . CREATE VIEW IDENT AS select
    (535) create_index -> . CREATE unique_opt INDEX IDENT ON IDENT ( ident_list )
    (340) delete -> . DELETE delete_options FROM IDENT where rows_limit
    (341) delete -> . DELETE delete_options ident_list FROM where
    (221) drop_table -> . DROP temporary TABLE if_exists ident_list opt_restrict_cascade
    (531) drop_trigger -> . DROP TRIGGER if_exists IDENT
    (536) drop_view -> . DROP VIEW if_exists ident_list opt_restrict_cascade
    (319) insert -> . INSERT insert_lock_option opt_ignore insert2 insert_field_spec opt_insert_update
    (324) replace -> . REPLACE replace_lock_option insert2 insert_field_spec
    (532) optimize_table -> . OPTIMIZE TABLE ident_list
    (345) rename_table -> . RENAME TABLE rename_tables
    (523) select -> . top_level_select_init
    (529) set -> . SET variable_assignments
    (334) update -> . UPDATE ident_list SET key_values where rows_limit
    (541) start_transaction -> . START TRANSACTION opt_with_consistent_snapshot
    (542) start_transaction -> . BEGIN opt_work
    (549) commit -> . COMMIT opt_work opt_chain opt_release
    (550) rollback -> . ROLLBACK opt_work opt_chain opt_release
    (522) top_level_select_init -> . SELECT select_init2

    RETURN          shift and go to state 835
    IF              shift and go to state 862
    IDENT           shift and go to state 837
    LEAVE           shift and go to state 836
    ITERATE         shift and go to state 860
    OPEN            shift and go to state 849
    FETCH           shift and go to state 850
    CLOSE           shift and go to state 856
    CASE            shift and go to state 851
    BEGIN           shift and go to state 838
    LOOP            shift and go to state 834
    WHILE           shift and go to state 848
    REPEAT          shift and go to state 841
    ALTER           shift and go to state 8
    CREATE          shift and go to state 16
    DELETE          shift and go to state 5
    DROP            shift and go to state 17
    INSERT          shift and go to state 11
    REPLACE         shift and go to state 20
    OPTIMIZE        shift and go to state 4
    RENAME          shift and go to state 1
    SET             shift and go to state 13
    UPDATE          shift and go to state 29
    START           shift and go to state 30
    COMMIT          shift and go to state 32
    ROLLBACK        shift and go to state 36
    SELECT          shift and go to state 24

    sp_unlabeled_control           shift and go to state 861
    set                            shift and go to state 2
    sp_proc_stmt_leave             shift and go to state 846
    sp_proc_stmt                   shift and go to state 880
    select                         shift and go to state 9
    sp_proc_stmts1                 shift and go to state 888
    drop_table                     shift and go to state 7
    simple_case_stmt               shift and go to state 863
    rename_table                   shift and go to state 10
    sp_proc_stmt_statement         shift and go to state 852
    drop_view                      shift and go to state 14
    drop_trigger                   shift and go to state 15
    sp_labeled_control             shift and go to state 845
    optimize_table                 shift and go to state 39
    sp_proc_stmt_open              shift and go to state 858
    sp_proc_stmt_iterate           shift and go to state 853
    alter_table                    shift and go to state 35
    statement                      shift and go to state 854
    sp_labeled_block               shift and go to state 859
    sp_proc_stmt_if                shift and go to state 840
    create_table                   shift and go to state 21
    sp_proc_stmt_unlabeled         shift and go to state 832
    top_level_select_init          shift and go to state 27
    rollback                       shift and go to state 25
    insert                         shift and go to state 26
    sp_proc_stmt_return            shift and go to state 842
    update                         shift and go to state 28
    searched_case_stmt             shift and go to state 855
    sp_block_content               shift and go to state 833
    start_transaction              shift and go to state 23
    replace                        shift and go to state 6
    create_index                   shift and go to state 33
    create_trigger                 shift and go to state 34
    sp_proc_stmt_close             shift and go to state 843
    case_stmt_specification        shift and go to state 844
    sp_unlabeled_block             shift and go to state 857
    create_view                    shift and go to state 38
    sp_proc_stmt_fetch             shift and go to state 839
    commit                         shift and go to state 40
    delete                         shift and go to state 41

state 842

    (401) sp_proc_stmt -> sp_proc_stmt_return .

    DELIM           reduce using rule 401 (sp_proc_stmt -> sp_proc_stmt_return .)
    ;               reduce using rule 401 (sp_proc_stmt -> sp_proc_stmt_return .)


state 843

    (412) sp_proc_stmt -> sp_proc_stmt_close .

    DELIM           reduce using rule 412 (sp_proc_stmt -> sp_proc_stmt_close .)
    ;               reduce using rule 412 (sp_proc_stmt -> sp_proc_stmt_close .)


state 844

    (403) sp_proc_stmt -> case_stmt_specification .

    DELIM           reduce using rule 403 (sp_proc_stmt -> case_stmt_specification .)
    ;               reduce using rule 403 (sp_proc_stmt -> case_stmt_specification .)


state 845

    (406) sp_proc_stmt -> sp_labeled_control .

    DELIM           reduce using rule 406 (sp_proc_stmt -> sp_labeled_control .)
    ;               reduce using rule 406 (sp_proc_stmt -> sp_labeled_control .)


state 846

    (408) sp_proc_stmt -> sp_proc_stmt_leave .

    DELIM           reduce using rule 408 (sp_proc_stmt -> sp_proc_stmt_leave .)
    ;               reduce using rule 408 (sp_proc_stmt -> sp_proc_stmt_leave .)


state 847

    (418) create_trigger -> CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt .

    DELIM           reduce using rule 418 (create_trigger -> CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt .)
    ;               reduce using rule 418 (create_trigger -> CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt .)


state 848

    (386) sp_unlabeled_control -> WHILE . expr DO sp_proc_stmts1 END WHILE
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 889
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 849

    (392) sp_proc_stmt_open -> OPEN . IDENT

    IDENT           shift and go to state 890


state 850

    (398) sp_proc_stmt_fetch -> FETCH . ignore_fetch_noise IDENT INTO sp_ident_list
    (393) ignore_fetch_noise -> . NEXT FROM
    (394) ignore_fetch_noise -> . FROM
    (395) ignore_fetch_noise -> .

    NEXT            shift and go to state 892
    FROM            shift and go to state 891
    IDENT           reduce using rule 395 (ignore_fetch_noise -> .)

    ignore_fetch_noise             shift and go to state 893

state 851

    (360) simple_case_stmt -> CASE . expr simple_when_clause_list else_clause_opt END CASE
    (364) searched_case_stmt -> CASE . searched_when_clause_list else_clause_opt END CASE
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (362) searched_when_clause_list -> . searched_when_clause
    (363) searched_when_clause_list -> . searched_when_clause searched_when_clause_list
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (361) searched_when_clause -> . WHEN expr THEN sp_proc_stmts1
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    WHEN            shift and go to state 895
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    searched_when_clause           shift and go to state 894
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    searched_when_clause_list      shift and go to state 896
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 897
    simple_expr                    shift and go to state 131

state 852

    (400) sp_proc_stmt -> sp_proc_stmt_statement .

    DELIM           reduce using rule 400 (sp_proc_stmt -> sp_proc_stmt_statement .)
    ;               reduce using rule 400 (sp_proc_stmt -> sp_proc_stmt_statement .)


state 853

    (409) sp_proc_stmt -> sp_proc_stmt_iterate .

    DELIM           reduce using rule 409 (sp_proc_stmt -> sp_proc_stmt_iterate .)
    ;               reduce using rule 409 (sp_proc_stmt -> sp_proc_stmt_iterate .)


state 854

    (346) sp_proc_stmt_statement -> statement .

    DELIM           reduce using rule 346 (sp_proc_stmt_statement -> statement .)
    ;               reduce using rule 346 (sp_proc_stmt_statement -> statement .)


state 855

    (366) case_stmt_specification -> searched_case_stmt .

    DELIM           reduce using rule 366 (case_stmt_specification -> searched_case_stmt .)
    ;               reduce using rule 366 (case_stmt_specification -> searched_case_stmt .)


state 856

    (399) sp_proc_stmt_close -> CLOSE . IDENT

    IDENT           shift and go to state 898


state 857

    (405) sp_proc_stmt -> sp_unlabeled_block .

    DELIM           reduce using rule 405 (sp_proc_stmt -> sp_unlabeled_block .)
    ;               reduce using rule 405 (sp_proc_stmt -> sp_unlabeled_block .)


state 858

    (410) sp_proc_stmt -> sp_proc_stmt_open .

    DELIM           reduce using rule 410 (sp_proc_stmt -> sp_proc_stmt_open .)
    ;               reduce using rule 410 (sp_proc_stmt -> sp_proc_stmt_open .)


state 859

    (404) sp_proc_stmt -> sp_labeled_block .

    DELIM           reduce using rule 404 (sp_proc_stmt -> sp_labeled_block .)
    ;               reduce using rule 404 (sp_proc_stmt -> sp_labeled_block .)


state 860

    (391) sp_proc_stmt_iterate -> ITERATE . IDENT

    IDENT           shift and go to state 899


state 861

    (389) sp_proc_stmt_unlabeled -> sp_unlabeled_control .

    DELIM           reduce using rule 389 (sp_proc_stmt_unlabeled -> sp_unlabeled_control .)
    ;               reduce using rule 389 (sp_proc_stmt_unlabeled -> sp_unlabeled_control .)


state 862

    (354) sp_proc_stmt_if -> IF . sp_if END IF
    (350) sp_if -> . expr THEN sp_proc_stmts1 sp_elseifs
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    sp_if                          shift and go to state 900
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 901
    simple_expr                    shift and go to state 131

state 863

    (365) case_stmt_specification -> simple_case_stmt .

    DELIM           reduce using rule 365 (case_stmt_specification -> simple_case_stmt .)
    ;               reduce using rule 365 (case_stmt_specification -> simple_case_stmt .)


state 864

    (497) join_condition -> USING ( ident_list ) .

    JOIN            reduce using rule 497 (join_condition -> USING ( ident_list ) .)
    INNER           reduce using rule 497 (join_condition -> USING ( ident_list ) .)
    CROSS           reduce using rule 497 (join_condition -> USING ( ident_list ) .)
    LEFT            reduce using rule 497 (join_condition -> USING ( ident_list ) .)
    RIGHT           reduce using rule 497 (join_condition -> USING ( ident_list ) .)
    NATURAL         reduce using rule 497 (join_condition -> USING ( ident_list ) .)
    ,               reduce using rule 497 (join_condition -> USING ( ident_list ) .)
    WHERE           reduce using rule 497 (join_condition -> USING ( ident_list ) .)
    GROUP           reduce using rule 497 (join_condition -> USING ( ident_list ) .)
    HAVING          reduce using rule 497 (join_condition -> USING ( ident_list ) .)
    ORDER           reduce using rule 497 (join_condition -> USING ( ident_list ) .)
    LIMIT           reduce using rule 497 (join_condition -> USING ( ident_list ) .)
    INTO            reduce using rule 497 (join_condition -> USING ( ident_list ) .)
    FOR             reduce using rule 497 (join_condition -> USING ( ident_list ) .)
    LOCK            reduce using rule 497 (join_condition -> USING ( ident_list ) .)
    UNION           reduce using rule 497 (join_condition -> USING ( ident_list ) .)
    DELIM           reduce using rule 497 (join_condition -> USING ( ident_list ) .)
    ;               reduce using rule 497 (join_condition -> USING ( ident_list ) .)
    )               reduce using rule 497 (join_condition -> USING ( ident_list ) .)
    ON              reduce using rule 497 (join_condition -> USING ( ident_list ) .)


state 865

    (469) index_hint_clause -> FOR GROUP BY .

    (               reduce using rule 469 (index_hint_clause -> FOR GROUP BY .)


state 866

    (468) index_hint_clause -> FOR ORDER BY .

    (               reduce using rule 468 (index_hint_clause -> FOR ORDER BY .)


state 867

    (477) key_usage_list -> key_usage_element .
    (478) key_usage_list -> key_usage_element . , key_usage_list

    )               reduce using rule 477 (key_usage_list -> key_usage_element .)
    ,               shift and go to state 902


state 868

    (475) key_usage_element -> IDENT .

    ,               reduce using rule 475 (key_usage_element -> IDENT .)
    )               reduce using rule 475 (key_usage_element -> IDENT .)


state 869

    (476) key_usage_element -> PRIMARY .

    ,               reduce using rule 476 (key_usage_element -> PRIMARY .)
    )               reduce using rule 476 (key_usage_element -> PRIMARY .)


state 870

    (479) index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list . )

    )               shift and go to state 903


state 871

    (474) opt_key_usage_list -> key_usage_list .

    )               reduce using rule 474 (opt_key_usage_list -> key_usage_list .)


state 872

    (510) olap_opt -> WITH ROLLUP .

    HAVING          reduce using rule 510 (olap_opt -> WITH ROLLUP .)
    ORDER           reduce using rule 510 (olap_opt -> WITH ROLLUP .)
    LIMIT           reduce using rule 510 (olap_opt -> WITH ROLLUP .)
    INTO            reduce using rule 510 (olap_opt -> WITH ROLLUP .)
    FOR             reduce using rule 510 (olap_opt -> WITH ROLLUP .)
    LOCK            reduce using rule 510 (olap_opt -> WITH ROLLUP .)
    UNION           reduce using rule 510 (olap_opt -> WITH ROLLUP .)
    DELIM           reduce using rule 510 (olap_opt -> WITH ROLLUP .)
    ;               reduce using rule 510 (olap_opt -> WITH ROLLUP .)
    )               reduce using rule 510 (olap_opt -> WITH ROLLUP .)
    ON              reduce using rule 510 (olap_opt -> WITH ROLLUP .)


state 873

    (509) olap_opt -> WITH CUBE .

    HAVING          reduce using rule 509 (olap_opt -> WITH CUBE .)
    ORDER           reduce using rule 509 (olap_opt -> WITH CUBE .)
    LIMIT           reduce using rule 509 (olap_opt -> WITH CUBE .)
    INTO            reduce using rule 509 (olap_opt -> WITH CUBE .)
    FOR             reduce using rule 509 (olap_opt -> WITH CUBE .)
    LOCK            reduce using rule 509 (olap_opt -> WITH CUBE .)
    UNION           reduce using rule 509 (olap_opt -> WITH CUBE .)
    DELIM           reduce using rule 509 (olap_opt -> WITH CUBE .)
    ;               reduce using rule 509 (olap_opt -> WITH CUBE .)
    )               reduce using rule 509 (olap_opt -> WITH CUBE .)
    ON              reduce using rule 509 (olap_opt -> WITH CUBE .)


state 874

    (513) group_list -> group_item , group_list .

    WITH            reduce using rule 513 (group_list -> group_item , group_list .)
    HAVING          reduce using rule 513 (group_list -> group_item , group_list .)
    ORDER           reduce using rule 513 (group_list -> group_item , group_list .)
    LIMIT           reduce using rule 513 (group_list -> group_item , group_list .)
    INTO            reduce using rule 513 (group_list -> group_item , group_list .)
    FOR             reduce using rule 513 (group_list -> group_item , group_list .)
    LOCK            reduce using rule 513 (group_list -> group_item , group_list .)
    UNION           reduce using rule 513 (group_list -> group_item , group_list .)
    DELIM           reduce using rule 513 (group_list -> group_item , group_list .)
    ;               reduce using rule 513 (group_list -> group_item , group_list .)
    )               reduce using rule 513 (group_list -> group_item , group_list .)
    ON              reduce using rule 513 (group_list -> group_item , group_list .)


state 875

    (144) bidimensional_limit -> ( NUMBER , NUMBER ) .

    )               reduce using rule 144 (bidimensional_limit -> ( NUMBER , NUMBER ) .)
    UNSIGNED        reduce using rule 144 (bidimensional_limit -> ( NUMBER , NUMBER ) .)
    NULL            reduce using rule 144 (bidimensional_limit -> ( NUMBER , NUMBER ) .)
    NOT             reduce using rule 144 (bidimensional_limit -> ( NUMBER , NUMBER ) .)
    DEFAULT         reduce using rule 144 (bidimensional_limit -> ( NUMBER , NUMBER ) .)
    AUTO_INCREMENT  reduce using rule 144 (bidimensional_limit -> ( NUMBER , NUMBER ) .)
    UNIQUE          reduce using rule 144 (bidimensional_limit -> ( NUMBER , NUMBER ) .)
    KEY             reduce using rule 144 (bidimensional_limit -> ( NUMBER , NUMBER ) .)
    PRIMARY         reduce using rule 144 (bidimensional_limit -> ( NUMBER , NUMBER ) .)
    CHARACTER       reduce using rule 144 (bidimensional_limit -> ( NUMBER , NUMBER ) .)
    COLLATE         reduce using rule 144 (bidimensional_limit -> ( NUMBER , NUMBER ) .)
    FIRST           reduce using rule 144 (bidimensional_limit -> ( NUMBER , NUMBER ) .)
    AFTER           reduce using rule 144 (bidimensional_limit -> ( NUMBER , NUMBER ) .)
    ,               reduce using rule 144 (bidimensional_limit -> ( NUMBER , NUMBER ) .)
    DELIM           reduce using rule 144 (bidimensional_limit -> ( NUMBER , NUMBER ) .)
    ;               reduce using rule 144 (bidimensional_limit -> ( NUMBER , NUMBER ) .)


state 876

    (259) insert_update_elem -> simple_ident_nospvar equal expr_or_default .

    ,               reduce using rule 259 (insert_update_elem -> simple_ident_nospvar equal expr_or_default .)
    DELIM           reduce using rule 259 (insert_update_elem -> simple_ident_nospvar equal expr_or_default .)
    ;               reduce using rule 259 (insert_update_elem -> simple_ident_nospvar equal expr_or_default .)


state 877

    (261) insert_update_list -> insert_update_elem , insert_update_list .

    DELIM           reduce using rule 261 (insert_update_list -> insert_update_elem , insert_update_list .)
    ;               reduce using rule 261 (insert_update_list -> insert_update_elem , insert_update_list .)


state 878

    (128) unique_statement -> constraint_opt UNIQUE ignore_index_or_key index_name_opt ( column_names ) .

    ,               reduce using rule 128 (unique_statement -> constraint_opt UNIQUE ignore_index_or_key index_name_opt ( column_names ) .)
    )               reduce using rule 128 (unique_statement -> constraint_opt UNIQUE ignore_index_or_key index_name_opt ( column_names ) .)


state 879

    (204) table_option -> ignore_default CHARACTER SET ignore_eq IDENT .

    ,               reduce using rule 204 (table_option -> ignore_default CHARACTER SET ignore_eq IDENT .)
    ENGINE          reduce using rule 204 (table_option -> ignore_default CHARACTER SET ignore_eq IDENT .)
    AUTO_INCREMENT  reduce using rule 204 (table_option -> ignore_default CHARACTER SET ignore_eq IDENT .)
    DEFAULT         reduce using rule 204 (table_option -> ignore_default CHARACTER SET ignore_eq IDENT .)
    CHARACTER       reduce using rule 204 (table_option -> ignore_default CHARACTER SET ignore_eq IDENT .)
    CHARSET         reduce using rule 204 (table_option -> ignore_default CHARACTER SET ignore_eq IDENT .)
    COLLATE         reduce using rule 204 (table_option -> ignore_default CHARACTER SET ignore_eq IDENT .)
    DELIM           reduce using rule 204 (table_option -> ignore_default CHARACTER SET ignore_eq IDENT .)
    ;               reduce using rule 204 (table_option -> ignore_default CHARACTER SET ignore_eq IDENT .)


state 880

    (348) sp_proc_stmts1 -> sp_proc_stmt . delim
    (349) sp_proc_stmts1 -> sp_proc_stmt . delim sp_proc_stmts1
    (1) delim -> . DELIM
    (2) delim -> . ;

    DELIM           shift and go to state 78
    ;               shift and go to state 76

    delim                          shift and go to state 904

state 881

    (385) sp_unlabeled_control -> LOOP sp_proc_stmts1 . END LOOP

    END             shift and go to state 905


state 882

    (347) sp_proc_stmt_return -> RETURN expr .
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    DELIM           reduce using rule 347 (sp_proc_stmt_return -> RETURN expr .)
    ;               reduce using rule 347 (sp_proc_stmt_return -> RETURN expr .)
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 883

    (390) sp_proc_stmt_leave -> LEAVE IDENT .

    DELIM           reduce using rule 390 (sp_proc_stmt_leave -> LEAVE IDENT .)
    ;               reduce using rule 390 (sp_proc_stmt_leave -> LEAVE IDENT .)


state 884

    (383) sp_labeled_block -> IDENT : . sp_block_content sp_opt_label
    (388) sp_labeled_control -> IDENT : . sp_unlabeled_control sp_opt_label
    (380) sp_block_content -> . BEGIN sp_decls sp_proc_stmts END
    (385) sp_unlabeled_control -> . LOOP sp_proc_stmts1 END LOOP
    (386) sp_unlabeled_control -> . WHILE expr DO sp_proc_stmts1 END WHILE
    (387) sp_unlabeled_control -> . REPEAT sp_proc_stmts1 UNTIL expr END REPEAT

    BEGIN           shift and go to state 907
    LOOP            shift and go to state 834
    WHILE           shift and go to state 848
    REPEAT          shift and go to state 841

    sp_unlabeled_control           shift and go to state 906
    sp_block_content               shift and go to state 908

state 885

    (380) sp_block_content -> BEGIN sp_decls . sp_proc_stmts END
    (378) sp_proc_stmts -> .
    (379) sp_proc_stmts -> . sp_proc_stmt delim sp_proc_stmts
    (400) sp_proc_stmt -> . sp_proc_stmt_statement
    (401) sp_proc_stmt -> . sp_proc_stmt_return
    (402) sp_proc_stmt -> . sp_proc_stmt_if
    (403) sp_proc_stmt -> . case_stmt_specification
    (404) sp_proc_stmt -> . sp_labeled_block
    (405) sp_proc_stmt -> . sp_unlabeled_block
    (406) sp_proc_stmt -> . sp_labeled_control
    (407) sp_proc_stmt -> . sp_proc_stmt_unlabeled
    (408) sp_proc_stmt -> . sp_proc_stmt_leave
    (409) sp_proc_stmt -> . sp_proc_stmt_iterate
    (410) sp_proc_stmt -> . sp_proc_stmt_open
    (411) sp_proc_stmt -> . sp_proc_stmt_fetch
    (412) sp_proc_stmt -> . sp_proc_stmt_close
    (346) sp_proc_stmt_statement -> . statement
    (347) sp_proc_stmt_return -> . RETURN expr
    (354) sp_proc_stmt_if -> . IF sp_if END IF
    (365) case_stmt_specification -> . simple_case_stmt
    (366) case_stmt_specification -> . searched_case_stmt
    (383) sp_labeled_block -> . IDENT : sp_block_content sp_opt_label
    (384) sp_unlabeled_block -> . sp_block_content
    (388) sp_labeled_control -> . IDENT : sp_unlabeled_control sp_opt_label
    (389) sp_proc_stmt_unlabeled -> . sp_unlabeled_control
    (390) sp_proc_stmt_leave -> . LEAVE IDENT
    (391) sp_proc_stmt_iterate -> . ITERATE IDENT
    (392) sp_proc_stmt_open -> . OPEN IDENT
    (398) sp_proc_stmt_fetch -> . FETCH ignore_fetch_noise IDENT INTO sp_ident_list
    (399) sp_proc_stmt_close -> . CLOSE IDENT
    (551) statement -> . alter_table
    (552) statement -> . create_table
    (553) statement -> . create_trigger
    (554) statement -> . create_view
    (555) statement -> . create_index
    (556) statement -> . delete
    (557) statement -> . drop_table
    (558) statement -> . drop_trigger
    (559) statement -> . drop_view
    (560) statement -> . insert
    (561) statement -> . replace
    (562) statement -> . optimize_table
    (563) statement -> . rename_table
    (564) statement -> . select
    (565) statement -> . set
    (566) statement -> . update
    (567) statement -> . start_transaction
    (568) statement -> . commit
    (569) statement -> . rollback
    (360) simple_case_stmt -> . CASE expr simple_when_clause_list else_clause_opt END CASE
    (364) searched_case_stmt -> . CASE searched_when_clause_list else_clause_opt END CASE
    (380) sp_block_content -> . BEGIN sp_decls sp_proc_stmts END
    (385) sp_unlabeled_control -> . LOOP sp_proc_stmts1 END LOOP
    (386) sp_unlabeled_control -> . WHILE expr DO sp_proc_stmts1 END WHILE
    (387) sp_unlabeled_control -> . REPEAT sp_proc_stmts1 UNTIL expr END REPEAT
    (249) alter_table -> . ALTER TABLE IDENT alter_specifications
    (213) create_table -> . CREATE TABLE if_not_exists IDENT ( create_statements ) table_options_opt
    (418) create_trigger -> . CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt
    (530) create_view -> . CREATE VIEW IDENT AS select
    (535) create_index -> . CREATE unique_opt INDEX IDENT ON IDENT ( ident_list )
    (340) delete -> . DELETE delete_options FROM IDENT where rows_limit
    (341) delete -> . DELETE delete_options ident_list FROM where
    (221) drop_table -> . DROP temporary TABLE if_exists ident_list opt_restrict_cascade
    (531) drop_trigger -> . DROP TRIGGER if_exists IDENT
    (536) drop_view -> . DROP VIEW if_exists ident_list opt_restrict_cascade
    (319) insert -> . INSERT insert_lock_option opt_ignore insert2 insert_field_spec opt_insert_update
    (324) replace -> . REPLACE replace_lock_option insert2 insert_field_spec
    (532) optimize_table -> . OPTIMIZE TABLE ident_list
    (345) rename_table -> . RENAME TABLE rename_tables
    (523) select -> . top_level_select_init
    (529) set -> . SET variable_assignments
    (334) update -> . UPDATE ident_list SET key_values where rows_limit
    (541) start_transaction -> . START TRANSACTION opt_with_consistent_snapshot
    (542) start_transaction -> . BEGIN opt_work
    (549) commit -> . COMMIT opt_work opt_chain opt_release
    (550) rollback -> . ROLLBACK opt_work opt_chain opt_release
    (522) top_level_select_init -> . SELECT select_init2

    END             reduce using rule 378 (sp_proc_stmts -> .)
    RETURN          shift and go to state 835
    IF              shift and go to state 862
    IDENT           shift and go to state 837
    LEAVE           shift and go to state 836
    ITERATE         shift and go to state 860
    OPEN            shift and go to state 849
    FETCH           shift and go to state 850
    CLOSE           shift and go to state 856
    CASE            shift and go to state 851
    BEGIN           shift and go to state 838
    LOOP            shift and go to state 834
    WHILE           shift and go to state 848
    REPEAT          shift and go to state 841
    ALTER           shift and go to state 8
    CREATE          shift and go to state 16
    DELETE          shift and go to state 5
    DROP            shift and go to state 17
    INSERT          shift and go to state 11
    REPLACE         shift and go to state 20
    OPTIMIZE        shift and go to state 4
    RENAME          shift and go to state 1
    SET             shift and go to state 13
    UPDATE          shift and go to state 29
    START           shift and go to state 30
    COMMIT          shift and go to state 32
    ROLLBACK        shift and go to state 36
    SELECT          shift and go to state 24

    sp_unlabeled_control           shift and go to state 861
    set                            shift and go to state 2
    sp_proc_stmt_leave             shift and go to state 846
    sp_proc_stmt                   shift and go to state 910
    select                         shift and go to state 9
    drop_table                     shift and go to state 7
    simple_case_stmt               shift and go to state 863
    rename_table                   shift and go to state 10
    sp_proc_stmt_statement         shift and go to state 852
    drop_view                      shift and go to state 14
    drop_trigger                   shift and go to state 15
    sp_labeled_control             shift and go to state 845
    optimize_table                 shift and go to state 39
    sp_proc_stmt_open              shift and go to state 858
    sp_proc_stmt_iterate           shift and go to state 853
    alter_table                    shift and go to state 35
    statement                      shift and go to state 854
    sp_labeled_block               shift and go to state 859
    sp_proc_stmt_if                shift and go to state 840
    create_table                   shift and go to state 21
    sp_proc_stmt_unlabeled         shift and go to state 832
    top_level_select_init          shift and go to state 27
    rollback                       shift and go to state 25
    insert                         shift and go to state 26
    sp_proc_stmt_return            shift and go to state 842
    update                         shift and go to state 28
    searched_case_stmt             shift and go to state 855
    sp_block_content               shift and go to state 833
    start_transaction              shift and go to state 23
    replace                        shift and go to state 6
    create_index                   shift and go to state 33
    create_trigger                 shift and go to state 34
    sp_proc_stmt_close             shift and go to state 843
    case_stmt_specification        shift and go to state 844
    sp_unlabeled_block             shift and go to state 857
    create_view                    shift and go to state 38
    sp_proc_stmt_fetch             shift and go to state 839
    sp_proc_stmts                  shift and go to state 909
    commit                         shift and go to state 40
    delete                         shift and go to state 41

state 886

    (368) sp_decls -> sp_decl . delim sp_decls
    (1) delim -> . DELIM
    (2) delim -> . ;

    DELIM           shift and go to state 78
    ;               shift and go to state 76

    delim                          shift and go to state 911

state 887

    (377) sp_decl -> DECLARE . sp_ident_list sp_type_with_opt_collate sp_opt_default
    (396) sp_ident_list -> . IDENT
    (397) sp_ident_list -> . IDENT , sp_ident_list

    IDENT           shift and go to state 912

    sp_ident_list                  shift and go to state 913

state 888

    (387) sp_unlabeled_control -> REPEAT sp_proc_stmts1 . UNTIL expr END REPEAT

    UNTIL           shift and go to state 914


state 889

    (386) sp_unlabeled_control -> WHILE expr . DO sp_proc_stmts1 END WHILE
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    DO              shift and go to state 915
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 890

    (392) sp_proc_stmt_open -> OPEN IDENT .

    DELIM           reduce using rule 392 (sp_proc_stmt_open -> OPEN IDENT .)
    ;               reduce using rule 392 (sp_proc_stmt_open -> OPEN IDENT .)


state 891

    (394) ignore_fetch_noise -> FROM .

    IDENT           reduce using rule 394 (ignore_fetch_noise -> FROM .)


state 892

    (393) ignore_fetch_noise -> NEXT . FROM

    FROM            shift and go to state 916


state 893

    (398) sp_proc_stmt_fetch -> FETCH ignore_fetch_noise . IDENT INTO sp_ident_list

    IDENT           shift and go to state 917


state 894

    (362) searched_when_clause_list -> searched_when_clause .
    (363) searched_when_clause_list -> searched_when_clause . searched_when_clause_list
    (362) searched_when_clause_list -> . searched_when_clause
    (363) searched_when_clause_list -> . searched_when_clause searched_when_clause_list
    (361) searched_when_clause -> . WHEN expr THEN sp_proc_stmts1

    ELSE            reduce using rule 362 (searched_when_clause_list -> searched_when_clause .)
    END             reduce using rule 362 (searched_when_clause_list -> searched_when_clause .)
    WHEN            shift and go to state 895

    searched_when_clause_list      shift and go to state 918
    searched_when_clause           shift and go to state 894

state 895

    (361) searched_when_clause -> WHEN . expr THEN sp_proc_stmts1
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 919
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 896

    (364) searched_case_stmt -> CASE searched_when_clause_list . else_clause_opt END CASE
    (355) else_clause_opt -> .
    (356) else_clause_opt -> . ELSE sp_proc_stmts1

    END             reduce using rule 355 (else_clause_opt -> .)
    ELSE            shift and go to state 921

    else_clause_opt                shift and go to state 920

state 897

    (360) simple_case_stmt -> CASE expr . simple_when_clause_list else_clause_opt END CASE
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr
    (358) simple_when_clause_list -> . simple_when_clause
    (359) simple_when_clause_list -> . simple_when_clause simple_when_clause_list
    (357) simple_when_clause -> . WHEN expr THEN sp_proc_stmts1

    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267
    WHEN            shift and go to state 923

    simple_when_clause_list        shift and go to state 924
    simple_when_clause             shift and go to state 922

state 898

    (399) sp_proc_stmt_close -> CLOSE IDENT .

    DELIM           reduce using rule 399 (sp_proc_stmt_close -> CLOSE IDENT .)
    ;               reduce using rule 399 (sp_proc_stmt_close -> CLOSE IDENT .)


state 899

    (391) sp_proc_stmt_iterate -> ITERATE IDENT .

    DELIM           reduce using rule 391 (sp_proc_stmt_iterate -> ITERATE IDENT .)
    ;               reduce using rule 391 (sp_proc_stmt_iterate -> ITERATE IDENT .)


state 900

    (354) sp_proc_stmt_if -> IF sp_if . END IF

    END             shift and go to state 925


state 901

    (350) sp_if -> expr . THEN sp_proc_stmts1 sp_elseifs
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    THEN            shift and go to state 926
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 902

    (478) key_usage_list -> key_usage_element , . key_usage_list
    (477) key_usage_list -> . key_usage_element
    (478) key_usage_list -> . key_usage_element , key_usage_list
    (475) key_usage_element -> . IDENT
    (476) key_usage_element -> . PRIMARY

    IDENT           shift and go to state 868
    PRIMARY         shift and go to state 869

    key_usage_element              shift and go to state 867
    key_usage_list                 shift and go to state 927

state 903

    (479) index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .

    FORCE           reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    IGNORE          reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    USE             reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    JOIN            reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    INNER           reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    CROSS           reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    LEFT            reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    RIGHT           reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    NATURAL         reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    ,               reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    WHERE           reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    GROUP           reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    HAVING          reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    ORDER           reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    LIMIT           reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    INTO            reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    FOR             reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    LOCK            reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    UNION           reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    DELIM           reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    ;               reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    )               reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    ON              reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)
    USING           reduce using rule 479 (index_hint_definition -> index_hint_type check_index_or_key index_hint_clause ( opt_key_usage_list ) .)


state 904

    (348) sp_proc_stmts1 -> sp_proc_stmt delim .
    (349) sp_proc_stmts1 -> sp_proc_stmt delim . sp_proc_stmts1
    (348) sp_proc_stmts1 -> . sp_proc_stmt delim
    (349) sp_proc_stmts1 -> . sp_proc_stmt delim sp_proc_stmts1
    (400) sp_proc_stmt -> . sp_proc_stmt_statement
    (401) sp_proc_stmt -> . sp_proc_stmt_return
    (402) sp_proc_stmt -> . sp_proc_stmt_if
    (403) sp_proc_stmt -> . case_stmt_specification
    (404) sp_proc_stmt -> . sp_labeled_block
    (405) sp_proc_stmt -> . sp_unlabeled_block
    (406) sp_proc_stmt -> . sp_labeled_control
    (407) sp_proc_stmt -> . sp_proc_stmt_unlabeled
    (408) sp_proc_stmt -> . sp_proc_stmt_leave
    (409) sp_proc_stmt -> . sp_proc_stmt_iterate
    (410) sp_proc_stmt -> . sp_proc_stmt_open
    (411) sp_proc_stmt -> . sp_proc_stmt_fetch
    (412) sp_proc_stmt -> . sp_proc_stmt_close
    (346) sp_proc_stmt_statement -> . statement
    (347) sp_proc_stmt_return -> . RETURN expr
    (354) sp_proc_stmt_if -> . IF sp_if END IF
    (365) case_stmt_specification -> . simple_case_stmt
    (366) case_stmt_specification -> . searched_case_stmt
    (383) sp_labeled_block -> . IDENT : sp_block_content sp_opt_label
    (384) sp_unlabeled_block -> . sp_block_content
    (388) sp_labeled_control -> . IDENT : sp_unlabeled_control sp_opt_label
    (389) sp_proc_stmt_unlabeled -> . sp_unlabeled_control
    (390) sp_proc_stmt_leave -> . LEAVE IDENT
    (391) sp_proc_stmt_iterate -> . ITERATE IDENT
    (392) sp_proc_stmt_open -> . OPEN IDENT
    (398) sp_proc_stmt_fetch -> . FETCH ignore_fetch_noise IDENT INTO sp_ident_list
    (399) sp_proc_stmt_close -> . CLOSE IDENT
    (551) statement -> . alter_table
    (552) statement -> . create_table
    (553) statement -> . create_trigger
    (554) statement -> . create_view
    (555) statement -> . create_index
    (556) statement -> . delete
    (557) statement -> . drop_table
    (558) statement -> . drop_trigger
    (559) statement -> . drop_view
    (560) statement -> . insert
    (561) statement -> . replace
    (562) statement -> . optimize_table
    (563) statement -> . rename_table
    (564) statement -> . select
    (565) statement -> . set
    (566) statement -> . update
    (567) statement -> . start_transaction
    (568) statement -> . commit
    (569) statement -> . rollback
    (360) simple_case_stmt -> . CASE expr simple_when_clause_list else_clause_opt END CASE
    (364) searched_case_stmt -> . CASE searched_when_clause_list else_clause_opt END CASE
    (380) sp_block_content -> . BEGIN sp_decls sp_proc_stmts END
    (385) sp_unlabeled_control -> . LOOP sp_proc_stmts1 END LOOP
    (386) sp_unlabeled_control -> . WHILE expr DO sp_proc_stmts1 END WHILE
    (387) sp_unlabeled_control -> . REPEAT sp_proc_stmts1 UNTIL expr END REPEAT
    (249) alter_table -> . ALTER TABLE IDENT alter_specifications
    (213) create_table -> . CREATE TABLE if_not_exists IDENT ( create_statements ) table_options_opt
    (418) create_trigger -> . CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt
    (530) create_view -> . CREATE VIEW IDENT AS select
    (535) create_index -> . CREATE unique_opt INDEX IDENT ON IDENT ( ident_list )
    (340) delete -> . DELETE delete_options FROM IDENT where rows_limit
    (341) delete -> . DELETE delete_options ident_list FROM where
    (221) drop_table -> . DROP temporary TABLE if_exists ident_list opt_restrict_cascade
    (531) drop_trigger -> . DROP TRIGGER if_exists IDENT
    (536) drop_view -> . DROP VIEW if_exists ident_list opt_restrict_cascade
    (319) insert -> . INSERT insert_lock_option opt_ignore insert2 insert_field_spec opt_insert_update
    (324) replace -> . REPLACE replace_lock_option insert2 insert_field_spec
    (532) optimize_table -> . OPTIMIZE TABLE ident_list
    (345) rename_table -> . RENAME TABLE rename_tables
    (523) select -> . top_level_select_init
    (529) set -> . SET variable_assignments
    (334) update -> . UPDATE ident_list SET key_values where rows_limit
    (541) start_transaction -> . START TRANSACTION opt_with_consistent_snapshot
    (542) start_transaction -> . BEGIN opt_work
    (549) commit -> . COMMIT opt_work opt_chain opt_release
    (550) rollback -> . ROLLBACK opt_work opt_chain opt_release
    (522) top_level_select_init -> . SELECT select_init2

    END             reduce using rule 348 (sp_proc_stmts1 -> sp_proc_stmt delim .)
    UNTIL           reduce using rule 348 (sp_proc_stmts1 -> sp_proc_stmt delim .)
    ELSEIF          reduce using rule 348 (sp_proc_stmts1 -> sp_proc_stmt delim .)
    ELSE            reduce using rule 348 (sp_proc_stmts1 -> sp_proc_stmt delim .)
    WHEN            reduce using rule 348 (sp_proc_stmts1 -> sp_proc_stmt delim .)
    RETURN          shift and go to state 835
    IF              shift and go to state 862
    IDENT           shift and go to state 837
    LEAVE           shift and go to state 836
    ITERATE         shift and go to state 860
    OPEN            shift and go to state 849
    FETCH           shift and go to state 850
    CLOSE           shift and go to state 856
    CASE            shift and go to state 851
    BEGIN           shift and go to state 838
    LOOP            shift and go to state 834
    WHILE           shift and go to state 848
    REPEAT          shift and go to state 841
    ALTER           shift and go to state 8
    CREATE          shift and go to state 16
    DELETE          shift and go to state 5
    DROP            shift and go to state 17
    INSERT          shift and go to state 11
    REPLACE         shift and go to state 20
    OPTIMIZE        shift and go to state 4
    RENAME          shift and go to state 1
    SET             shift and go to state 13
    UPDATE          shift and go to state 29
    START           shift and go to state 30
    COMMIT          shift and go to state 32
    ROLLBACK        shift and go to state 36
    SELECT          shift and go to state 24

    sp_unlabeled_control           shift and go to state 861
    set                            shift and go to state 2
    sp_proc_stmt_leave             shift and go to state 846
    sp_proc_stmt                   shift and go to state 880
    select                         shift and go to state 9
    sp_proc_stmts1                 shift and go to state 928
    drop_table                     shift and go to state 7
    simple_case_stmt               shift and go to state 863
    rename_table                   shift and go to state 10
    sp_proc_stmt_statement         shift and go to state 852
    drop_view                      shift and go to state 14
    drop_trigger                   shift and go to state 15
    sp_labeled_control             shift and go to state 845
    optimize_table                 shift and go to state 39
    sp_proc_stmt_open              shift and go to state 858
    sp_proc_stmt_iterate           shift and go to state 853
    alter_table                    shift and go to state 35
    statement                      shift and go to state 854
    sp_labeled_block               shift and go to state 859
    sp_proc_stmt_if                shift and go to state 840
    create_table                   shift and go to state 21
    sp_proc_stmt_unlabeled         shift and go to state 832
    top_level_select_init          shift and go to state 27
    rollback                       shift and go to state 25
    insert                         shift and go to state 26
    sp_proc_stmt_return            shift and go to state 842
    update                         shift and go to state 28
    searched_case_stmt             shift and go to state 855
    sp_block_content               shift and go to state 833
    start_transaction              shift and go to state 23
    replace                        shift and go to state 6
    create_index                   shift and go to state 33
    create_trigger                 shift and go to state 34
    sp_proc_stmt_close             shift and go to state 843
    case_stmt_specification        shift and go to state 844
    sp_unlabeled_block             shift and go to state 857
    create_view                    shift and go to state 38
    sp_proc_stmt_fetch             shift and go to state 839
    commit                         shift and go to state 40
    delete                         shift and go to state 41

state 905

    (385) sp_unlabeled_control -> LOOP sp_proc_stmts1 END . LOOP

    LOOP            shift and go to state 929


state 906

    (388) sp_labeled_control -> IDENT : sp_unlabeled_control . sp_opt_label
    (381) sp_opt_label -> .
    (382) sp_opt_label -> . IDENT

    DELIM           reduce using rule 381 (sp_opt_label -> .)
    ;               reduce using rule 381 (sp_opt_label -> .)
    IDENT           shift and go to state 930

    sp_opt_label                   shift and go to state 931

state 907

    (380) sp_block_content -> BEGIN . sp_decls sp_proc_stmts END
    (367) sp_decls -> .
    (368) sp_decls -> . sp_decl delim sp_decls
    (377) sp_decl -> . DECLARE sp_ident_list sp_type_with_opt_collate sp_opt_default

    RETURN          reduce using rule 367 (sp_decls -> .)
    IF              reduce using rule 367 (sp_decls -> .)
    IDENT           reduce using rule 367 (sp_decls -> .)
    LEAVE           reduce using rule 367 (sp_decls -> .)
    ITERATE         reduce using rule 367 (sp_decls -> .)
    OPEN            reduce using rule 367 (sp_decls -> .)
    FETCH           reduce using rule 367 (sp_decls -> .)
    CLOSE           reduce using rule 367 (sp_decls -> .)
    CASE            reduce using rule 367 (sp_decls -> .)
    BEGIN           reduce using rule 367 (sp_decls -> .)
    LOOP            reduce using rule 367 (sp_decls -> .)
    WHILE           reduce using rule 367 (sp_decls -> .)
    REPEAT          reduce using rule 367 (sp_decls -> .)
    ALTER           reduce using rule 367 (sp_decls -> .)
    CREATE          reduce using rule 367 (sp_decls -> .)
    DELETE          reduce using rule 367 (sp_decls -> .)
    DROP            reduce using rule 367 (sp_decls -> .)
    INSERT          reduce using rule 367 (sp_decls -> .)
    REPLACE         reduce using rule 367 (sp_decls -> .)
    OPTIMIZE        reduce using rule 367 (sp_decls -> .)
    RENAME          reduce using rule 367 (sp_decls -> .)
    SET             reduce using rule 367 (sp_decls -> .)
    UPDATE          reduce using rule 367 (sp_decls -> .)
    START           reduce using rule 367 (sp_decls -> .)
    COMMIT          reduce using rule 367 (sp_decls -> .)
    ROLLBACK        reduce using rule 367 (sp_decls -> .)
    SELECT          reduce using rule 367 (sp_decls -> .)
    END             reduce using rule 367 (sp_decls -> .)
    DECLARE         shift and go to state 887

    sp_decls                       shift and go to state 885
    sp_decl                        shift and go to state 886

state 908

    (383) sp_labeled_block -> IDENT : sp_block_content . sp_opt_label
    (381) sp_opt_label -> .
    (382) sp_opt_label -> . IDENT

    DELIM           reduce using rule 381 (sp_opt_label -> .)
    ;               reduce using rule 381 (sp_opt_label -> .)
    IDENT           shift and go to state 930

    sp_opt_label                   shift and go to state 932

state 909

    (380) sp_block_content -> BEGIN sp_decls sp_proc_stmts . END

    END             shift and go to state 933


state 910

    (379) sp_proc_stmts -> sp_proc_stmt . delim sp_proc_stmts
    (1) delim -> . DELIM
    (2) delim -> . ;

    DELIM           shift and go to state 78
    ;               shift and go to state 76

    delim                          shift and go to state 934

state 911

    (368) sp_decls -> sp_decl delim . sp_decls
    (367) sp_decls -> .
    (368) sp_decls -> . sp_decl delim sp_decls
    (377) sp_decl -> . DECLARE sp_ident_list sp_type_with_opt_collate sp_opt_default

    RETURN          reduce using rule 367 (sp_decls -> .)
    IF              reduce using rule 367 (sp_decls -> .)
    IDENT           reduce using rule 367 (sp_decls -> .)
    LEAVE           reduce using rule 367 (sp_decls -> .)
    ITERATE         reduce using rule 367 (sp_decls -> .)
    OPEN            reduce using rule 367 (sp_decls -> .)
    FETCH           reduce using rule 367 (sp_decls -> .)
    CLOSE           reduce using rule 367 (sp_decls -> .)
    CASE            reduce using rule 367 (sp_decls -> .)
    BEGIN           reduce using rule 367 (sp_decls -> .)
    LOOP            reduce using rule 367 (sp_decls -> .)
    WHILE           reduce using rule 367 (sp_decls -> .)
    REPEAT          reduce using rule 367 (sp_decls -> .)
    ALTER           reduce using rule 367 (sp_decls -> .)
    CREATE          reduce using rule 367 (sp_decls -> .)
    DELETE          reduce using rule 367 (sp_decls -> .)
    DROP            reduce using rule 367 (sp_decls -> .)
    INSERT          reduce using rule 367 (sp_decls -> .)
    REPLACE         reduce using rule 367 (sp_decls -> .)
    OPTIMIZE        reduce using rule 367 (sp_decls -> .)
    RENAME          reduce using rule 367 (sp_decls -> .)
    SET             reduce using rule 367 (sp_decls -> .)
    UPDATE          reduce using rule 367 (sp_decls -> .)
    START           reduce using rule 367 (sp_decls -> .)
    COMMIT          reduce using rule 367 (sp_decls -> .)
    ROLLBACK        reduce using rule 367 (sp_decls -> .)
    SELECT          reduce using rule 367 (sp_decls -> .)
    END             reduce using rule 367 (sp_decls -> .)
    DECLARE         shift and go to state 887

    sp_decls                       shift and go to state 935
    sp_decl                        shift and go to state 886

state 912

    (396) sp_ident_list -> IDENT .
    (397) sp_ident_list -> IDENT . , sp_ident_list

    DELIM           reduce using rule 396 (sp_ident_list -> IDENT .)
    ;               reduce using rule 396 (sp_ident_list -> IDENT .)
    TINYINT         reduce using rule 396 (sp_ident_list -> IDENT .)
    SMALLINT        reduce using rule 396 (sp_ident_list -> IDENT .)
    MEDIUMINT       reduce using rule 396 (sp_ident_list -> IDENT .)
    INT             reduce using rule 396 (sp_ident_list -> IDENT .)
    INTEGER         reduce using rule 396 (sp_ident_list -> IDENT .)
    BIGINT          reduce using rule 396 (sp_ident_list -> IDENT .)
    ,               shift and go to state 936


state 913

    (377) sp_decl -> DECLARE sp_ident_list . sp_type_with_opt_collate sp_opt_default
    (376) sp_type_with_opt_collate -> . sp_type opt_collate
    (375) sp_type -> . integer_type limit_opt unsigned_opt
    (130) integer_type -> . TINYINT
    (131) integer_type -> . SMALLINT
    (132) integer_type -> . MEDIUMINT
    (133) integer_type -> . INT
    (134) integer_type -> . INTEGER
    (135) integer_type -> . BIGINT

    TINYINT         shift and go to state 539
    SMALLINT        shift and go to state 543
    MEDIUMINT       shift and go to state 536
    INT             shift and go to state 563
    INTEGER         shift and go to state 554
    BIGINT          shift and go to state 540

    sp_type_with_opt_collate       shift and go to state 937
    sp_type                        shift and go to state 938
    integer_type                   shift and go to state 939

state 914

    (387) sp_unlabeled_control -> REPEAT sp_proc_stmts1 UNTIL . expr END REPEAT
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 940
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 915

    (386) sp_unlabeled_control -> WHILE expr DO . sp_proc_stmts1 END WHILE
    (348) sp_proc_stmts1 -> . sp_proc_stmt delim
    (349) sp_proc_stmts1 -> . sp_proc_stmt delim sp_proc_stmts1
    (400) sp_proc_stmt -> . sp_proc_stmt_statement
    (401) sp_proc_stmt -> . sp_proc_stmt_return
    (402) sp_proc_stmt -> . sp_proc_stmt_if
    (403) sp_proc_stmt -> . case_stmt_specification
    (404) sp_proc_stmt -> . sp_labeled_block
    (405) sp_proc_stmt -> . sp_unlabeled_block
    (406) sp_proc_stmt -> . sp_labeled_control
    (407) sp_proc_stmt -> . sp_proc_stmt_unlabeled
    (408) sp_proc_stmt -> . sp_proc_stmt_leave
    (409) sp_proc_stmt -> . sp_proc_stmt_iterate
    (410) sp_proc_stmt -> . sp_proc_stmt_open
    (411) sp_proc_stmt -> . sp_proc_stmt_fetch
    (412) sp_proc_stmt -> . sp_proc_stmt_close
    (346) sp_proc_stmt_statement -> . statement
    (347) sp_proc_stmt_return -> . RETURN expr
    (354) sp_proc_stmt_if -> . IF sp_if END IF
    (365) case_stmt_specification -> . simple_case_stmt
    (366) case_stmt_specification -> . searched_case_stmt
    (383) sp_labeled_block -> . IDENT : sp_block_content sp_opt_label
    (384) sp_unlabeled_block -> . sp_block_content
    (388) sp_labeled_control -> . IDENT : sp_unlabeled_control sp_opt_label
    (389) sp_proc_stmt_unlabeled -> . sp_unlabeled_control
    (390) sp_proc_stmt_leave -> . LEAVE IDENT
    (391) sp_proc_stmt_iterate -> . ITERATE IDENT
    (392) sp_proc_stmt_open -> . OPEN IDENT
    (398) sp_proc_stmt_fetch -> . FETCH ignore_fetch_noise IDENT INTO sp_ident_list
    (399) sp_proc_stmt_close -> . CLOSE IDENT
    (551) statement -> . alter_table
    (552) statement -> . create_table
    (553) statement -> . create_trigger
    (554) statement -> . create_view
    (555) statement -> . create_index
    (556) statement -> . delete
    (557) statement -> . drop_table
    (558) statement -> . drop_trigger
    (559) statement -> . drop_view
    (560) statement -> . insert
    (561) statement -> . replace
    (562) statement -> . optimize_table
    (563) statement -> . rename_table
    (564) statement -> . select
    (565) statement -> . set
    (566) statement -> . update
    (567) statement -> . start_transaction
    (568) statement -> . commit
    (569) statement -> . rollback
    (360) simple_case_stmt -> . CASE expr simple_when_clause_list else_clause_opt END CASE
    (364) searched_case_stmt -> . CASE searched_when_clause_list else_clause_opt END CASE
    (380) sp_block_content -> . BEGIN sp_decls sp_proc_stmts END
    (385) sp_unlabeled_control -> . LOOP sp_proc_stmts1 END LOOP
    (386) sp_unlabeled_control -> . WHILE expr DO sp_proc_stmts1 END WHILE
    (387) sp_unlabeled_control -> . REPEAT sp_proc_stmts1 UNTIL expr END REPEAT
    (249) alter_table -> . ALTER TABLE IDENT alter_specifications
    (213) create_table -> . CREATE TABLE if_not_exists IDENT ( create_statements ) table_options_opt
    (418) create_trigger -> . CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt
    (530) create_view -> . CREATE VIEW IDENT AS select
    (535) create_index -> . CREATE unique_opt INDEX IDENT ON IDENT ( ident_list )
    (340) delete -> . DELETE delete_options FROM IDENT where rows_limit
    (341) delete -> . DELETE delete_options ident_list FROM where
    (221) drop_table -> . DROP temporary TABLE if_exists ident_list opt_restrict_cascade
    (531) drop_trigger -> . DROP TRIGGER if_exists IDENT
    (536) drop_view -> . DROP VIEW if_exists ident_list opt_restrict_cascade
    (319) insert -> . INSERT insert_lock_option opt_ignore insert2 insert_field_spec opt_insert_update
    (324) replace -> . REPLACE replace_lock_option insert2 insert_field_spec
    (532) optimize_table -> . OPTIMIZE TABLE ident_list
    (345) rename_table -> . RENAME TABLE rename_tables
    (523) select -> . top_level_select_init
    (529) set -> . SET variable_assignments
    (334) update -> . UPDATE ident_list SET key_values where rows_limit
    (541) start_transaction -> . START TRANSACTION opt_with_consistent_snapshot
    (542) start_transaction -> . BEGIN opt_work
    (549) commit -> . COMMIT opt_work opt_chain opt_release
    (550) rollback -> . ROLLBACK opt_work opt_chain opt_release
    (522) top_level_select_init -> . SELECT select_init2

    RETURN          shift and go to state 835
    IF              shift and go to state 862
    IDENT           shift and go to state 837
    LEAVE           shift and go to state 836
    ITERATE         shift and go to state 860
    OPEN            shift and go to state 849
    FETCH           shift and go to state 850
    CLOSE           shift and go to state 856
    CASE            shift and go to state 851
    BEGIN           shift and go to state 838
    LOOP            shift and go to state 834
    WHILE           shift and go to state 848
    REPEAT          shift and go to state 841
    ALTER           shift and go to state 8
    CREATE          shift and go to state 16
    DELETE          shift and go to state 5
    DROP            shift and go to state 17
    INSERT          shift and go to state 11
    REPLACE         shift and go to state 20
    OPTIMIZE        shift and go to state 4
    RENAME          shift and go to state 1
    SET             shift and go to state 13
    UPDATE          shift and go to state 29
    START           shift and go to state 30
    COMMIT          shift and go to state 32
    ROLLBACK        shift and go to state 36
    SELECT          shift and go to state 24

    sp_unlabeled_control           shift and go to state 861
    set                            shift and go to state 2
    sp_proc_stmt_leave             shift and go to state 846
    sp_proc_stmt                   shift and go to state 880
    select                         shift and go to state 9
    sp_proc_stmts1                 shift and go to state 941
    drop_table                     shift and go to state 7
    simple_case_stmt               shift and go to state 863
    rename_table                   shift and go to state 10
    sp_proc_stmt_statement         shift and go to state 852
    drop_view                      shift and go to state 14
    drop_trigger                   shift and go to state 15
    sp_labeled_control             shift and go to state 845
    optimize_table                 shift and go to state 39
    sp_proc_stmt_open              shift and go to state 858
    sp_proc_stmt_iterate           shift and go to state 853
    alter_table                    shift and go to state 35
    statement                      shift and go to state 854
    sp_labeled_block               shift and go to state 859
    sp_proc_stmt_if                shift and go to state 840
    create_table                   shift and go to state 21
    sp_proc_stmt_unlabeled         shift and go to state 832
    top_level_select_init          shift and go to state 27
    rollback                       shift and go to state 25
    insert                         shift and go to state 26
    sp_proc_stmt_return            shift and go to state 842
    update                         shift and go to state 28
    searched_case_stmt             shift and go to state 855
    sp_block_content               shift and go to state 833
    start_transaction              shift and go to state 23
    replace                        shift and go to state 6
    create_index                   shift and go to state 33
    create_trigger                 shift and go to state 34
    sp_proc_stmt_close             shift and go to state 843
    case_stmt_specification        shift and go to state 844
    sp_unlabeled_block             shift and go to state 857
    create_view                    shift and go to state 38
    sp_proc_stmt_fetch             shift and go to state 839
    commit                         shift and go to state 40
    delete                         shift and go to state 41

state 916

    (393) ignore_fetch_noise -> NEXT FROM .

    IDENT           reduce using rule 393 (ignore_fetch_noise -> NEXT FROM .)


state 917

    (398) sp_proc_stmt_fetch -> FETCH ignore_fetch_noise IDENT . INTO sp_ident_list

    INTO            shift and go to state 942


state 918

    (363) searched_when_clause_list -> searched_when_clause searched_when_clause_list .

    ELSE            reduce using rule 363 (searched_when_clause_list -> searched_when_clause searched_when_clause_list .)
    END             reduce using rule 363 (searched_when_clause_list -> searched_when_clause searched_when_clause_list .)


state 919

    (361) searched_when_clause -> WHEN expr . THEN sp_proc_stmts1
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    THEN            shift and go to state 943
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 920

    (364) searched_case_stmt -> CASE searched_when_clause_list else_clause_opt . END CASE

    END             shift and go to state 944


state 921

    (356) else_clause_opt -> ELSE . sp_proc_stmts1
    (348) sp_proc_stmts1 -> . sp_proc_stmt delim
    (349) sp_proc_stmts1 -> . sp_proc_stmt delim sp_proc_stmts1
    (400) sp_proc_stmt -> . sp_proc_stmt_statement
    (401) sp_proc_stmt -> . sp_proc_stmt_return
    (402) sp_proc_stmt -> . sp_proc_stmt_if
    (403) sp_proc_stmt -> . case_stmt_specification
    (404) sp_proc_stmt -> . sp_labeled_block
    (405) sp_proc_stmt -> . sp_unlabeled_block
    (406) sp_proc_stmt -> . sp_labeled_control
    (407) sp_proc_stmt -> . sp_proc_stmt_unlabeled
    (408) sp_proc_stmt -> . sp_proc_stmt_leave
    (409) sp_proc_stmt -> . sp_proc_stmt_iterate
    (410) sp_proc_stmt -> . sp_proc_stmt_open
    (411) sp_proc_stmt -> . sp_proc_stmt_fetch
    (412) sp_proc_stmt -> . sp_proc_stmt_close
    (346) sp_proc_stmt_statement -> . statement
    (347) sp_proc_stmt_return -> . RETURN expr
    (354) sp_proc_stmt_if -> . IF sp_if END IF
    (365) case_stmt_specification -> . simple_case_stmt
    (366) case_stmt_specification -> . searched_case_stmt
    (383) sp_labeled_block -> . IDENT : sp_block_content sp_opt_label
    (384) sp_unlabeled_block -> . sp_block_content
    (388) sp_labeled_control -> . IDENT : sp_unlabeled_control sp_opt_label
    (389) sp_proc_stmt_unlabeled -> . sp_unlabeled_control
    (390) sp_proc_stmt_leave -> . LEAVE IDENT
    (391) sp_proc_stmt_iterate -> . ITERATE IDENT
    (392) sp_proc_stmt_open -> . OPEN IDENT
    (398) sp_proc_stmt_fetch -> . FETCH ignore_fetch_noise IDENT INTO sp_ident_list
    (399) sp_proc_stmt_close -> . CLOSE IDENT
    (551) statement -> . alter_table
    (552) statement -> . create_table
    (553) statement -> . create_trigger
    (554) statement -> . create_view
    (555) statement -> . create_index
    (556) statement -> . delete
    (557) statement -> . drop_table
    (558) statement -> . drop_trigger
    (559) statement -> . drop_view
    (560) statement -> . insert
    (561) statement -> . replace
    (562) statement -> . optimize_table
    (563) statement -> . rename_table
    (564) statement -> . select
    (565) statement -> . set
    (566) statement -> . update
    (567) statement -> . start_transaction
    (568) statement -> . commit
    (569) statement -> . rollback
    (360) simple_case_stmt -> . CASE expr simple_when_clause_list else_clause_opt END CASE
    (364) searched_case_stmt -> . CASE searched_when_clause_list else_clause_opt END CASE
    (380) sp_block_content -> . BEGIN sp_decls sp_proc_stmts END
    (385) sp_unlabeled_control -> . LOOP sp_proc_stmts1 END LOOP
    (386) sp_unlabeled_control -> . WHILE expr DO sp_proc_stmts1 END WHILE
    (387) sp_unlabeled_control -> . REPEAT sp_proc_stmts1 UNTIL expr END REPEAT
    (249) alter_table -> . ALTER TABLE IDENT alter_specifications
    (213) create_table -> . CREATE TABLE if_not_exists IDENT ( create_statements ) table_options_opt
    (418) create_trigger -> . CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt
    (530) create_view -> . CREATE VIEW IDENT AS select
    (535) create_index -> . CREATE unique_opt INDEX IDENT ON IDENT ( ident_list )
    (340) delete -> . DELETE delete_options FROM IDENT where rows_limit
    (341) delete -> . DELETE delete_options ident_list FROM where
    (221) drop_table -> . DROP temporary TABLE if_exists ident_list opt_restrict_cascade
    (531) drop_trigger -> . DROP TRIGGER if_exists IDENT
    (536) drop_view -> . DROP VIEW if_exists ident_list opt_restrict_cascade
    (319) insert -> . INSERT insert_lock_option opt_ignore insert2 insert_field_spec opt_insert_update
    (324) replace -> . REPLACE replace_lock_option insert2 insert_field_spec
    (532) optimize_table -> . OPTIMIZE TABLE ident_list
    (345) rename_table -> . RENAME TABLE rename_tables
    (523) select -> . top_level_select_init
    (529) set -> . SET variable_assignments
    (334) update -> . UPDATE ident_list SET key_values where rows_limit
    (541) start_transaction -> . START TRANSACTION opt_with_consistent_snapshot
    (542) start_transaction -> . BEGIN opt_work
    (549) commit -> . COMMIT opt_work opt_chain opt_release
    (550) rollback -> . ROLLBACK opt_work opt_chain opt_release
    (522) top_level_select_init -> . SELECT select_init2

    RETURN          shift and go to state 835
    IF              shift and go to state 862
    IDENT           shift and go to state 837
    LEAVE           shift and go to state 836
    ITERATE         shift and go to state 860
    OPEN            shift and go to state 849
    FETCH           shift and go to state 850
    CLOSE           shift and go to state 856
    CASE            shift and go to state 851
    BEGIN           shift and go to state 838
    LOOP            shift and go to state 834
    WHILE           shift and go to state 848
    REPEAT          shift and go to state 841
    ALTER           shift and go to state 8
    CREATE          shift and go to state 16
    DELETE          shift and go to state 5
    DROP            shift and go to state 17
    INSERT          shift and go to state 11
    REPLACE         shift and go to state 20
    OPTIMIZE        shift and go to state 4
    RENAME          shift and go to state 1
    SET             shift and go to state 13
    UPDATE          shift and go to state 29
    START           shift and go to state 30
    COMMIT          shift and go to state 32
    ROLLBACK        shift and go to state 36
    SELECT          shift and go to state 24

    sp_unlabeled_control           shift and go to state 861
    set                            shift and go to state 2
    sp_proc_stmt_leave             shift and go to state 846
    sp_proc_stmt                   shift and go to state 880
    select                         shift and go to state 9
    sp_proc_stmts1                 shift and go to state 945
    drop_table                     shift and go to state 7
    simple_case_stmt               shift and go to state 863
    rename_table                   shift and go to state 10
    sp_proc_stmt_statement         shift and go to state 852
    drop_view                      shift and go to state 14
    drop_trigger                   shift and go to state 15
    sp_labeled_control             shift and go to state 845
    optimize_table                 shift and go to state 39
    sp_proc_stmt_open              shift and go to state 858
    sp_proc_stmt_iterate           shift and go to state 853
    alter_table                    shift and go to state 35
    statement                      shift and go to state 854
    sp_labeled_block               shift and go to state 859
    sp_proc_stmt_if                shift and go to state 840
    create_table                   shift and go to state 21
    sp_proc_stmt_unlabeled         shift and go to state 832
    top_level_select_init          shift and go to state 27
    rollback                       shift and go to state 25
    insert                         shift and go to state 26
    sp_proc_stmt_return            shift and go to state 842
    update                         shift and go to state 28
    searched_case_stmt             shift and go to state 855
    sp_block_content               shift and go to state 833
    start_transaction              shift and go to state 23
    replace                        shift and go to state 6
    create_index                   shift and go to state 33
    create_trigger                 shift and go to state 34
    sp_proc_stmt_close             shift and go to state 843
    case_stmt_specification        shift and go to state 844
    sp_unlabeled_block             shift and go to state 857
    create_view                    shift and go to state 38
    sp_proc_stmt_fetch             shift and go to state 839
    commit                         shift and go to state 40
    delete                         shift and go to state 41

state 922

    (358) simple_when_clause_list -> simple_when_clause .
    (359) simple_when_clause_list -> simple_when_clause . simple_when_clause_list
    (358) simple_when_clause_list -> . simple_when_clause
    (359) simple_when_clause_list -> . simple_when_clause simple_when_clause_list
    (357) simple_when_clause -> . WHEN expr THEN sp_proc_stmts1

    ELSE            reduce using rule 358 (simple_when_clause_list -> simple_when_clause .)
    END             reduce using rule 358 (simple_when_clause_list -> simple_when_clause .)
    WHEN            shift and go to state 923

    simple_when_clause             shift and go to state 922
    simple_when_clause_list        shift and go to state 946

state 923

    (357) simple_when_clause -> WHEN . expr THEN sp_proc_stmts1
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 947
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 924

    (360) simple_case_stmt -> CASE expr simple_when_clause_list . else_clause_opt END CASE
    (355) else_clause_opt -> .
    (356) else_clause_opt -> . ELSE sp_proc_stmts1

    END             reduce using rule 355 (else_clause_opt -> .)
    ELSE            shift and go to state 921

    else_clause_opt                shift and go to state 948

state 925

    (354) sp_proc_stmt_if -> IF sp_if END . IF

    IF              shift and go to state 949


state 926

    (350) sp_if -> expr THEN . sp_proc_stmts1 sp_elseifs
    (348) sp_proc_stmts1 -> . sp_proc_stmt delim
    (349) sp_proc_stmts1 -> . sp_proc_stmt delim sp_proc_stmts1
    (400) sp_proc_stmt -> . sp_proc_stmt_statement
    (401) sp_proc_stmt -> . sp_proc_stmt_return
    (402) sp_proc_stmt -> . sp_proc_stmt_if
    (403) sp_proc_stmt -> . case_stmt_specification
    (404) sp_proc_stmt -> . sp_labeled_block
    (405) sp_proc_stmt -> . sp_unlabeled_block
    (406) sp_proc_stmt -> . sp_labeled_control
    (407) sp_proc_stmt -> . sp_proc_stmt_unlabeled
    (408) sp_proc_stmt -> . sp_proc_stmt_leave
    (409) sp_proc_stmt -> . sp_proc_stmt_iterate
    (410) sp_proc_stmt -> . sp_proc_stmt_open
    (411) sp_proc_stmt -> . sp_proc_stmt_fetch
    (412) sp_proc_stmt -> . sp_proc_stmt_close
    (346) sp_proc_stmt_statement -> . statement
    (347) sp_proc_stmt_return -> . RETURN expr
    (354) sp_proc_stmt_if -> . IF sp_if END IF
    (365) case_stmt_specification -> . simple_case_stmt
    (366) case_stmt_specification -> . searched_case_stmt
    (383) sp_labeled_block -> . IDENT : sp_block_content sp_opt_label
    (384) sp_unlabeled_block -> . sp_block_content
    (388) sp_labeled_control -> . IDENT : sp_unlabeled_control sp_opt_label
    (389) sp_proc_stmt_unlabeled -> . sp_unlabeled_control
    (390) sp_proc_stmt_leave -> . LEAVE IDENT
    (391) sp_proc_stmt_iterate -> . ITERATE IDENT
    (392) sp_proc_stmt_open -> . OPEN IDENT
    (398) sp_proc_stmt_fetch -> . FETCH ignore_fetch_noise IDENT INTO sp_ident_list
    (399) sp_proc_stmt_close -> . CLOSE IDENT
    (551) statement -> . alter_table
    (552) statement -> . create_table
    (553) statement -> . create_trigger
    (554) statement -> . create_view
    (555) statement -> . create_index
    (556) statement -> . delete
    (557) statement -> . drop_table
    (558) statement -> . drop_trigger
    (559) statement -> . drop_view
    (560) statement -> . insert
    (561) statement -> . replace
    (562) statement -> . optimize_table
    (563) statement -> . rename_table
    (564) statement -> . select
    (565) statement -> . set
    (566) statement -> . update
    (567) statement -> . start_transaction
    (568) statement -> . commit
    (569) statement -> . rollback
    (360) simple_case_stmt -> . CASE expr simple_when_clause_list else_clause_opt END CASE
    (364) searched_case_stmt -> . CASE searched_when_clause_list else_clause_opt END CASE
    (380) sp_block_content -> . BEGIN sp_decls sp_proc_stmts END
    (385) sp_unlabeled_control -> . LOOP sp_proc_stmts1 END LOOP
    (386) sp_unlabeled_control -> . WHILE expr DO sp_proc_stmts1 END WHILE
    (387) sp_unlabeled_control -> . REPEAT sp_proc_stmts1 UNTIL expr END REPEAT
    (249) alter_table -> . ALTER TABLE IDENT alter_specifications
    (213) create_table -> . CREATE TABLE if_not_exists IDENT ( create_statements ) table_options_opt
    (418) create_trigger -> . CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt
    (530) create_view -> . CREATE VIEW IDENT AS select
    (535) create_index -> . CREATE unique_opt INDEX IDENT ON IDENT ( ident_list )
    (340) delete -> . DELETE delete_options FROM IDENT where rows_limit
    (341) delete -> . DELETE delete_options ident_list FROM where
    (221) drop_table -> . DROP temporary TABLE if_exists ident_list opt_restrict_cascade
    (531) drop_trigger -> . DROP TRIGGER if_exists IDENT
    (536) drop_view -> . DROP VIEW if_exists ident_list opt_restrict_cascade
    (319) insert -> . INSERT insert_lock_option opt_ignore insert2 insert_field_spec opt_insert_update
    (324) replace -> . REPLACE replace_lock_option insert2 insert_field_spec
    (532) optimize_table -> . OPTIMIZE TABLE ident_list
    (345) rename_table -> . RENAME TABLE rename_tables
    (523) select -> . top_level_select_init
    (529) set -> . SET variable_assignments
    (334) update -> . UPDATE ident_list SET key_values where rows_limit
    (541) start_transaction -> . START TRANSACTION opt_with_consistent_snapshot
    (542) start_transaction -> . BEGIN opt_work
    (549) commit -> . COMMIT opt_work opt_chain opt_release
    (550) rollback -> . ROLLBACK opt_work opt_chain opt_release
    (522) top_level_select_init -> . SELECT select_init2

    RETURN          shift and go to state 835
    IF              shift and go to state 862
    IDENT           shift and go to state 837
    LEAVE           shift and go to state 836
    ITERATE         shift and go to state 860
    OPEN            shift and go to state 849
    FETCH           shift and go to state 850
    CLOSE           shift and go to state 856
    CASE            shift and go to state 851
    BEGIN           shift and go to state 838
    LOOP            shift and go to state 834
    WHILE           shift and go to state 848
    REPEAT          shift and go to state 841
    ALTER           shift and go to state 8
    CREATE          shift and go to state 16
    DELETE          shift and go to state 5
    DROP            shift and go to state 17
    INSERT          shift and go to state 11
    REPLACE         shift and go to state 20
    OPTIMIZE        shift and go to state 4
    RENAME          shift and go to state 1
    SET             shift and go to state 13
    UPDATE          shift and go to state 29
    START           shift and go to state 30
    COMMIT          shift and go to state 32
    ROLLBACK        shift and go to state 36
    SELECT          shift and go to state 24

    sp_unlabeled_control           shift and go to state 861
    set                            shift and go to state 2
    sp_proc_stmt_leave             shift and go to state 846
    sp_proc_stmt                   shift and go to state 880
    select                         shift and go to state 9
    sp_proc_stmts1                 shift and go to state 950
    drop_table                     shift and go to state 7
    simple_case_stmt               shift and go to state 863
    rename_table                   shift and go to state 10
    sp_proc_stmt_statement         shift and go to state 852
    drop_view                      shift and go to state 14
    drop_trigger                   shift and go to state 15
    sp_labeled_control             shift and go to state 845
    optimize_table                 shift and go to state 39
    sp_proc_stmt_open              shift and go to state 858
    sp_proc_stmt_iterate           shift and go to state 853
    alter_table                    shift and go to state 35
    statement                      shift and go to state 854
    sp_labeled_block               shift and go to state 859
    sp_proc_stmt_if                shift and go to state 840
    create_table                   shift and go to state 21
    sp_proc_stmt_unlabeled         shift and go to state 832
    top_level_select_init          shift and go to state 27
    rollback                       shift and go to state 25
    insert                         shift and go to state 26
    sp_proc_stmt_return            shift and go to state 842
    update                         shift and go to state 28
    searched_case_stmt             shift and go to state 855
    sp_block_content               shift and go to state 833
    start_transaction              shift and go to state 23
    replace                        shift and go to state 6
    create_index                   shift and go to state 33
    create_trigger                 shift and go to state 34
    sp_proc_stmt_close             shift and go to state 843
    case_stmt_specification        shift and go to state 844
    sp_unlabeled_block             shift and go to state 857
    create_view                    shift and go to state 38
    sp_proc_stmt_fetch             shift and go to state 839
    commit                         shift and go to state 40
    delete                         shift and go to state 41

state 927

    (478) key_usage_list -> key_usage_element , key_usage_list .

    )               reduce using rule 478 (key_usage_list -> key_usage_element , key_usage_list .)


state 928

    (349) sp_proc_stmts1 -> sp_proc_stmt delim sp_proc_stmts1 .

    END             reduce using rule 349 (sp_proc_stmts1 -> sp_proc_stmt delim sp_proc_stmts1 .)
    UNTIL           reduce using rule 349 (sp_proc_stmts1 -> sp_proc_stmt delim sp_proc_stmts1 .)
    ELSEIF          reduce using rule 349 (sp_proc_stmts1 -> sp_proc_stmt delim sp_proc_stmts1 .)
    ELSE            reduce using rule 349 (sp_proc_stmts1 -> sp_proc_stmt delim sp_proc_stmts1 .)
    WHEN            reduce using rule 349 (sp_proc_stmts1 -> sp_proc_stmt delim sp_proc_stmts1 .)


state 929

    (385) sp_unlabeled_control -> LOOP sp_proc_stmts1 END LOOP .

    DELIM           reduce using rule 385 (sp_unlabeled_control -> LOOP sp_proc_stmts1 END LOOP .)
    ;               reduce using rule 385 (sp_unlabeled_control -> LOOP sp_proc_stmts1 END LOOP .)
    IDENT           reduce using rule 385 (sp_unlabeled_control -> LOOP sp_proc_stmts1 END LOOP .)


state 930

    (382) sp_opt_label -> IDENT .

    DELIM           reduce using rule 382 (sp_opt_label -> IDENT .)
    ;               reduce using rule 382 (sp_opt_label -> IDENT .)


state 931

    (388) sp_labeled_control -> IDENT : sp_unlabeled_control sp_opt_label .

    DELIM           reduce using rule 388 (sp_labeled_control -> IDENT : sp_unlabeled_control sp_opt_label .)
    ;               reduce using rule 388 (sp_labeled_control -> IDENT : sp_unlabeled_control sp_opt_label .)


state 932

    (383) sp_labeled_block -> IDENT : sp_block_content sp_opt_label .

    DELIM           reduce using rule 383 (sp_labeled_block -> IDENT : sp_block_content sp_opt_label .)
    ;               reduce using rule 383 (sp_labeled_block -> IDENT : sp_block_content sp_opt_label .)


state 933

    (380) sp_block_content -> BEGIN sp_decls sp_proc_stmts END .

    DELIM           reduce using rule 380 (sp_block_content -> BEGIN sp_decls sp_proc_stmts END .)
    ;               reduce using rule 380 (sp_block_content -> BEGIN sp_decls sp_proc_stmts END .)
    IDENT           reduce using rule 380 (sp_block_content -> BEGIN sp_decls sp_proc_stmts END .)


state 934

    (379) sp_proc_stmts -> sp_proc_stmt delim . sp_proc_stmts
    (378) sp_proc_stmts -> .
    (379) sp_proc_stmts -> . sp_proc_stmt delim sp_proc_stmts
    (400) sp_proc_stmt -> . sp_proc_stmt_statement
    (401) sp_proc_stmt -> . sp_proc_stmt_return
    (402) sp_proc_stmt -> . sp_proc_stmt_if
    (403) sp_proc_stmt -> . case_stmt_specification
    (404) sp_proc_stmt -> . sp_labeled_block
    (405) sp_proc_stmt -> . sp_unlabeled_block
    (406) sp_proc_stmt -> . sp_labeled_control
    (407) sp_proc_stmt -> . sp_proc_stmt_unlabeled
    (408) sp_proc_stmt -> . sp_proc_stmt_leave
    (409) sp_proc_stmt -> . sp_proc_stmt_iterate
    (410) sp_proc_stmt -> . sp_proc_stmt_open
    (411) sp_proc_stmt -> . sp_proc_stmt_fetch
    (412) sp_proc_stmt -> . sp_proc_stmt_close
    (346) sp_proc_stmt_statement -> . statement
    (347) sp_proc_stmt_return -> . RETURN expr
    (354) sp_proc_stmt_if -> . IF sp_if END IF
    (365) case_stmt_specification -> . simple_case_stmt
    (366) case_stmt_specification -> . searched_case_stmt
    (383) sp_labeled_block -> . IDENT : sp_block_content sp_opt_label
    (384) sp_unlabeled_block -> . sp_block_content
    (388) sp_labeled_control -> . IDENT : sp_unlabeled_control sp_opt_label
    (389) sp_proc_stmt_unlabeled -> . sp_unlabeled_control
    (390) sp_proc_stmt_leave -> . LEAVE IDENT
    (391) sp_proc_stmt_iterate -> . ITERATE IDENT
    (392) sp_proc_stmt_open -> . OPEN IDENT
    (398) sp_proc_stmt_fetch -> . FETCH ignore_fetch_noise IDENT INTO sp_ident_list
    (399) sp_proc_stmt_close -> . CLOSE IDENT
    (551) statement -> . alter_table
    (552) statement -> . create_table
    (553) statement -> . create_trigger
    (554) statement -> . create_view
    (555) statement -> . create_index
    (556) statement -> . delete
    (557) statement -> . drop_table
    (558) statement -> . drop_trigger
    (559) statement -> . drop_view
    (560) statement -> . insert
    (561) statement -> . replace
    (562) statement -> . optimize_table
    (563) statement -> . rename_table
    (564) statement -> . select
    (565) statement -> . set
    (566) statement -> . update
    (567) statement -> . start_transaction
    (568) statement -> . commit
    (569) statement -> . rollback
    (360) simple_case_stmt -> . CASE expr simple_when_clause_list else_clause_opt END CASE
    (364) searched_case_stmt -> . CASE searched_when_clause_list else_clause_opt END CASE
    (380) sp_block_content -> . BEGIN sp_decls sp_proc_stmts END
    (385) sp_unlabeled_control -> . LOOP sp_proc_stmts1 END LOOP
    (386) sp_unlabeled_control -> . WHILE expr DO sp_proc_stmts1 END WHILE
    (387) sp_unlabeled_control -> . REPEAT sp_proc_stmts1 UNTIL expr END REPEAT
    (249) alter_table -> . ALTER TABLE IDENT alter_specifications
    (213) create_table -> . CREATE TABLE if_not_exists IDENT ( create_statements ) table_options_opt
    (418) create_trigger -> . CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt
    (530) create_view -> . CREATE VIEW IDENT AS select
    (535) create_index -> . CREATE unique_opt INDEX IDENT ON IDENT ( ident_list )
    (340) delete -> . DELETE delete_options FROM IDENT where rows_limit
    (341) delete -> . DELETE delete_options ident_list FROM where
    (221) drop_table -> . DROP temporary TABLE if_exists ident_list opt_restrict_cascade
    (531) drop_trigger -> . DROP TRIGGER if_exists IDENT
    (536) drop_view -> . DROP VIEW if_exists ident_list opt_restrict_cascade
    (319) insert -> . INSERT insert_lock_option opt_ignore insert2 insert_field_spec opt_insert_update
    (324) replace -> . REPLACE replace_lock_option insert2 insert_field_spec
    (532) optimize_table -> . OPTIMIZE TABLE ident_list
    (345) rename_table -> . RENAME TABLE rename_tables
    (523) select -> . top_level_select_init
    (529) set -> . SET variable_assignments
    (334) update -> . UPDATE ident_list SET key_values where rows_limit
    (541) start_transaction -> . START TRANSACTION opt_with_consistent_snapshot
    (542) start_transaction -> . BEGIN opt_work
    (549) commit -> . COMMIT opt_work opt_chain opt_release
    (550) rollback -> . ROLLBACK opt_work opt_chain opt_release
    (522) top_level_select_init -> . SELECT select_init2

    END             reduce using rule 378 (sp_proc_stmts -> .)
    RETURN          shift and go to state 835
    IF              shift and go to state 862
    IDENT           shift and go to state 837
    LEAVE           shift and go to state 836
    ITERATE         shift and go to state 860
    OPEN            shift and go to state 849
    FETCH           shift and go to state 850
    CLOSE           shift and go to state 856
    CASE            shift and go to state 851
    BEGIN           shift and go to state 838
    LOOP            shift and go to state 834
    WHILE           shift and go to state 848
    REPEAT          shift and go to state 841
    ALTER           shift and go to state 8
    CREATE          shift and go to state 16
    DELETE          shift and go to state 5
    DROP            shift and go to state 17
    INSERT          shift and go to state 11
    REPLACE         shift and go to state 20
    OPTIMIZE        shift and go to state 4
    RENAME          shift and go to state 1
    SET             shift and go to state 13
    UPDATE          shift and go to state 29
    START           shift and go to state 30
    COMMIT          shift and go to state 32
    ROLLBACK        shift and go to state 36
    SELECT          shift and go to state 24

    sp_unlabeled_control           shift and go to state 861
    set                            shift and go to state 2
    sp_proc_stmt_leave             shift and go to state 846
    sp_proc_stmt                   shift and go to state 910
    select                         shift and go to state 9
    drop_table                     shift and go to state 7
    simple_case_stmt               shift and go to state 863
    rename_table                   shift and go to state 10
    sp_proc_stmt_statement         shift and go to state 852
    drop_view                      shift and go to state 14
    drop_trigger                   shift and go to state 15
    sp_labeled_control             shift and go to state 845
    optimize_table                 shift and go to state 39
    sp_proc_stmt_open              shift and go to state 858
    sp_proc_stmt_iterate           shift and go to state 853
    alter_table                    shift and go to state 35
    statement                      shift and go to state 854
    sp_labeled_block               shift and go to state 859
    sp_proc_stmt_if                shift and go to state 840
    create_table                   shift and go to state 21
    sp_proc_stmt_unlabeled         shift and go to state 832
    top_level_select_init          shift and go to state 27
    rollback                       shift and go to state 25
    insert                         shift and go to state 26
    sp_proc_stmt_return            shift and go to state 842
    update                         shift and go to state 28
    searched_case_stmt             shift and go to state 855
    sp_block_content               shift and go to state 833
    start_transaction              shift and go to state 23
    replace                        shift and go to state 6
    create_index                   shift and go to state 33
    create_trigger                 shift and go to state 34
    sp_proc_stmt_close             shift and go to state 843
    case_stmt_specification        shift and go to state 844
    sp_unlabeled_block             shift and go to state 857
    create_view                    shift and go to state 38
    sp_proc_stmt_fetch             shift and go to state 839
    sp_proc_stmts                  shift and go to state 951
    commit                         shift and go to state 40
    delete                         shift and go to state 41

state 935

    (368) sp_decls -> sp_decl delim sp_decls .

    RETURN          reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    IF              reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    IDENT           reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    LEAVE           reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    ITERATE         reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    OPEN            reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    FETCH           reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    CLOSE           reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    CASE            reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    BEGIN           reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    LOOP            reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    WHILE           reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    REPEAT          reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    ALTER           reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    CREATE          reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    DELETE          reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    DROP            reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    INSERT          reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    REPLACE         reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    OPTIMIZE        reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    RENAME          reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    SET             reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    UPDATE          reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    START           reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    COMMIT          reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    ROLLBACK        reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    SELECT          reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)
    END             reduce using rule 368 (sp_decls -> sp_decl delim sp_decls .)


state 936

    (397) sp_ident_list -> IDENT , . sp_ident_list
    (396) sp_ident_list -> . IDENT
    (397) sp_ident_list -> . IDENT , sp_ident_list

    IDENT           shift and go to state 912

    sp_ident_list                  shift and go to state 952

state 937

    (377) sp_decl -> DECLARE sp_ident_list sp_type_with_opt_collate . sp_opt_default
    (369) sp_opt_default -> .
    (370) sp_opt_default -> . DEFAULT expr

    DELIM           reduce using rule 369 (sp_opt_default -> .)
    ;               reduce using rule 369 (sp_opt_default -> .)
    DEFAULT         shift and go to state 954

    sp_opt_default                 shift and go to state 953

state 938

    (376) sp_type_with_opt_collate -> sp_type . opt_collate
    (371) opt_collate -> .
    (374) opt_collate -> . COLLATE sp_collation_name_or_default

    DEFAULT         reduce using rule 371 (opt_collate -> .)
    DELIM           reduce using rule 371 (opt_collate -> .)
    ;               reduce using rule 371 (opt_collate -> .)
    COLLATE         shift and go to state 955

    opt_collate                    shift and go to state 956

state 939

    (375) sp_type -> integer_type . limit_opt unsigned_opt
    (139) limit_opt -> .
    (140) limit_opt -> . limit
    (141) limit -> . ( NUMBER )

    UNSIGNED        reduce using rule 139 (limit_opt -> .)
    COLLATE         reduce using rule 139 (limit_opt -> .)
    DEFAULT         reduce using rule 139 (limit_opt -> .)
    DELIM           reduce using rule 139 (limit_opt -> .)
    ;               reduce using rule 139 (limit_opt -> .)
    (               shift and go to state 662

    limit                          shift and go to state 664
    limit_opt                      shift and go to state 957

state 940

    (387) sp_unlabeled_control -> REPEAT sp_proc_stmts1 UNTIL expr . END REPEAT
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    END             shift and go to state 958
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 941

    (386) sp_unlabeled_control -> WHILE expr DO sp_proc_stmts1 . END WHILE

    END             shift and go to state 959


state 942

    (398) sp_proc_stmt_fetch -> FETCH ignore_fetch_noise IDENT INTO . sp_ident_list
    (396) sp_ident_list -> . IDENT
    (397) sp_ident_list -> . IDENT , sp_ident_list

    IDENT           shift and go to state 912

    sp_ident_list                  shift and go to state 960

state 943

    (361) searched_when_clause -> WHEN expr THEN . sp_proc_stmts1
    (348) sp_proc_stmts1 -> . sp_proc_stmt delim
    (349) sp_proc_stmts1 -> . sp_proc_stmt delim sp_proc_stmts1
    (400) sp_proc_stmt -> . sp_proc_stmt_statement
    (401) sp_proc_stmt -> . sp_proc_stmt_return
    (402) sp_proc_stmt -> . sp_proc_stmt_if
    (403) sp_proc_stmt -> . case_stmt_specification
    (404) sp_proc_stmt -> . sp_labeled_block
    (405) sp_proc_stmt -> . sp_unlabeled_block
    (406) sp_proc_stmt -> . sp_labeled_control
    (407) sp_proc_stmt -> . sp_proc_stmt_unlabeled
    (408) sp_proc_stmt -> . sp_proc_stmt_leave
    (409) sp_proc_stmt -> . sp_proc_stmt_iterate
    (410) sp_proc_stmt -> . sp_proc_stmt_open
    (411) sp_proc_stmt -> . sp_proc_stmt_fetch
    (412) sp_proc_stmt -> . sp_proc_stmt_close
    (346) sp_proc_stmt_statement -> . statement
    (347) sp_proc_stmt_return -> . RETURN expr
    (354) sp_proc_stmt_if -> . IF sp_if END IF
    (365) case_stmt_specification -> . simple_case_stmt
    (366) case_stmt_specification -> . searched_case_stmt
    (383) sp_labeled_block -> . IDENT : sp_block_content sp_opt_label
    (384) sp_unlabeled_block -> . sp_block_content
    (388) sp_labeled_control -> . IDENT : sp_unlabeled_control sp_opt_label
    (389) sp_proc_stmt_unlabeled -> . sp_unlabeled_control
    (390) sp_proc_stmt_leave -> . LEAVE IDENT
    (391) sp_proc_stmt_iterate -> . ITERATE IDENT
    (392) sp_proc_stmt_open -> . OPEN IDENT
    (398) sp_proc_stmt_fetch -> . FETCH ignore_fetch_noise IDENT INTO sp_ident_list
    (399) sp_proc_stmt_close -> . CLOSE IDENT
    (551) statement -> . alter_table
    (552) statement -> . create_table
    (553) statement -> . create_trigger
    (554) statement -> . create_view
    (555) statement -> . create_index
    (556) statement -> . delete
    (557) statement -> . drop_table
    (558) statement -> . drop_trigger
    (559) statement -> . drop_view
    (560) statement -> . insert
    (561) statement -> . replace
    (562) statement -> . optimize_table
    (563) statement -> . rename_table
    (564) statement -> . select
    (565) statement -> . set
    (566) statement -> . update
    (567) statement -> . start_transaction
    (568) statement -> . commit
    (569) statement -> . rollback
    (360) simple_case_stmt -> . CASE expr simple_when_clause_list else_clause_opt END CASE
    (364) searched_case_stmt -> . CASE searched_when_clause_list else_clause_opt END CASE
    (380) sp_block_content -> . BEGIN sp_decls sp_proc_stmts END
    (385) sp_unlabeled_control -> . LOOP sp_proc_stmts1 END LOOP
    (386) sp_unlabeled_control -> . WHILE expr DO sp_proc_stmts1 END WHILE
    (387) sp_unlabeled_control -> . REPEAT sp_proc_stmts1 UNTIL expr END REPEAT
    (249) alter_table -> . ALTER TABLE IDENT alter_specifications
    (213) create_table -> . CREATE TABLE if_not_exists IDENT ( create_statements ) table_options_opt
    (418) create_trigger -> . CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt
    (530) create_view -> . CREATE VIEW IDENT AS select
    (535) create_index -> . CREATE unique_opt INDEX IDENT ON IDENT ( ident_list )
    (340) delete -> . DELETE delete_options FROM IDENT where rows_limit
    (341) delete -> . DELETE delete_options ident_list FROM where
    (221) drop_table -> . DROP temporary TABLE if_exists ident_list opt_restrict_cascade
    (531) drop_trigger -> . DROP TRIGGER if_exists IDENT
    (536) drop_view -> . DROP VIEW if_exists ident_list opt_restrict_cascade
    (319) insert -> . INSERT insert_lock_option opt_ignore insert2 insert_field_spec opt_insert_update
    (324) replace -> . REPLACE replace_lock_option insert2 insert_field_spec
    (532) optimize_table -> . OPTIMIZE TABLE ident_list
    (345) rename_table -> . RENAME TABLE rename_tables
    (523) select -> . top_level_select_init
    (529) set -> . SET variable_assignments
    (334) update -> . UPDATE ident_list SET key_values where rows_limit
    (541) start_transaction -> . START TRANSACTION opt_with_consistent_snapshot
    (542) start_transaction -> . BEGIN opt_work
    (549) commit -> . COMMIT opt_work opt_chain opt_release
    (550) rollback -> . ROLLBACK opt_work opt_chain opt_release
    (522) top_level_select_init -> . SELECT select_init2

    RETURN          shift and go to state 835
    IF              shift and go to state 862
    IDENT           shift and go to state 837
    LEAVE           shift and go to state 836
    ITERATE         shift and go to state 860
    OPEN            shift and go to state 849
    FETCH           shift and go to state 850
    CLOSE           shift and go to state 856
    CASE            shift and go to state 851
    BEGIN           shift and go to state 838
    LOOP            shift and go to state 834
    WHILE           shift and go to state 848
    REPEAT          shift and go to state 841
    ALTER           shift and go to state 8
    CREATE          shift and go to state 16
    DELETE          shift and go to state 5
    DROP            shift and go to state 17
    INSERT          shift and go to state 11
    REPLACE         shift and go to state 20
    OPTIMIZE        shift and go to state 4
    RENAME          shift and go to state 1
    SET             shift and go to state 13
    UPDATE          shift and go to state 29
    START           shift and go to state 30
    COMMIT          shift and go to state 32
    ROLLBACK        shift and go to state 36
    SELECT          shift and go to state 24

    sp_unlabeled_control           shift and go to state 861
    set                            shift and go to state 2
    sp_proc_stmt_leave             shift and go to state 846
    sp_proc_stmt                   shift and go to state 880
    select                         shift and go to state 9
    sp_proc_stmts1                 shift and go to state 961
    drop_table                     shift and go to state 7
    simple_case_stmt               shift and go to state 863
    rename_table                   shift and go to state 10
    sp_proc_stmt_statement         shift and go to state 852
    drop_view                      shift and go to state 14
    drop_trigger                   shift and go to state 15
    sp_labeled_control             shift and go to state 845
    optimize_table                 shift and go to state 39
    sp_proc_stmt_open              shift and go to state 858
    sp_proc_stmt_iterate           shift and go to state 853
    alter_table                    shift and go to state 35
    statement                      shift and go to state 854
    sp_labeled_block               shift and go to state 859
    sp_proc_stmt_if                shift and go to state 840
    create_table                   shift and go to state 21
    sp_proc_stmt_unlabeled         shift and go to state 832
    top_level_select_init          shift and go to state 27
    rollback                       shift and go to state 25
    insert                         shift and go to state 26
    sp_proc_stmt_return            shift and go to state 842
    update                         shift and go to state 28
    searched_case_stmt             shift and go to state 855
    sp_block_content               shift and go to state 833
    start_transaction              shift and go to state 23
    replace                        shift and go to state 6
    create_index                   shift and go to state 33
    create_trigger                 shift and go to state 34
    sp_proc_stmt_close             shift and go to state 843
    case_stmt_specification        shift and go to state 844
    sp_unlabeled_block             shift and go to state 857
    create_view                    shift and go to state 38
    sp_proc_stmt_fetch             shift and go to state 839
    commit                         shift and go to state 40
    delete                         shift and go to state 41

state 944

    (364) searched_case_stmt -> CASE searched_when_clause_list else_clause_opt END . CASE

    CASE            shift and go to state 962


state 945

    (356) else_clause_opt -> ELSE sp_proc_stmts1 .

    END             reduce using rule 356 (else_clause_opt -> ELSE sp_proc_stmts1 .)


state 946

    (359) simple_when_clause_list -> simple_when_clause simple_when_clause_list .

    ELSE            reduce using rule 359 (simple_when_clause_list -> simple_when_clause simple_when_clause_list .)
    END             reduce using rule 359 (simple_when_clause_list -> simple_when_clause simple_when_clause_list .)


state 947

    (357) simple_when_clause -> WHEN expr . THEN sp_proc_stmts1
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    THEN            shift and go to state 963
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 948

    (360) simple_case_stmt -> CASE expr simple_when_clause_list else_clause_opt . END CASE

    END             shift and go to state 964


state 949

    (354) sp_proc_stmt_if -> IF sp_if END IF .

    DELIM           reduce using rule 354 (sp_proc_stmt_if -> IF sp_if END IF .)
    ;               reduce using rule 354 (sp_proc_stmt_if -> IF sp_if END IF .)


state 950

    (350) sp_if -> expr THEN sp_proc_stmts1 . sp_elseifs
    (351) sp_elseifs -> .
    (352) sp_elseifs -> . ELSEIF sp_if
    (353) sp_elseifs -> . ELSE sp_proc_stmts1

    END             reduce using rule 351 (sp_elseifs -> .)
    ELSEIF          shift and go to state 966
    ELSE            shift and go to state 967

    sp_elseifs                     shift and go to state 965

state 951

    (379) sp_proc_stmts -> sp_proc_stmt delim sp_proc_stmts .

    END             reduce using rule 379 (sp_proc_stmts -> sp_proc_stmt delim sp_proc_stmts .)


state 952

    (397) sp_ident_list -> IDENT , sp_ident_list .

    DELIM           reduce using rule 397 (sp_ident_list -> IDENT , sp_ident_list .)
    ;               reduce using rule 397 (sp_ident_list -> IDENT , sp_ident_list .)
    TINYINT         reduce using rule 397 (sp_ident_list -> IDENT , sp_ident_list .)
    SMALLINT        reduce using rule 397 (sp_ident_list -> IDENT , sp_ident_list .)
    MEDIUMINT       reduce using rule 397 (sp_ident_list -> IDENT , sp_ident_list .)
    INT             reduce using rule 397 (sp_ident_list -> IDENT , sp_ident_list .)
    INTEGER         reduce using rule 397 (sp_ident_list -> IDENT , sp_ident_list .)
    BIGINT          reduce using rule 397 (sp_ident_list -> IDENT , sp_ident_list .)


state 953

    (377) sp_decl -> DECLARE sp_ident_list sp_type_with_opt_collate sp_opt_default .

    DELIM           reduce using rule 377 (sp_decl -> DECLARE sp_ident_list sp_type_with_opt_collate sp_opt_default .)
    ;               reduce using rule 377 (sp_decl -> DECLARE sp_ident_list sp_type_with_opt_collate sp_opt_default .)


state 954

    (370) sp_opt_default -> DEFAULT . expr
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 968
    simple_expr                    shift and go to state 131
    max_function                   shift and go to state 149

state 955

    (374) opt_collate -> COLLATE . sp_collation_name_or_default
    (372) sp_collation_name_or_default -> . IDENT
    (373) sp_collation_name_or_default -> . DEFAULT

    IDENT           shift and go to state 971
    DEFAULT         shift and go to state 969

    sp_collation_name_or_default   shift and go to state 970

state 956

    (376) sp_type_with_opt_collate -> sp_type opt_collate .

    DEFAULT         reduce using rule 376 (sp_type_with_opt_collate -> sp_type opt_collate .)
    DELIM           reduce using rule 376 (sp_type_with_opt_collate -> sp_type opt_collate .)
    ;               reduce using rule 376 (sp_type_with_opt_collate -> sp_type opt_collate .)


state 957

    (375) sp_type -> integer_type limit_opt . unsigned_opt
    (159) unsigned_opt -> .
    (160) unsigned_opt -> . UNSIGNED

    COLLATE         reduce using rule 159 (unsigned_opt -> .)
    DEFAULT         reduce using rule 159 (unsigned_opt -> .)
    DELIM           reduce using rule 159 (unsigned_opt -> .)
    ;               reduce using rule 159 (unsigned_opt -> .)
    UNSIGNED        shift and go to state 746

    unsigned_opt                   shift and go to state 972

state 958

    (387) sp_unlabeled_control -> REPEAT sp_proc_stmts1 UNTIL expr END . REPEAT

    REPEAT          shift and go to state 973


state 959

    (386) sp_unlabeled_control -> WHILE expr DO sp_proc_stmts1 END . WHILE

    WHILE           shift and go to state 974


state 960

    (398) sp_proc_stmt_fetch -> FETCH ignore_fetch_noise IDENT INTO sp_ident_list .

    DELIM           reduce using rule 398 (sp_proc_stmt_fetch -> FETCH ignore_fetch_noise IDENT INTO sp_ident_list .)
    ;               reduce using rule 398 (sp_proc_stmt_fetch -> FETCH ignore_fetch_noise IDENT INTO sp_ident_list .)


state 961

    (361) searched_when_clause -> WHEN expr THEN sp_proc_stmts1 .

    WHEN            reduce using rule 361 (searched_when_clause -> WHEN expr THEN sp_proc_stmts1 .)
    ELSE            reduce using rule 361 (searched_when_clause -> WHEN expr THEN sp_proc_stmts1 .)
    END             reduce using rule 361 (searched_when_clause -> WHEN expr THEN sp_proc_stmts1 .)


state 962

    (364) searched_case_stmt -> CASE searched_when_clause_list else_clause_opt END CASE .

    DELIM           reduce using rule 364 (searched_case_stmt -> CASE searched_when_clause_list else_clause_opt END CASE .)
    ;               reduce using rule 364 (searched_case_stmt -> CASE searched_when_clause_list else_clause_opt END CASE .)


state 963

    (357) simple_when_clause -> WHEN expr THEN . sp_proc_stmts1
    (348) sp_proc_stmts1 -> . sp_proc_stmt delim
    (349) sp_proc_stmts1 -> . sp_proc_stmt delim sp_proc_stmts1
    (400) sp_proc_stmt -> . sp_proc_stmt_statement
    (401) sp_proc_stmt -> . sp_proc_stmt_return
    (402) sp_proc_stmt -> . sp_proc_stmt_if
    (403) sp_proc_stmt -> . case_stmt_specification
    (404) sp_proc_stmt -> . sp_labeled_block
    (405) sp_proc_stmt -> . sp_unlabeled_block
    (406) sp_proc_stmt -> . sp_labeled_control
    (407) sp_proc_stmt -> . sp_proc_stmt_unlabeled
    (408) sp_proc_stmt -> . sp_proc_stmt_leave
    (409) sp_proc_stmt -> . sp_proc_stmt_iterate
    (410) sp_proc_stmt -> . sp_proc_stmt_open
    (411) sp_proc_stmt -> . sp_proc_stmt_fetch
    (412) sp_proc_stmt -> . sp_proc_stmt_close
    (346) sp_proc_stmt_statement -> . statement
    (347) sp_proc_stmt_return -> . RETURN expr
    (354) sp_proc_stmt_if -> . IF sp_if END IF
    (365) case_stmt_specification -> . simple_case_stmt
    (366) case_stmt_specification -> . searched_case_stmt
    (383) sp_labeled_block -> . IDENT : sp_block_content sp_opt_label
    (384) sp_unlabeled_block -> . sp_block_content
    (388) sp_labeled_control -> . IDENT : sp_unlabeled_control sp_opt_label
    (389) sp_proc_stmt_unlabeled -> . sp_unlabeled_control
    (390) sp_proc_stmt_leave -> . LEAVE IDENT
    (391) sp_proc_stmt_iterate -> . ITERATE IDENT
    (392) sp_proc_stmt_open -> . OPEN IDENT
    (398) sp_proc_stmt_fetch -> . FETCH ignore_fetch_noise IDENT INTO sp_ident_list
    (399) sp_proc_stmt_close -> . CLOSE IDENT
    (551) statement -> . alter_table
    (552) statement -> . create_table
    (553) statement -> . create_trigger
    (554) statement -> . create_view
    (555) statement -> . create_index
    (556) statement -> . delete
    (557) statement -> . drop_table
    (558) statement -> . drop_trigger
    (559) statement -> . drop_view
    (560) statement -> . insert
    (561) statement -> . replace
    (562) statement -> . optimize_table
    (563) statement -> . rename_table
    (564) statement -> . select
    (565) statement -> . set
    (566) statement -> . update
    (567) statement -> . start_transaction
    (568) statement -> . commit
    (569) statement -> . rollback
    (360) simple_case_stmt -> . CASE expr simple_when_clause_list else_clause_opt END CASE
    (364) searched_case_stmt -> . CASE searched_when_clause_list else_clause_opt END CASE
    (380) sp_block_content -> . BEGIN sp_decls sp_proc_stmts END
    (385) sp_unlabeled_control -> . LOOP sp_proc_stmts1 END LOOP
    (386) sp_unlabeled_control -> . WHILE expr DO sp_proc_stmts1 END WHILE
    (387) sp_unlabeled_control -> . REPEAT sp_proc_stmts1 UNTIL expr END REPEAT
    (249) alter_table -> . ALTER TABLE IDENT alter_specifications
    (213) create_table -> . CREATE TABLE if_not_exists IDENT ( create_statements ) table_options_opt
    (418) create_trigger -> . CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt
    (530) create_view -> . CREATE VIEW IDENT AS select
    (535) create_index -> . CREATE unique_opt INDEX IDENT ON IDENT ( ident_list )
    (340) delete -> . DELETE delete_options FROM IDENT where rows_limit
    (341) delete -> . DELETE delete_options ident_list FROM where
    (221) drop_table -> . DROP temporary TABLE if_exists ident_list opt_restrict_cascade
    (531) drop_trigger -> . DROP TRIGGER if_exists IDENT
    (536) drop_view -> . DROP VIEW if_exists ident_list opt_restrict_cascade
    (319) insert -> . INSERT insert_lock_option opt_ignore insert2 insert_field_spec opt_insert_update
    (324) replace -> . REPLACE replace_lock_option insert2 insert_field_spec
    (532) optimize_table -> . OPTIMIZE TABLE ident_list
    (345) rename_table -> . RENAME TABLE rename_tables
    (523) select -> . top_level_select_init
    (529) set -> . SET variable_assignments
    (334) update -> . UPDATE ident_list SET key_values where rows_limit
    (541) start_transaction -> . START TRANSACTION opt_with_consistent_snapshot
    (542) start_transaction -> . BEGIN opt_work
    (549) commit -> . COMMIT opt_work opt_chain opt_release
    (550) rollback -> . ROLLBACK opt_work opt_chain opt_release
    (522) top_level_select_init -> . SELECT select_init2

    RETURN          shift and go to state 835
    IF              shift and go to state 862
    IDENT           shift and go to state 837
    LEAVE           shift and go to state 836
    ITERATE         shift and go to state 860
    OPEN            shift and go to state 849
    FETCH           shift and go to state 850
    CLOSE           shift and go to state 856
    CASE            shift and go to state 851
    BEGIN           shift and go to state 838
    LOOP            shift and go to state 834
    WHILE           shift and go to state 848
    REPEAT          shift and go to state 841
    ALTER           shift and go to state 8
    CREATE          shift and go to state 16
    DELETE          shift and go to state 5
    DROP            shift and go to state 17
    INSERT          shift and go to state 11
    REPLACE         shift and go to state 20
    OPTIMIZE        shift and go to state 4
    RENAME          shift and go to state 1
    SET             shift and go to state 13
    UPDATE          shift and go to state 29
    START           shift and go to state 30
    COMMIT          shift and go to state 32
    ROLLBACK        shift and go to state 36
    SELECT          shift and go to state 24

    sp_unlabeled_control           shift and go to state 861
    set                            shift and go to state 2
    sp_proc_stmt_leave             shift and go to state 846
    sp_proc_stmt                   shift and go to state 880
    select                         shift and go to state 9
    sp_proc_stmts1                 shift and go to state 975
    drop_table                     shift and go to state 7
    simple_case_stmt               shift and go to state 863
    rename_table                   shift and go to state 10
    sp_proc_stmt_statement         shift and go to state 852
    drop_view                      shift and go to state 14
    drop_trigger                   shift and go to state 15
    sp_labeled_control             shift and go to state 845
    optimize_table                 shift and go to state 39
    sp_proc_stmt_open              shift and go to state 858
    sp_proc_stmt_iterate           shift and go to state 853
    alter_table                    shift and go to state 35
    statement                      shift and go to state 854
    sp_labeled_block               shift and go to state 859
    sp_proc_stmt_if                shift and go to state 840
    create_table                   shift and go to state 21
    sp_proc_stmt_unlabeled         shift and go to state 832
    top_level_select_init          shift and go to state 27
    rollback                       shift and go to state 25
    insert                         shift and go to state 26
    sp_proc_stmt_return            shift and go to state 842
    update                         shift and go to state 28
    searched_case_stmt             shift and go to state 855
    sp_block_content               shift and go to state 833
    start_transaction              shift and go to state 23
    replace                        shift and go to state 6
    create_index                   shift and go to state 33
    create_trigger                 shift and go to state 34
    sp_proc_stmt_close             shift and go to state 843
    case_stmt_specification        shift and go to state 844
    sp_unlabeled_block             shift and go to state 857
    create_view                    shift and go to state 38
    sp_proc_stmt_fetch             shift and go to state 839
    commit                         shift and go to state 40
    delete                         shift and go to state 41

state 964

    (360) simple_case_stmt -> CASE expr simple_when_clause_list else_clause_opt END . CASE

    CASE            shift and go to state 976


state 965

    (350) sp_if -> expr THEN sp_proc_stmts1 sp_elseifs .

    END             reduce using rule 350 (sp_if -> expr THEN sp_proc_stmts1 sp_elseifs .)


state 966

    (352) sp_elseifs -> ELSEIF . sp_if
    (350) sp_if -> . expr THEN sp_proc_stmts1 sp_elseifs
    (8) expr -> . expr OR expr
    (9) expr -> . expr AND expr
    (10) expr -> . expr XOR expr
    (11) expr -> . NOT expr
    (15) expr -> . boolean_primary IS not_opt true_false_or_unknown
    (16) expr -> . boolean_primary
    (17) boolean_primary -> . boolean_primary IS not_opt NULL
    (18) boolean_primary -> . boolean_primary NULL_SAFE predicate
    (19) boolean_primary -> . boolean_primary comparison_operator predicate
    (23) boolean_primary -> . boolean_primary comparison_operator all_or_any ( subquery )
    (24) boolean_primary -> . predicate
    (33) predicate -> . bit_expr not_opt IN ( subquery )
    (34) predicate -> . bit_expr not_opt IN ( expr_list )
    (35) predicate -> . bit_expr not_opt BETWEEN bit_expr AND predicate
    (36) predicate -> . bit_expr SOUNDS LIKE bit_expr
    (37) predicate -> . bit_expr not_opt LIKE simple_expr escape_opt
    (38) predicate -> . bit_expr not_opt REGEXP bit_expr
    (39) predicate -> . bit_expr
    (40) bit_expr -> . bit_expr BITWISE_OR bit_expr
    (41) bit_expr -> . bit_expr BITWISE_AND bit_expr
    (42) bit_expr -> . bit_expr SHL bit_expr
    (43) bit_expr -> . bit_expr SHR bit_expr
    (44) bit_expr -> . bit_expr PLUS bit_expr
    (45) bit_expr -> . bit_expr MINUS bit_expr
    (46) bit_expr -> . bit_expr TIMES bit_expr
    (47) bit_expr -> . bit_expr DIV bit_expr
    (48) bit_expr -> . bit_expr MOD bit_expr
    (49) bit_expr -> . bit_expr BITWISE_XOR bit_expr
    (50) bit_expr -> . simple_expr
    (54) simple_expr -> . literal
    (55) simple_expr -> . IDENT
    (56) simple_expr -> . @ IDENT
    (57) simple_expr -> . function_call
    (59) simple_expr -> . ( subquery )
    (60) simple_expr -> . EXISTS ( subquery )
    (61) simple_expr -> . ( expr_list )
    (62) simple_expr -> . ROW ( expr_list )
    (51) literal -> . STRING
    (52) literal -> . NUMBER
    (53) literal -> . FLOAT_LIT
    (91) function_call -> . convert_function
    (92) function_call -> . cast_function
    (93) function_call -> . average_function
    (94) function_call -> . bit_function
    (95) function_call -> . count_function
    (96) function_call -> . max_function
    (97) function_call -> . min_function
    (98) function_call -> . sum_function
    (99) function_call -> . other_function
    (63) convert_function -> . CONVERT ( expr USING IDENT )
    (74) cast_function -> . CAST ( expr AS cast_type )
    (77) average_function -> . AVG ( opt_distinct expr )
    (78) bit_function -> . BIT_AND ( expr )
    (79) bit_function -> . BIT_OR ( expr )
    (80) bit_function -> . BIT_XOR ( expr )
    (83) count_function -> . COUNT ( opt_all * )
    (84) count_function -> . COUNT ( expr )
    (85) count_function -> . COUNT ( DISTINCT expr_list )
    (86) max_function -> . MAX ( opt_distinct expr )
    (87) min_function -> . MIN ( opt_distinct expr )
    (88) sum_function -> . SUM ( opt_distinct expr )
    (89) other_function -> . IDENT ( )
    (90) other_function -> . IDENT ( expr_list )

    NOT             shift and go to state 159
    IDENT           shift and go to state 196
    @               shift and go to state 126
    (               shift and go to state 158
    EXISTS          shift and go to state 147
    ROW             shift and go to state 141
    STRING          shift and go to state 146
    NUMBER          shift and go to state 148
    FLOAT_LIT       shift and go to state 129
    CONVERT         shift and go to state 124
    CAST            shift and go to state 137
    AVG             shift and go to state 161
    BIT_AND         shift and go to state 122
    BIT_OR          shift and go to state 151
    BIT_XOR         shift and go to state 134
    COUNT           shift and go to state 123
    MAX             shift and go to state 150
    MIN             shift and go to state 157
    SUM             shift and go to state 127

    cast_function                  shift and go to state 125
    function_call                  shift and go to state 128
    average_function               shift and go to state 130
    sum_function                   shift and go to state 132
    convert_function               shift and go to state 140
    sp_if                          shift and go to state 977
    literal                        shift and go to state 138
    count_function                 shift and go to state 139
    boolean_primary                shift and go to state 142
    bit_expr                       shift and go to state 143
    predicate                      shift and go to state 144
    min_function                   shift and go to state 152
    max_function                   shift and go to state 149
    bit_function                   shift and go to state 153
    other_function                 shift and go to state 154
    expr                           shift and go to state 901
    simple_expr                    shift and go to state 131

state 967

    (353) sp_elseifs -> ELSE . sp_proc_stmts1
    (348) sp_proc_stmts1 -> . sp_proc_stmt delim
    (349) sp_proc_stmts1 -> . sp_proc_stmt delim sp_proc_stmts1
    (400) sp_proc_stmt -> . sp_proc_stmt_statement
    (401) sp_proc_stmt -> . sp_proc_stmt_return
    (402) sp_proc_stmt -> . sp_proc_stmt_if
    (403) sp_proc_stmt -> . case_stmt_specification
    (404) sp_proc_stmt -> . sp_labeled_block
    (405) sp_proc_stmt -> . sp_unlabeled_block
    (406) sp_proc_stmt -> . sp_labeled_control
    (407) sp_proc_stmt -> . sp_proc_stmt_unlabeled
    (408) sp_proc_stmt -> . sp_proc_stmt_leave
    (409) sp_proc_stmt -> . sp_proc_stmt_iterate
    (410) sp_proc_stmt -> . sp_proc_stmt_open
    (411) sp_proc_stmt -> . sp_proc_stmt_fetch
    (412) sp_proc_stmt -> . sp_proc_stmt_close
    (346) sp_proc_stmt_statement -> . statement
    (347) sp_proc_stmt_return -> . RETURN expr
    (354) sp_proc_stmt_if -> . IF sp_if END IF
    (365) case_stmt_specification -> . simple_case_stmt
    (366) case_stmt_specification -> . searched_case_stmt
    (383) sp_labeled_block -> . IDENT : sp_block_content sp_opt_label
    (384) sp_unlabeled_block -> . sp_block_content
    (388) sp_labeled_control -> . IDENT : sp_unlabeled_control sp_opt_label
    (389) sp_proc_stmt_unlabeled -> . sp_unlabeled_control
    (390) sp_proc_stmt_leave -> . LEAVE IDENT
    (391) sp_proc_stmt_iterate -> . ITERATE IDENT
    (392) sp_proc_stmt_open -> . OPEN IDENT
    (398) sp_proc_stmt_fetch -> . FETCH ignore_fetch_noise IDENT INTO sp_ident_list
    (399) sp_proc_stmt_close -> . CLOSE IDENT
    (551) statement -> . alter_table
    (552) statement -> . create_table
    (553) statement -> . create_trigger
    (554) statement -> . create_view
    (555) statement -> . create_index
    (556) statement -> . delete
    (557) statement -> . drop_table
    (558) statement -> . drop_trigger
    (559) statement -> . drop_view
    (560) statement -> . insert
    (561) statement -> . replace
    (562) statement -> . optimize_table
    (563) statement -> . rename_table
    (564) statement -> . select
    (565) statement -> . set
    (566) statement -> . update
    (567) statement -> . start_transaction
    (568) statement -> . commit
    (569) statement -> . rollback
    (360) simple_case_stmt -> . CASE expr simple_when_clause_list else_clause_opt END CASE
    (364) searched_case_stmt -> . CASE searched_when_clause_list else_clause_opt END CASE
    (380) sp_block_content -> . BEGIN sp_decls sp_proc_stmts END
    (385) sp_unlabeled_control -> . LOOP sp_proc_stmts1 END LOOP
    (386) sp_unlabeled_control -> . WHILE expr DO sp_proc_stmts1 END WHILE
    (387) sp_unlabeled_control -> . REPEAT sp_proc_stmts1 UNTIL expr END REPEAT
    (249) alter_table -> . ALTER TABLE IDENT alter_specifications
    (213) create_table -> . CREATE TABLE if_not_exists IDENT ( create_statements ) table_options_opt
    (418) create_trigger -> . CREATE TRIGGER IDENT trigger_time trigger_event ON IDENT FOR EACH ROW sp_proc_stmt
    (530) create_view -> . CREATE VIEW IDENT AS select
    (535) create_index -> . CREATE unique_opt INDEX IDENT ON IDENT ( ident_list )
    (340) delete -> . DELETE delete_options FROM IDENT where rows_limit
    (341) delete -> . DELETE delete_options ident_list FROM where
    (221) drop_table -> . DROP temporary TABLE if_exists ident_list opt_restrict_cascade
    (531) drop_trigger -> . DROP TRIGGER if_exists IDENT
    (536) drop_view -> . DROP VIEW if_exists ident_list opt_restrict_cascade
    (319) insert -> . INSERT insert_lock_option opt_ignore insert2 insert_field_spec opt_insert_update
    (324) replace -> . REPLACE replace_lock_option insert2 insert_field_spec
    (532) optimize_table -> . OPTIMIZE TABLE ident_list
    (345) rename_table -> . RENAME TABLE rename_tables
    (523) select -> . top_level_select_init
    (529) set -> . SET variable_assignments
    (334) update -> . UPDATE ident_list SET key_values where rows_limit
    (541) start_transaction -> . START TRANSACTION opt_with_consistent_snapshot
    (542) start_transaction -> . BEGIN opt_work
    (549) commit -> . COMMIT opt_work opt_chain opt_release
    (550) rollback -> . ROLLBACK opt_work opt_chain opt_release
    (522) top_level_select_init -> . SELECT select_init2

    RETURN          shift and go to state 835
    IF              shift and go to state 862
    IDENT           shift and go to state 837
    LEAVE           shift and go to state 836
    ITERATE         shift and go to state 860
    OPEN            shift and go to state 849
    FETCH           shift and go to state 850
    CLOSE           shift and go to state 856
    CASE            shift and go to state 851
    BEGIN           shift and go to state 838
    LOOP            shift and go to state 834
    WHILE           shift and go to state 848
    REPEAT          shift and go to state 841
    ALTER           shift and go to state 8
    CREATE          shift and go to state 16
    DELETE          shift and go to state 5
    DROP            shift and go to state 17
    INSERT          shift and go to state 11
    REPLACE         shift and go to state 20
    OPTIMIZE        shift and go to state 4
    RENAME          shift and go to state 1
    SET             shift and go to state 13
    UPDATE          shift and go to state 29
    START           shift and go to state 30
    COMMIT          shift and go to state 32
    ROLLBACK        shift and go to state 36
    SELECT          shift and go to state 24

    sp_unlabeled_control           shift and go to state 861
    set                            shift and go to state 2
    sp_proc_stmt_leave             shift and go to state 846
    sp_proc_stmt                   shift and go to state 880
    select                         shift and go to state 9
    sp_proc_stmts1                 shift and go to state 978
    drop_table                     shift and go to state 7
    simple_case_stmt               shift and go to state 863
    rename_table                   shift and go to state 10
    sp_proc_stmt_statement         shift and go to state 852
    drop_view                      shift and go to state 14
    drop_trigger                   shift and go to state 15
    sp_labeled_control             shift and go to state 845
    optimize_table                 shift and go to state 39
    sp_proc_stmt_open              shift and go to state 858
    sp_proc_stmt_iterate           shift and go to state 853
    alter_table                    shift and go to state 35
    statement                      shift and go to state 854
    sp_labeled_block               shift and go to state 859
    sp_proc_stmt_if                shift and go to state 840
    create_table                   shift and go to state 21
    sp_proc_stmt_unlabeled         shift and go to state 832
    top_level_select_init          shift and go to state 27
    rollback                       shift and go to state 25
    insert                         shift and go to state 26
    sp_proc_stmt_return            shift and go to state 842
    update                         shift and go to state 28
    searched_case_stmt             shift and go to state 855
    sp_block_content               shift and go to state 833
    start_transaction              shift and go to state 23
    replace                        shift and go to state 6
    create_index                   shift and go to state 33
    create_trigger                 shift and go to state 34
    sp_proc_stmt_close             shift and go to state 843
    case_stmt_specification        shift and go to state 844
    sp_unlabeled_block             shift and go to state 857
    create_view                    shift and go to state 38
    sp_proc_stmt_fetch             shift and go to state 839
    commit                         shift and go to state 40
    delete                         shift and go to state 41

state 968

    (370) sp_opt_default -> DEFAULT expr .
    (8) expr -> expr . OR expr
    (9) expr -> expr . AND expr
    (10) expr -> expr . XOR expr

    DELIM           reduce using rule 370 (sp_opt_default -> DEFAULT expr .)
    ;               reduce using rule 370 (sp_opt_default -> DEFAULT expr .)
    OR              shift and go to state 268
    AND             shift and go to state 266
    XOR             shift and go to state 267


state 969

    (373) sp_collation_name_or_default -> DEFAULT .

    DEFAULT         reduce using rule 373 (sp_collation_name_or_default -> DEFAULT .)
    DELIM           reduce using rule 373 (sp_collation_name_or_default -> DEFAULT .)
    ;               reduce using rule 373 (sp_collation_name_or_default -> DEFAULT .)


state 970

    (374) opt_collate -> COLLATE sp_collation_name_or_default .

    DEFAULT         reduce using rule 374 (opt_collate -> COLLATE sp_collation_name_or_default .)
    DELIM           reduce using rule 374 (opt_collate -> COLLATE sp_collation_name_or_default .)
    ;               reduce using rule 374 (opt_collate -> COLLATE sp_collation_name_or_default .)


state 971

    (372) sp_collation_name_or_default -> IDENT .

    DEFAULT         reduce using rule 372 (sp_collation_name_or_default -> IDENT .)
    DELIM           reduce using rule 372 (sp_collation_name_or_default -> IDENT .)
    ;               reduce using rule 372 (sp_collation_name_or_default -> IDENT .)


state 972

    (375) sp_type -> integer_type limit_opt unsigned_opt .

    COLLATE         reduce using rule 375 (sp_type -> integer_type limit_opt unsigned_opt .)
    DEFAULT         reduce using rule 375 (sp_type -> integer_type limit_opt unsigned_opt .)
    DELIM           reduce using rule 375 (sp_type -> integer_type limit_opt unsigned_opt .)
    ;               reduce using rule 375 (sp_type -> integer_type limit_opt unsigned_opt .)


state 973

    (387) sp_unlabeled_control -> REPEAT sp_proc_stmts1 UNTIL expr END REPEAT .

    DELIM           reduce using rule 387 (sp_unlabeled_control -> REPEAT sp_proc_stmts1 UNTIL expr END REPEAT .)
    ;               reduce using rule 387 (sp_unlabeled_control -> REPEAT sp_proc_stmts1 UNTIL expr END REPEAT .)
    IDENT           reduce using rule 387 (sp_unlabeled_control -> REPEAT sp_proc_stmts1 UNTIL expr END REPEAT .)


state 974

    (386) sp_unlabeled_control -> WHILE expr DO sp_proc_stmts1 END WHILE .

    DELIM           reduce using rule 386 (sp_unlabeled_control -> WHILE expr DO sp_proc_stmts1 END WHILE .)
    ;               reduce using rule 386 (sp_unlabeled_control -> WHILE expr DO sp_proc_stmts1 END WHILE .)
    IDENT           reduce using rule 386 (sp_unlabeled_control -> WHILE expr DO sp_proc_stmts1 END WHILE .)


state 975

    (357) simple_when_clause -> WHEN expr THEN sp_proc_stmts1 .

    WHEN            reduce using rule 357 (simple_when_clause -> WHEN expr THEN sp_proc_stmts1 .)
    ELSE            reduce using rule 357 (simple_when_clause -> WHEN expr THEN sp_proc_stmts1 .)
    END             reduce using rule 357 (simple_when_clause -> WHEN expr THEN sp_proc_stmts1 .)


state 976

    (360) simple_case_stmt -> CASE expr simple_when_clause_list else_clause_opt END CASE .

    DELIM           reduce using rule 360 (simple_case_stmt -> CASE expr simple_when_clause_list else_clause_opt END CASE .)
    ;               reduce using rule 360 (simple_case_stmt -> CASE expr simple_when_clause_list else_clause_opt END CASE .)


state 977

    (352) sp_elseifs -> ELSEIF sp_if .

    END             reduce using rule 352 (sp_elseifs -> ELSEIF sp_if .)


state 978

    (353) sp_elseifs -> ELSE sp_proc_stmts1 .

    END             reduce using rule 353 (sp_elseifs -> ELSE sp_proc_stmts1 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ON in state 612 resolved as shift
WARNING: shift/reduce conflict for KEY in state 685 resolved as shift
