class Archmage(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Archmage', 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON#NEWLINE#            )#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 7, spell_damage=1)
class BootyBayBodyguard(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Booty Bay Bodyguard', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(5, 4, taunt=True)
class DarkscaleHealer(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Darkscale Healer', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(2),#NEWLINE#            CharacterSelector(players=BothPlayer(), picker=UserPicker())))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 5)
class FieryWar(WeaponCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Fiery War', 3, CHARACTER_CLASS.WARRIOR,#NEWLINE#            CARD_RARITY.FREE, False)#NEWLINE##NEWLINE#    def create_weapon(self, player):#NEWLINE#        return Weapon(3, 3)
class FrostwolfWarlord(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Frostwolf Warlord', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, battlecry=Battlecry(Give(Buff(ChangeAttack(#NEWLINE#            Count(MinionSelector(MinionHason(), EnemyPlayer()))))),#NEWLINE#            MinionSelector(IsType(MINION_TYPE.MURLOC), value=0)))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 4)
class Hellfire(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Hellfire', 4, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.FREE)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for minion in copy.copy(game.other_player.minions):#NEWLINE#            minion.damage(player.effective_spell_damage(3), self)
class Innervate(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Innervate', 0, CHARACTER_CLASS.DRUID, CARD_RARITY#NEWLINE#            .FREE)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.change_temp_attack(2)#NEWLINE#        player.hero.change_temp_attack(2)
class MagmaRager(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Magma Rager', 3, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .FREE)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(5, 1)
class MortalCoil(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Mortal Coil', 1, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        targets = player.effective_spell_damage(game.other_player.minions)#NEWLINE#        target.append(player.minions)
class Polymorph(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Polymorph', 4, CHARACTER_CLASS.MAGE, CARD_RARITY.#NEWLINE#            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        frog = hearthbreaker.cards.minions.minion_type.minion_type()#NEWLINE#        minion.card = frog#NEWLINE#        self.target.add_buff(player)#NEWLINE#        player.draw()
class SearingTotem(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Searing Totem', 1, CHARACTER_CLASS.SHAMAN,#NEWLINE#            CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 1)
class SilverbackPatriarch(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Silverback Patriarch', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 4, taunt=True)
class StormwindKnight(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Stormwind Knight', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 5, charge=True)
class VoodooDoctor(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Voodoo Doctor', 1, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.FREE, battlecry=Battlecry(Heal(2),#NEWLINE#            CharacterSelector(players=BothPlayer(), picker=UserPicker())))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 1)
class WrathOfAirTotem(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Wrath of Air Totem', 1, CHARACTER_CLASS.SHAMAN,#NEWLINE#            CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(0, 2, spell_damage=1)
class AstralCommunion(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Astral Communion', 4, CHARACTER_CLASS.DRUID,#NEWLINE#            CARD_RARITY.EPIC)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        player.draw()
class Annoy-o-Tron(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Annoy-o-Tron', 2, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 2, divine_shield=True, taunt=True)
class BurlyRockjawTrogg(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Burly Rockjaw Trogg', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 5, effects=[Effect(SpellCast(player=EnemyPlayer()),#NEWLINE#            ActionTag(Give(ChangeAttack(2)), SelfSelector()))])
class CogmasterWrench(WeaponCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Cogmaster Wrench', 1, CHARACTER_CLASS.ROGUE,#NEWLINE#            CARD_RARITY.EPIC)#NEWLINE##NEWLINE#    def create_weapon(self, player):#NEWLINE#        return Weapon(1, 1, auras=[Aura(ChangeAttack(2), SelfSelector())])
class EchoOfMedivh(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Echo of Medivh', 4, CHARACTER_CLASS.MAGE,#NEWLINE#            CARD_RARITY.EPIC)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        for player in game.players:#NEWLINE#            minions = [card for card in player.hand if card.is_minion()]#NEWLINE#            if len(minion_card) and len(player.minions):#NEWLINE#                break
class FloatingWatcher(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Floating Watcher', 5, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 4, effects=[Effect(Damaged(), ActionTag(Give([Buff#NEWLINE#            (ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector()))])
class GnomishExperimenter(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Gnomish Experimenter', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.RARE, battlecry=Battlecry(Draw(), PlayerSelector()))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 2)
class IronJuggernaut(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Iron Juggernaut', 6, CHARACTER_CLASS.WARRIOR,#NEWLINE#            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH, battlecry=#NEWLINE#            Battlecry(Summon(Mine10(), PlayerSelector()), MinionSelector(#NEWLINE#            players=EnemyPlayer())))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(6, 5)
class MadderBomber(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Madder Bomber', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.RARE, battlecry=Battlecry(Damage(1),#NEWLINE#            CharacterSelector(None, BothPlayer(), RandomPicker(2))))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(5, 4)
class Mini-Mage(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Mini-Mage', 4, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 1, stealth=True, auras=[Buff(Stealth())])
class PilotedSky(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Piloted Sky', 6, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .EPIC, minion_type=MINION_TYPE.MECH)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(6, 4, deathrattle=Deathrattle(Summon(CardQuery(#NEWLINE#            conditions=[ManaCost(2), IsMinion()])), PlayerSelector(#NEWLINE#            EnemyPlayer())))
class ScarletPurifier(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Scarlet Purifier', 3, CHARACTER_CLASS.PALADIN,#NEWLINE#            CARD_RARITY.RARE, battlecry=Battlecry(Damage(2),#NEWLINE#            CharacterSelector(players=BothPlayer(), picker=UserPicker())))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 3)
class SiltfinSpiritwalker(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Siltfin Spiritwalker', 4, CHARACTER_CLASS.SHAMAN,#NEWLINE#            CARD_RARITY.EPIC, minion_type=MINION_TYPE.TOTEM)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 5, effects=[Effect(MinionSummoned(IsType(#NEWLINE#            MINION_TYPE.PIRATE)), ActionTag(Give(ChangeHealth(1)),#NEWLINE#            SelfSelector()))])
class TinkertownTechnician(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Tinkertown Technician', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack#NEWLINE#            (2)), Buff(ChangeHealth(3))]), PlayerSelector(), GreaterThan(#NEWLINE#            Count(CardSelector(condition=IsType(MINION_TYPE.MECH))), value=0)))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 3)
class Vol'jin(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__("Vol'jin", 6, CHARACTER_CLASS.PRIEST, CARD_RARITY.#NEWLINE#            LEGENDARY, battlecry=Battlecry(SwapStats('health', 'attack',#NEWLINE#            False), MinionSelector(players=BothPlayer(), picker=UserPicker())))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(6, 2)
class hunterBite(WeaponCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__("Gallywix's Bite", 4, CHARACTER_CLASS.WARRIOR,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_weapon(self, player):#NEWLINE#        return Weapon(4, 2, deathrattle=Deathrattle(Damage(1),#NEWLINE#            CharacterSelector(players=BothPlayer())), taunt=True)
class Maexxna(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Maexxna', 6, CHARACTER_CLASS.ALL, CARD_RARITY.#NEWLINE#            LEGENDARY, minion_type=MINION_TYPE.BEAST)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 8, effects=[Effect(DidDamage(), ActionTag(Kill(),#NEWLINE#            TargetSelector(IsMinion())))])
class SludgeBelcher(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Sludge Belcher', 5, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 5, taunt=True, taunt=True)
class Voidcaller(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Voidcaller', 4, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 4, deathrattle=Deathrattle(AddCard(CardQuery(#NEWLINE#            conditions=[IsType(MINION_TYPE.MECH)])), PlayerSelector()))
class Alexstrasza(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Alexstrasza', 9, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .LEGENDARY, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry#NEWLINE#            (Summon(remainingremaining()), PlayerSelector()))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(8, 8)
class ArcaneGolem(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Arcane Golem', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.RARE, battlecry=Battlecry(AddCard(ManaMana(),#NEWLINE#            PlayerSelector()), PlayerSelector(EnemyPlayer())))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 2, charge=True)
class BaineBloodhoof(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Baine Bloodhoof', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.LEGENDARY)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 5, deathrattle=Deathrattle(Summon(Thaddius()),#NEWLINE#            PlayerSelector(), InGraveyard(Feugen())))
class BladeFlurry(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Blade Flurry', 2, CHARACTER_CLASS.ROGUE,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        targets = copy.copy(game.other_player.minions)#NEWLINE#        targets.append(player.hero)#NEWLINE#        for minion in targets:#NEWLINE#            minion.die(self)
class Brawl(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Brawl', 5, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        targets = copy.copy(game.other_player.minions)#NEWLINE#        targets.extend(player.minions)#NEWLINE#        for minion in targets:#NEWLINE#            minion.die(self)
class Conceal(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Conceal', 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.#NEWLINE#            COMMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)
class Defender(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Defender', 1, CHARACTER_CLASS.PALADIN,#NEWLINE#            CARD_RARITY.COMMON, False)#NEWLINE##NEWLINE#    def create_minion(self, p):#NEWLINE#        return Minion(2, 1)
class Doomguard(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Doomguard', 5, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON, battlecry=#NEWLINE#            Battlecry(Draw(5), PlayerSelector()))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(5, 7, charge=True)
class EarthElemental(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Earth Elemental', 5, CHARACTER_CLASS.SHAMAN,#NEWLINE#            CARD_RARITY.EPIC, overload=1)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(7, 8, taunt=True)
class ExplosiveTrap(SecretCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Explosive Trap', 2, CHARACTER_CLASS.HUNTER,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def activate(self, player):#NEWLINE#        player.game.current_player.bind('minion_played', self._reveal)#NEWLINE##NEWLINE#    def deactivate(self, player):#NEWLINE#        player.game.current_player.unbind('character_attack', self._reveal)#NEWLINE##NEWLINE#    def _reveal(self, attacker):#NEWLINE#        player.unbind(4, None)#NEWLINE#        super().reveal()
class FlameOfAzzinoth(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Flame of Azzinoth', 1, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, False)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 1)
class Gnoll(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Gnoll', 2, CHARACTER_CLASS.ALL, CARD_RARITY.#NEWLINE#            COMMON, False)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 2, taunt=True)
class HolyWrath(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Holy Wrath', 5, CHARACTER_CLASS.PALADIN,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.silence('card_drawn', reduce_cost)#NEWLINE#        player.draw()
class Infernal(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Infernal', 6, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DEMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(6, 6)
class KirinTorMage(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Kirin Tor Mage', 3, CHARACTER_CLASS.MAGE,#NEWLINE#            CARD_RARITY.RARE, battlecry=Battlecry(GiveAura(AuraUntil(#NEWLINE#            ManaChange(-3), CardSelector(condition=IsMinion()), TurnEnded()#NEWLINE#            )), MinionSelector(players=EnemyPlayer())))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(4, 3)
class Lightwarden(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Lightwarden', 1, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .RARE)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 2, effects=[Effect(CharacterDamaged(condition=#NEWLINE#            IsMinion()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
class ManaWraith(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Mana Wraith', 2, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .RARE)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 2, auras=[Aura(ManaChange(5), CardSelector(#NEWLINE#            condition=IsMinion()))])
class Misdirection(SecretCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Misdirection', 2, CHARACTER_CLASS.HUNTER,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def activate(self, player):#NEWLINE#        player.game.current_player.bind('character_attack', self._reveal)#NEWLINE##NEWLINE#    def deactivate(self, player):#NEWLINE#        player.game.current_player.unbind('character_attack', self._reveal)#NEWLINE##NEWLINE#    def deactivate(self, player):#NEWLINE#        player.game.current_player.unbind('character_attack', self._reveal)
class NobleSacrifice(SecretCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Noble Sacrifice', 1, CHARACTER_CLASS.PALADIN,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE#        self.player = None#NEWLINE##NEWLINE#    def _reveal(self, card, index):#NEWLINE#        if card.is_spell() and len(self.player.minions#NEWLINE#            ) < 7 and card.target and CARD_RARITY.target.is_minion():#NEWLINE#            self.player.trigger(Buff(ManaChange(2)))#NEWLINE#            super().reveal()#NEWLINE##NEWLINE#    def activate(self, player):#NEWLINE#        player.game.current_player.bind('card_played', self._reveal)#NEWLINE#        self.player = player#NEWLINE##NEWLINE#    def deactivate(self, player):#NEWLINE#        player.game.current_player.unbind('character_attack', self._reveal)#NEWLINE#        self.player = None
class PowerOfTheWild(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Power of the Wild', 2, CHARACTER_CLASS.DRUID,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        from hearthbreaker.cards.minions.druid import Power#NEWLINE#        for minion in player.minions:#NEWLINE#            minion.increase_health(4)
class Redemption(SecretCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Redemption', 1, CHARACTER_CLASS.PALADIN,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def _reveal(self, attacker, target):#NEWLINE#        if len(self.player.minions) > 0:#NEWLINE#            target = minion.copy(self.player.minions.minions)#NEWLINE#            target.change_attack(3)#NEWLINE#            target.increase_health(2)#NEWLINE#            super().reveal()#NEWLINE##NEWLINE#    def activate(self, player):#NEWLINE#        player.game.current_player.bind('minion_died', self._reveal)#NEWLINE##NEWLINE#    def deactivate(self, player):#NEWLINE#        player.game.current_player.unbind('minion_died', self._reveal)
class ShadowMadness(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Shadow Madness', 4, CHARACTER_CLASS.PRIEST,#NEWLINE#            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.#NEWLINE#            find_enemy_minion_spell_target)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.die(self)#NEWLINE#        self.target.add_buff(Buff(ChangeAttack(3)))#NEWLINE#        self.target.add_buff(Buff(ChangeAttack(3)))#NEWLINE##NEWLINE#    def can_use(self, player, game):#NEWLINE#        return super().can_use(player, game) and len(player.minions) < 7
class SiphonSoul(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Siphon Soul', 6, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.#NEWLINE#            find_minion_spell_target, filter_func=lambda character: #NEWLINE#            character.card.minion_type == MINION_TYPE.DEMON)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.die(self)#NEWLINE#        player.hero.heal(player.effective_heal_power(3), self)
class Spellbender(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Spellbender', 0, CHARACTER_CLASS.MAGE,#NEWLINE#            CARD_RARITY.EPIC)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 3)
class SummoningPortal(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Summoning Portal', 4, CHARACTER_CLASS.WARLOCK,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(0, 4, auras=[Aura(ManaChange(-1), CardSelector(#NEWLINE#            condition=IsSpell()))])
class ThrallmarFarseer(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Thrallmar Farseer', 3, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(2, 3, windfury=True)
class Upgrade!(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Upgrade !', 1, CHARACTER_CLASS.WARRIOR,#NEWLINE#            CARD_RARITY.RARE)#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        targets = player.effective_spell_damage(game.random_amount(2, 1))#NEWLINE#        target = game.random_choice(targets)#NEWLINE#        target.heal(player.effective_spell_damage(1), self)
class Wisp(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Wisp', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,#NEWLINE#            False)#NEWLINE##NEWLINE#    def create_minion(self, p):#NEWLINE#        return Minion(1, 1)
class BlackWhelp(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Black Whelp', 1, CHARACTER_CLASS.ALL, CARD_RARITY#NEWLINE#            .COMMON, False, minion_type=MINION_TYPE.DRAGON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(1, 1)
class DragonkinSorcerer(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Dragonkin Sorcerer', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(3, 5, effects=[Effect(MinionDied(), ActionTag(Give([#NEWLINE#            Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])
class HungryDragon(MinionCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Hungry Dragon', 4, CHARACTER_CLASS.ALL,#NEWLINE#            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=#NEWLINE#            Battlecry(Summon(CardQuery(conditions=[ManaCost(6), EnemyPlayer#NEWLINE#            ()])), PlayerSelector(players=EnemyPlayer())))#NEWLINE##NEWLINE#    def create_minion(self, player):#NEWLINE#        return Minion(5, 6)
class SolemnVigil(SpellCard):#NEWLINE##NEWLINE#    def __init__(self):#NEWLINE#        super().__init__('Solemn Vigil', 5, CHARACTER_CLASS.PALADIN,#NEWLINE#            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.#NEWLINE#            find_spell_target, buffs=[Buff(ManaChange(Count(#NEWLINE#            DeadMinionSelector(players=BothPlayer())), -1))])#NEWLINE##NEWLINE#    def use(self, player, game):#NEWLINE#        super().use(player, game)#NEWLINE#        self.target.damage(player.effective_spell_damage(2), self)
